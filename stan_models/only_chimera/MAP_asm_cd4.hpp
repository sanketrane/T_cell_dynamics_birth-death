
// Code generated by stanc a7f4b745
#include <stan/model/model_header.hpp>
namespace MAP_asm_cd4_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 403> locations_array__ = 
{" (found before start of program)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 451, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 452, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 453, column 2 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 454, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 455, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 459, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 460, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 461, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 462, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 464, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 465, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 466, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 469, column 2 to column 80)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 472, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 473, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 471, column 21 to line 474, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 471, column 2 to line 474, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 490, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 491, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 492, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 494, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 494, column 32 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 495, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 495, column 32 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 496, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 496, column 32 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 498, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 498, column 33 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 499, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 499, column 33 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 500, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 500, column 33 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 502, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 502, column 36 to column 69)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 502, column 71 to column 104)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 506, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 507, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 510, column 2 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 511, column 2 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 512, column 2 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 514, column 2 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 515, column 2 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 516, column 2 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 519, column 4 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 520, column 4 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 521, column 4 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 523, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 524, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 525, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 527, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 528, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 529, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 518, column 22 to line 530, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 518, column 2 to line 530, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 534, column 4 to column 96)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 535, column 4 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 533, column 22 to line 536, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 533, column 2 to line 536, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 478, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 479, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 480, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 482, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 483, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 485, column 2 to column 59)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 486, column 2 to column 75)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 421, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 422, column 29 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 422, column 2 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 423, column 35 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 423, column 2 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 424, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 425, column 31 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 425, column 2 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 426, column 31 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 426, column 2 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 427, column 31 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 427, column 2 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 428, column 27 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 428, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 429, column 27 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 429, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 430, column 27 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 430, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 431, column 2 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 432, column 24 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 432, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 433, column 26 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 433, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 437, column 10 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 437, column 2 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 438, column 11 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 438, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 441, column 25 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 441, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 445, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 446, column 3 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 444, column 23 to line 447, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 444, column 2 to line 447, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 460, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 461, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 462, column 9 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 490, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 491, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 492, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 494, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 494, column 51 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 495, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 495, column 51 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 496, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 496, column 51 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 498, column 23 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 498, column 48 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 499, column 23 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 499, column 48 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 500, column 23 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 500, column 48 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 502, column 26 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 502, column 60 to column 67)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 502, column 95 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 506, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 507, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 5, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 6, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 6, column 16 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 9, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 9, column 28 to column 49)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 9, column 51 to column 64)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 9, column 67 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 9, column 84 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 11, column 4 to column 98)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 16, column 6 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 15, column 11 to line 17, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 14, column 6 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 13, column 17 to line 15, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 13, column 4 to line 17, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 18, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 4, column 29 to line 19, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 24, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 26, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 26, column 29 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 26, column 54 to column 74)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 27, column 4 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 28, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 34, column 6 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 33, column 11 to line 35, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 32, column 6 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 31, column 18 to line 33, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 31, column 4 to line 35, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 36, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 23, column 28 to line 37, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 41, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 42, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 43, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 49, column 6 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 48, column 11 to line 50, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 47, column 6 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 46, column 30 to line 48, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 46, column 4 to line 50, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 51, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 40, column 37 to line 52, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 56, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 57, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 58, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 58, column 15 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 60, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 61, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 62, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 55, column 44 to line 63, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 68, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 69, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 70, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 75, column 6 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 74, column 11 to line 76, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 73, column 6 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 72, column 17 to line 74, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 72, column 4 to line 76, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 77, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 65, column 30 to line 78, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 83, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 84, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 87, column 4 to column 64)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 88, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 82, column 43 to line 89, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 94, column 4 to column 64)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 92, column 42 to line 95, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 99, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 100, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 101, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 102, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 111, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 110, column 11 to line 112, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 109, column 6 to column 50)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 108, column 45 to line 110, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 108, column 11 to line 112, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 107, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 106, column 46 to line 108, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 106, column 11 to line 112, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 105, column 6 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 104, column 29 to line 106, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 104, column 4 to line 112, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 113, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 98, column 54 to line 114, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 118, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 119, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 124, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 123, column 12 to line 125, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 122, column 6 to column 67)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 121, column 30 to line 123, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 121, column 4 to line 125, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 126, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 117, column 28 to line 127, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 131, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 132, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 133, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 130, column 38 to line 134, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 138, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 139, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 141, column 4 to column 92)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 142, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 137, column 59 to line 143, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 147, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 149, column 4 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 150, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 146, column 55 to line 151, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 156, column 5 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 157, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 154, column 57 to line 158, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 162, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 163, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 168, column 8 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 167, column 13 to line 169, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 166, column 6 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 165, column 26 to line 167, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 165, column 4 to line 169, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 171, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 161, column 55 to line 172, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 176, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 177, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 182, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 181, column 11 to line 183, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 180, column 6 to column 113)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 179, column 27 to line 181, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 179, column 4 to line 183, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 184, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 175, column 60 to line 185, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 189, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 190, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 195, column 7 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 194, column 12 to line 196, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 193, column 7 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 192, column 27 to line 194, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 192, column 5 to line 196, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 197, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 188, column 62 to line 198, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 202, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 203, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 208, column 7 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 207, column 12 to line 209, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 206, column 7 to column 83)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 205, column 27 to line 207, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 205, column 5 to line 209, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 210, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 201, column 63 to line 211, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 215, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 216, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 221, column 7 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 220, column 12 to line 222, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 219, column 7 to column 93)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 218, column 28 to line 220, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 218, column 5 to line 222, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 224, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 214, column 58 to line 225, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 229, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 230, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 235, column 7 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 234, column 12 to line 236, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 233, column 7 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 232, column 28 to line 234, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 232, column 5 to line 236, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 238, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 228, column 56 to line 239, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 243, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 244, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 249, column 7 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 248, column 12 to line 250, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 247, column 7 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 246, column 27 to line 248, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 246, column 5 to line 250, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 252, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 242, column 57 to line 253, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 256, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 257, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 259, column 4 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 261, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 255, column 82 to line 262, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 265, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 266, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 268, column 4 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 270, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 264, column 83 to line 271, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 274, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 275, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 277, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 279, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 273, column 81 to line 280, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 283, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 284, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 286, column 4 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 288, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 282, column 82 to line 289, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 292, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 293, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 294, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 297, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 298, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 291, column 40 to line 299, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 302, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 303, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 304, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 306, column 4 to column 104)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 307, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 301, column 41 to line 308, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 311, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 312, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 313, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 315, column 4 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 316, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 310, column 39 to line 317, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 320, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 321, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 322, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 324, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 325, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 319, column 40 to line 326, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 330, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 331, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 331, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 332, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 333, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 336, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 337, column 5 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 335, column 20 to line 338, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 335, column 3 to line 338, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 339, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 329, column 48 to line 340, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 344, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 345, column 17 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 345, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 346, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 347, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 350, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 351, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 352, column 6 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 349, column 21 to line 353, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 349, column 4 to line 353, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 354, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 343, column 62 to line 355, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 359, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 360, column 17 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 360, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 361, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 362, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 365, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 366, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 367, column 6 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 364, column 21 to line 368, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 364, column 4 to line 368, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 369, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 358, column 60 to line 370, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 374, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 375, column 17 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 375, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 376, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 377, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 380, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 381, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 382, column 6 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 379, column 21 to line 383, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 379, column 4 to line 383, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 384, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 373, column 61 to line 385, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 389, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 390, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 393, column 25 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 393, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 394, column 26 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 394, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 395, column 27 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 395, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 397, column 11 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 397, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 401, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 402, column 4 to column 101)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 403, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 404, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 405, column 4 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 407, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 387, column 86 to line 408, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 412, column 5 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 414, column 5 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 416, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_cd4.stan', line 411, column 28 to line 417, column 4)"};


template <typename T0__>
stan::promote_args_t<T0__>
sp_numbers(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 122;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ fit1;
    fit1 = DUMMY_VAR__;
    
    local_scalar_t__ theta0;
    theta0 = DUMMY_VAR__;
    
    current_statement__ = 125;
    theta0 = 4.3E5;
    local_scalar_t__ theta_f;
    theta_f = DUMMY_VAR__;
    
    current_statement__ = 126;
    theta_f = 1.8E3;
    local_scalar_t__ n;
    n = DUMMY_VAR__;
    
    current_statement__ = 127;
    n = 2.1;
    local_scalar_t__ X;
    X = DUMMY_VAR__;
    
    current_statement__ = 128;
    X = 30.0;
    local_scalar_t__ q;
    q = DUMMY_VAR__;
    
    current_statement__ = 129;
    q = 3.7;
    current_statement__ = 130;
    fit1 = (theta0 +
             ((theta_f * pow((time - t0), n)) *
               (1 -
                 (pow((time - t0), q) / (pow(X, q) + pow((time - t0), q))))));
    current_statement__ = 135;
    if (logical_lt(time, t0)) {
      current_statement__ = 133;
      value = theta0;
    } else {
      current_statement__ = 131;
      value = fit1;
    }
    current_statement__ = 136;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sp_numbers_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return sp_numbers(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
eps_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ eps_0;
    eps_0 = DUMMY_VAR__;
    
    current_statement__ = 139;
    eps_0 = 0.14965320;
    local_scalar_t__ eps_f;
    eps_f = DUMMY_VAR__;
    
    current_statement__ = 140;
    eps_f = 0.03470231;
    local_scalar_t__ A;
    A = DUMMY_VAR__;
    
    current_statement__ = 141;
    A = 3.43078629;
    local_scalar_t__ eps5;
    eps5 = DUMMY_VAR__;
    
    current_statement__ = 142;
    eps5 = (stan::math::exp((-eps_f * (5 + A))) + eps_0);
    local_scalar_t__ fit;
    fit = DUMMY_VAR__;
    
    current_statement__ = 148;
    if (logical_lte(time, 5)) {
      current_statement__ = 146;
      fit = eps5;
    } else {
      current_statement__ = 144;
      fit = (stan::math::exp((-eps_f * (time + A))) + eps_0);
    }
    current_statement__ = 149;
    return fit;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eps_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return eps_spline(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
g_age(const T0__& age, const std::vector<T1__>& parms,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 151;
    t0 = 1.0;
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 152;
    N0 = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 158;
    if ((primitive_value(logical_gte(age, 0)) && primitive_value(
        logical_lte(age, t0)))) {
      current_statement__ = 156;
      value = (N0 / t0);
    } else {
      current_statement__ = 154;
      value = 0;
    }
    current_statement__ = 159;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return g_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_spline(const T0__& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 161;
    N0 = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 162;
    t0 = 1.0;
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 165;
    psi = (g_age(0.0, parms, pstream__) / sp_numbers(t0, pstream__));
    current_statement__ = 166;
    value = (psi * sp_numbers(time, pstream__));
    current_statement__ = 167;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_spline_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_spline(time, parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
Chi_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ chi;
    chi = DUMMY_VAR__;
    
    local_scalar_t__ chiEst;
    chiEst = DUMMY_VAR__;
    
    current_statement__ = 170;
    chiEst = 0.847543332;
    local_scalar_t__ qEst;
    qEst = DUMMY_VAR__;
    
    current_statement__ = 171;
    qEst = 0.050944623;
    current_statement__ = 176;
    if (logical_lt(time, 0)) {
      current_statement__ = 174;
      chi = 0;
    } else {
      current_statement__ = 172;
      chi = (chiEst * (1 - stan::math::exp((-qEst * time))));
    }
    current_statement__ = 177;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Chi_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return Chi_spline(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_donor(const T0__& time, const std::vector<T1__>& parms,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 180;
    tBMT = rvalue(parms, "parms", index_uni(4));
    current_statement__ = 181;
    value = (theta_spline(time, parms, pstream__) *
              Chi_spline((time - tBMT), pstream__));
    current_statement__ = 182;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_donor_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_donor(time, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_host(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 184;
    return (theta_spline(time, parms, pstream__) -
             theta_donor(time, parms, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_host_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_host(time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
ki_dist_theta(const T0__& ki, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 186;
    k_bar = (1 / stan::math::exp(1.0));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 188;
    t0 = 1.0;
    local_scalar_t__ r_ki_theta;
    r_ki_theta = DUMMY_VAR__;
    
    current_statement__ = 189;
    r_ki_theta = 0.9;
    current_statement__ = 200;
    if ((primitive_value(logical_gte(ki, 0)) && primitive_value(
        logical_lt(ki, k_bar)))) {
      current_statement__ = 198;
      value = ((1 - eps_spline(time, pstream__)) / k_bar);
    } else {
      current_statement__ = 197;
      if ((primitive_value(logical_gte(ki, k_bar)) && primitive_value(
          logical_lt(ki, r_ki_theta)))) {
        current_statement__ = 195;
        value = 0.0;
      } else {
        current_statement__ = 194;
        if ((primitive_value(logical_gte(ki, r_ki_theta)) && primitive_value(
            logical_lte(ki, 1.0)))) {
          current_statement__ = 192;
          value = (eps_spline(time, pstream__) / (1 - r_ki_theta));
        } else {
          current_statement__ = 190;
          value = 0.0;
        }
      }
    }
    current_statement__ = 201;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ki_dist_theta_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& ki, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return ki_dist_theta(ki, time, parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
ki_dist_init(const T0__& ki, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ r_ki_init;
    r_ki_init = DUMMY_VAR__;
    
    current_statement__ = 204;
    r_ki_init = 3.0;
    current_statement__ = 209;
    if ((primitive_value(logical_gte(ki, 0.0)) && primitive_value(
        logical_lte(ki, 1.0)))) {
      current_statement__ = 207;
      value = (stan::math::exp((ki * r_ki_init)) /
                ((stan::math::exp(r_ki_init) - 1) / r_ki_init));
    } else {
      current_statement__ = 205;
      value = 0.0;
    }
    current_statement__ = 210;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ki_dist_init_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& ki, std::ostream* pstream__)  const 
{
return ki_dist_init(ki, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
rho_age(const T0__& age, const std::vector<T1__>& parms,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 212;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 213;
    value = rho;
    current_statement__ = 214;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rho_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return rho_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
lambda_integ(const T0__& lo_lim, const T1__& up_lim,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ lambda0;
    lambda0 = DUMMY_VAR__;
    
    current_statement__ = 216;
    lambda0 = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ r_lambda;
    r_lambda = DUMMY_VAR__;
    
    current_statement__ = 217;
    r_lambda = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 218;
    value = ((lambda0 / r_lambda) *
              (stan::math::exp((-r_lambda * lo_lim)) -
                stan::math::exp((-r_lambda * up_lim))));
    current_statement__ = 219;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct lambda_integ_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& lo_lim, const T1__& up_lim,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return lambda_integ(lo_lim, up_lim, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_init_age(const T0__& age, const T1__& time,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 221;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 222;
    value = (g_age(t0, parms, pstream__) *
              stan::math::exp(
                -lambda_integ(((age - time) + t0), age, parms, pstream__)));
    current_statement__ = 223;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_init_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_init_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_theta_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 225;
    value = (theta_spline((time - age), parms, pstream__) *
              stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    current_statement__ = 226;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_total_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 229;
    t0 = 1.0;
    current_statement__ = 234;
    if (logical_lt(age, (time - t0))) {
      current_statement__ = 232;
      value = (theta_spline((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 230;
      value = (g_age(t0, parms, pstream__) *
                stan::math::exp(
                  -lambda_integ(((age - time) + t0), age, parms, pstream__)));
    }
    current_statement__ = 235;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_total_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_total_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_Host_init_age(const T0__& age, const T1__& time,
                  const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 237;
    tBMT = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 243;
    if (logical_gte(age, (time - tBMT))) {
      current_statement__ = 241;
      value = (Asm_total_age(((age - time) + tBMT), tBMT, parms, pstream__) *
                stan::math::exp(
                  -lambda_integ(((age - time) + tBMT), age, parms, pstream__)));
    } else {
      current_statement__ = 239;
      value = 0.0;
    }
    current_statement__ = 244;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_Host_init_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_Host_init_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_Host_theta_age(const T0__& age, const T1__& time,
                   const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 246;
    tBMT = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 252;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 250;
      value = (theta_host((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 248;
      value = 0.0;
    }
    current_statement__ = 253;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_Host_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_Host_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_Donor_theta_age(const T0__& age, const T1__& time,
                    const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 255;
    tBMT = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 261;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 259;
      value = (theta_donor((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 257;
      value = 0.0;
    }
    current_statement__ = 262;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_Donor_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_Donor_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_pooled_age(const T0__& age, const T1__& time,
               const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 264;
    tBMT = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 270;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 268;
      value = (Asm_Host_theta_age(age, time, parms, pstream__) +
                Asm_Donor_theta_age(age, time, parms, pstream__));
    } else {
      current_statement__ = 266;
      value = Asm_Host_init_age(age, time, parms, pstream__);
    }
    current_statement__ = 271;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_pooled_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_pooled_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_host_age(const T0__& age, const T1__& time,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 273;
    tBMT = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 279;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 277;
      value = Asm_Host_theta_age(age, time, parms, pstream__);
    } else {
      current_statement__ = 275;
      value = Asm_Host_init_age(age, time, parms, pstream__);
    }
    current_statement__ = 280;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_host_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_host_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_donor_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 282;
    tBMT = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 288;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 286;
      value = Asm_Donor_theta_age(age, time, parms, pstream__);
    } else {
      current_statement__ = 284;
      value = 0.0;
    }
    current_statement__ = 289;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_donor_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_donor_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_total_ode(const T0__& age, const std::vector<T1__>& y,
              const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
              const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 292;
    time = rvalue(parms, "parms", index_uni(4));
    current_statement__ = 293;
    value = Asm_total_age(age, time, parms, pstream__);
    current_statement__ = 294;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_total_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_total_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_pooled_ode(const T0__& age, const std::vector<T1__>& y,
               const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
               const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 297;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 298;
    value = Asm_pooled_age(age, time, parms, pstream__);
    current_statement__ = 299;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_pooled_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_pooled_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_host_ode(const T0__& age, const std::vector<T1__>& y,
             const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 302;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 303;
    value = Asm_host_age(age, time, parms, pstream__);
    current_statement__ = 304;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_host_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_host_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_donor_ode(const T0__& age, const std::vector<T1__>& y,
              const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
              const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 307;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 308;
    value = Asm_donor_age(age, time, parms, pstream__);
    current_statement__ = 309;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_donor_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_donor_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_total_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 313;
    time = rvalue(parms, "parms", index_uni(4));
    current_statement__ = 314;
    value = rvalue(
              integrate_ode_rk45(Asm_total_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_total_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(time, 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 315;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_total_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_total_counts(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_pooled_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 319;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 320;
    value = rvalue(
              integrate_ode_rk45(Asm_pooled_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_pooled_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(time, 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 321;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_pooled_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_pooled_counts(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_host_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 325;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 326;
    value = rvalue(
              integrate_ode_rk45(Asm_host_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_host_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 327;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_host_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_host_counts(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_donor_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 331;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 332;
    value = rvalue(
              integrate_ode_rk45(Asm_donor_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_donor_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(time, 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 333;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_donor_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_donor_counts(parms, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
N_total_time(const std::vector<T0__>& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 335;
    ndim = size(time);
    current_statement__ = 336;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    current_statement__ = 339;
    assign(params, rvalue(parms, "parms", index_min_max(1, 3)),
      "assigning variable params", index_min_max(1, 3));
    current_statement__ = 343;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 340;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(4));
      current_statement__ = 341;
      assign(y_solve, solve_total_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 344;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_total_time_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return N_total_time(time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
N_pooled_time(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 346;
    ndim = size(time);
    current_statement__ = 347;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    current_statement__ = 350;
    assign(params, rvalue(parms, "parms", index_min_max(1, 3)),
      "assigning variable params", index_min_max(1, 3));
    current_statement__ = 355;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 351;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(4));
      current_statement__ = 352;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 353;
      assign(y_solve, solve_pooled_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 356;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_pooled_time_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return N_pooled_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
N_host_time(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 358;
    ndim = size(time);
    current_statement__ = 359;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    current_statement__ = 362;
    assign(params, rvalue(parms, "parms", index_min_max(1, 3)),
      "assigning variable params", index_min_max(1, 3));
    current_statement__ = 367;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 363;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(4));
      current_statement__ = 364;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 365;
      assign(y_solve, solve_host_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 368;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_host_time_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return N_host_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
N_donor_time(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 370;
    ndim = size(time);
    current_statement__ = 371;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    current_statement__ = 374;
    assign(params, rvalue(parms, "parms", index_min_max(1, 3)),
      "assigning variable params", index_min_max(1, 3));
    current_statement__ = 379;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 375;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(4));
      current_statement__ = 376;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 377;
      assign(y_solve, solve_donor_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 380;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_donor_time_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return N_donor_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
math_reduce(const T0__& global_params_arg__, const T1__& local_params_arg__,
            const std::vector<T2__>& x_r, const std::vector<int>& x_i,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& global_params = to_ref(global_params_arg__);
  const auto& local_params = to_ref(local_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 382;
    n = size(x_i);
    int dat_t0;
    dat_t0 = std::numeric_limits<int>::min();
    
    current_statement__ = 383;
    dat_t0 = rvalue(x_i, "x_i", index_uni(1));
    current_statement__ = 384;
    validate_non_negative_index("chi_counts_mean", "n", n);
    std::vector<local_scalar_t__> chi_counts_mean;
    chi_counts_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 386;
    validate_non_negative_index("host_counts_mean", "n", n);
    std::vector<local_scalar_t__> host_counts_mean;
    host_counts_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 388;
    validate_non_negative_index("donor_counts_mean", "n", n);
    std::vector<local_scalar_t__> donor_counts_mean;
    donor_counts_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 390;
    validate_non_negative_index("y_mean_stacked", "2 * n", (2 * n));
    Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
    y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>((2 * n));
    stan::math::fill(y_mean_stacked, DUMMY_VAR__);
    
    current_statement__ = 392;
    assign(chi_counts_mean,
      N_pooled_time(x_r, to_array_1d(divide(to_vector(x_i), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable chi_counts_mean");
    current_statement__ = 393;
    assign(host_counts_mean,
      N_host_time(x_r, to_array_1d(divide(to_vector(x_i), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable host_counts_mean");
    current_statement__ = 394;
    assign(donor_counts_mean,
      N_donor_time(x_r, to_array_1d(divide(to_vector(x_i), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable donor_counts_mean");
    current_statement__ = 395;
    assign(y_mean_stacked,
      rvalue(chi_counts_mean, "chi_counts_mean", index_uni(1)),
      "assigning variable y_mean_stacked", index_uni(1));
    current_statement__ = 396;
    assign(y_mean_stacked,
      (rvalue(donor_counts_mean, "donor_counts_mean", index_uni(1)) /
        (rvalue(chi_counts_mean, "chi_counts_mean", index_uni(1)) *
          Chi_spline(
            (rvalue(x_r, "x_r", index_uni(1)) -
              (rvalue(x_i, "x_i", index_uni(1)) / 1.0)), pstream__))),
      "assigning variable y_mean_stacked", index_uni(2));
    current_statement__ = 397;
    return y_mean_stacked;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct math_reduce_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& global_params, const T1__& local_params,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return math_reduce(global_params, local_params, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
logit_inverse(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ ans;
    ans = DUMMY_VAR__;
    
    current_statement__ = 400;
    ans = (stan::math::exp(x) / (1 + stan::math::exp(x)));
    current_statement__ = 401;
    return ans;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logit_inverse_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return logit_inverse(x, pstream__);
}
};

class MAP_asm_cd4_model final : public model_base_crtp<MAP_asm_cd4_model> {

 private:
  int numChi;
  std::vector<double> chi_counts;
  std::vector<double> N_donor_fraction;
  int numPred;
  std::vector<double> ts_pred_chi1;
  std::vector<double> ts_pred_chi2;
  std::vector<double> ts_pred_chi3;
  std::vector<double> tb_pred1;
  std::vector<double> tb_pred2;
  std::vector<double> tb_pred3;
  int n_shards;
  std::vector<int> dat_t0;
  std::vector<int> dat_time;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<double>> x_r;
  std::vector<Eigen::Matrix<double, -1, 1>> local_params;
  int y_mean_stacked_1dim__;
 
 public:
  ~MAP_asm_cd4_model() { }
  
  inline std::string model_name() const final { return "MAP_asm_cd4_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 a7f4b745", "stancflags = "};
  }
  
  
  MAP_asm_cd4_model(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_cd4_model_namespace::MAP_asm_cd4_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 66;
      context__.validate_dims("data initialization","numChi","int",
          context__.to_vec());
      numChi = std::numeric_limits<int>::min();
      
      current_statement__ = 66;
      numChi = context__.vals_i("numChi")[(1 - 1)];
      current_statement__ = 66;
      current_statement__ = 66;
      check_greater_or_equal(function__, "numChi", numChi, 1);
      current_statement__ = 67;
      validate_non_negative_index("chi_counts", "numChi", numChi);
      current_statement__ = 68;
      context__.validate_dims("data initialization","chi_counts","double",
          context__.to_vec(numChi));
      chi_counts = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 68;
      assign(chi_counts, context__.vals_r("chi_counts"),
        "assigning variable chi_counts");
      current_statement__ = 68;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 68;
        current_statement__ = 68;
        check_greater_or_equal(function__, "chi_counts[sym1__]",
                               chi_counts[(sym1__ - 1)], 0);}
      current_statement__ = 69;
      validate_non_negative_index("N_donor_fraction", "numChi", numChi);
      current_statement__ = 70;
      context__.validate_dims("data initialization","N_donor_fraction",
          "double",context__.to_vec(numChi));
      N_donor_fraction = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 70;
      assign(N_donor_fraction, context__.vals_r("N_donor_fraction"),
        "assigning variable N_donor_fraction");
      current_statement__ = 70;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 70;
        current_statement__ = 70;
        check_greater_or_equal(function__, "N_donor_fraction[sym1__]",
                               N_donor_fraction[(sym1__ - 1)], 0);}
      current_statement__ = 71;
      context__.validate_dims("data initialization","numPred","int",
          context__.to_vec());
      numPred = std::numeric_limits<int>::min();
      
      current_statement__ = 71;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 71;
      current_statement__ = 71;
      check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 72;
      validate_non_negative_index("ts_pred_chi1", "numPred", numPred);
      current_statement__ = 73;
      context__.validate_dims("data initialization","ts_pred_chi1","double",
          context__.to_vec(numPred));
      ts_pred_chi1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 73;
      assign(ts_pred_chi1, context__.vals_r("ts_pred_chi1"),
        "assigning variable ts_pred_chi1");
      current_statement__ = 73;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 73;
        current_statement__ = 73;
        check_greater_or_equal(function__, "ts_pred_chi1[sym1__]",
                               ts_pred_chi1[(sym1__ - 1)], 0);}
      current_statement__ = 74;
      validate_non_negative_index("ts_pred_chi2", "numPred", numPred);
      current_statement__ = 75;
      context__.validate_dims("data initialization","ts_pred_chi2","double",
          context__.to_vec(numPred));
      ts_pred_chi2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 75;
      assign(ts_pred_chi2, context__.vals_r("ts_pred_chi2"),
        "assigning variable ts_pred_chi2");
      current_statement__ = 75;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 75;
        current_statement__ = 75;
        check_greater_or_equal(function__, "ts_pred_chi2[sym1__]",
                               ts_pred_chi2[(sym1__ - 1)], 0);}
      current_statement__ = 76;
      validate_non_negative_index("ts_pred_chi3", "numPred", numPred);
      current_statement__ = 77;
      context__.validate_dims("data initialization","ts_pred_chi3","double",
          context__.to_vec(numPred));
      ts_pred_chi3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 77;
      assign(ts_pred_chi3, context__.vals_r("ts_pred_chi3"),
        "assigning variable ts_pred_chi3");
      current_statement__ = 77;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 77;
        current_statement__ = 77;
        check_greater_or_equal(function__, "ts_pred_chi3[sym1__]",
                               ts_pred_chi3[(sym1__ - 1)], 0);}
      current_statement__ = 78;
      validate_non_negative_index("tb_pred1", "numPred", numPred);
      current_statement__ = 79;
      context__.validate_dims("data initialization","tb_pred1","double",
          context__.to_vec(numPred));
      tb_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 79;
      assign(tb_pred1, context__.vals_r("tb_pred1"),
        "assigning variable tb_pred1");
      current_statement__ = 79;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 79;
        current_statement__ = 79;
        check_greater_or_equal(function__, "tb_pred1[sym1__]",
                               tb_pred1[(sym1__ - 1)], 0);}
      current_statement__ = 80;
      validate_non_negative_index("tb_pred2", "numPred", numPred);
      current_statement__ = 81;
      context__.validate_dims("data initialization","tb_pred2","double",
          context__.to_vec(numPred));
      tb_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 81;
      assign(tb_pred2, context__.vals_r("tb_pred2"),
        "assigning variable tb_pred2");
      current_statement__ = 81;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 81;
        current_statement__ = 81;
        check_greater_or_equal(function__, "tb_pred2[sym1__]",
                               tb_pred2[(sym1__ - 1)], 0);}
      current_statement__ = 82;
      validate_non_negative_index("tb_pred3", "numPred", numPred);
      current_statement__ = 83;
      context__.validate_dims("data initialization","tb_pred3","double",
          context__.to_vec(numPred));
      tb_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 83;
      assign(tb_pred3, context__.vals_r("tb_pred3"),
        "assigning variable tb_pred3");
      current_statement__ = 83;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 83;
        current_statement__ = 83;
        check_greater_or_equal(function__, "tb_pred3[sym1__]",
                               tb_pred3[(sym1__ - 1)], 0);}
      current_statement__ = 84;
      context__.validate_dims("data initialization","n_shards","int",
          context__.to_vec());
      n_shards = std::numeric_limits<int>::min();
      
      current_statement__ = 84;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 85;
      validate_non_negative_index("dat_t0", "n_shards", n_shards);
      current_statement__ = 86;
      context__.validate_dims("data initialization","dat_t0","int",
          context__.to_vec(n_shards));
      dat_t0 = std::vector<int>(n_shards, std::numeric_limits<int>::min());
      
      current_statement__ = 86;
      assign(dat_t0, context__.vals_i("dat_t0"), "assigning variable dat_t0");
      current_statement__ = 86;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 86;
        current_statement__ = 86;
        check_greater_or_equal(function__, "dat_t0[sym1__]",
                               dat_t0[(sym1__ - 1)], 0);}
      current_statement__ = 87;
      validate_non_negative_index("dat_time", "n_shards", n_shards);
      current_statement__ = 88;
      context__.validate_dims("data initialization","dat_time","int",
          context__.to_vec(n_shards));
      dat_time = std::vector<int>(n_shards, std::numeric_limits<int>::min());
      
      current_statement__ = 88;
      assign(dat_time, context__.vals_i("dat_time"),
        "assigning variable dat_time");
      current_statement__ = 88;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 88;
        current_statement__ = 88;
        check_greater_or_equal(function__, "dat_time[sym1__]",
                               dat_time[(sym1__ - 1)], 0);}
      current_statement__ = 89;
      validate_non_negative_index("x_i", "n_shards", n_shards);
      current_statement__ = 90;
      x_i = std::vector<std::vector<int>>(n_shards, std::vector<int>(1, std::numeric_limits<int>::min()));
      
      current_statement__ = 91;
      validate_non_negative_index("x_r", "n_shards", n_shards);
      current_statement__ = 92;
      x_r = std::vector<std::vector<double>>(n_shards, std::vector<double>(1, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 93;
      validate_non_negative_index("local_params", "n_shards", n_shards);
      current_statement__ = 94;
      local_params = std::vector<Eigen::Matrix<double, -1, 1>>(n_shards, Eigen::Matrix<double, -1, 1>(0));
      stan::math::fill(local_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 98;
      for (int s = 1; s <= n_shards; ++s) {
        current_statement__ = 95;
        assign(x_i, rvalue(dat_t0, "dat_t0", index_uni(s)),
          "assigning variable x_i", index_uni(s), index_uni(1));
        current_statement__ = 96;
        assign(x_r, rvalue(dat_time, "dat_time", index_uni(s)),
          "assigning variable x_r", index_uni(s), index_uni(1));}
      current_statement__ = 99;
      validate_non_negative_index("y3_mean", "numChi", numChi);
      current_statement__ = 100;
      validate_non_negative_index("y4_mean", "numChi", numChi);
      current_statement__ = 101;
      y_mean_stacked_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 101;
      y_mean_stacked_1dim__ = (2 * numChi);
      current_statement__ = 101;
      validate_non_negative_index("y_mean_stacked", "2 * numChi",
                                  y_mean_stacked_1dim__);
      current_statement__ = 102;
      validate_non_negative_index("y_chi_pred1", "numPred", numPred);
      current_statement__ = 103;
      validate_non_negative_index("y_chi_pred2", "numPred", numPred);
      current_statement__ = 104;
      validate_non_negative_index("y_chi_pred3", "numPred", numPred);
      current_statement__ = 105;
      validate_non_negative_index("y3_mean_pred1", "numPred", numPred);
      current_statement__ = 106;
      validate_non_negative_index("y4_mean_pred1", "numPred", numPred);
      current_statement__ = 107;
      validate_non_negative_index("y3_mean_pred2", "numPred", numPred);
      current_statement__ = 108;
      validate_non_negative_index("y4_mean_pred2", "numPred", numPred);
      current_statement__ = 109;
      validate_non_negative_index("y3_mean_pred3", "numPred", numPred);
      current_statement__ = 110;
      validate_non_negative_index("y4_mean_pred3", "numPred", numPred);
      current_statement__ = 111;
      validate_non_negative_index("chicounts_pred1", "numPred", numPred);
      current_statement__ = 112;
      validate_non_negative_index("Nfd_pred1", "numPred", numPred);
      current_statement__ = 113;
      validate_non_negative_index("chicounts_pred2", "numPred", numPred);
      current_statement__ = 114;
      validate_non_negative_index("Nfd_pred2", "numPred", numPred);
      current_statement__ = 115;
      validate_non_negative_index("chicounts_pred3", "numPred", numPred);
      current_statement__ = 116;
      validate_non_negative_index("Nfd_pred3", "numPred", numPred);
      current_statement__ = 117;
      validate_non_negative_index("donor_counts_pred1", "numPred", numPred);
      current_statement__ = 118;
      validate_non_negative_index("donor_counts_pred2", "numPred", numPred);
      current_statement__ = 119;
      validate_non_negative_index("donor_counts_pred3", "numPred", numPred);
      current_statement__ = 120;
      validate_non_negative_index("log_lik_chi_counts", "numChi", numChi);
      current_statement__ = 121;
      validate_non_negative_index("log_lik_Nfd", "numChi", numChi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_cd4_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ N0;
      N0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E4, 2E6, lp__);
      } else {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E4, 2E6);
      }
      local_scalar_t__ lambda0;
      lambda0 = DUMMY_VAR__;
      
      current_statement__ = 2;
      lambda0 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        lambda0 = stan::math::lub_constrain(lambda0, 0, 0.5, lp__);
      } else {
        current_statement__ = 2;
        lambda0 = stan::math::lub_constrain(lambda0, 0, 0.5);
      }
      local_scalar_t__ r_lambda;
      r_lambda = DUMMY_VAR__;
      
      current_statement__ = 3;
      r_lambda = in__.scalar();
      local_scalar_t__ sigma_chi_counts;
      sigma_chi_counts = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma_chi_counts = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0);
      }
      local_scalar_t__ sigma_Nfd;
      sigma_Nfd = DUMMY_VAR__;
      
      current_statement__ = 5;
      sigma_Nfd = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0, lp__);
      } else {
        current_statement__ = 5;
        sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> global_params;
      global_params = Eigen::Matrix<local_scalar_t__, -1, 1>(5);
      stan::math::fill(global_params, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y3_mean;
      y3_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y3_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y4_mean;
      y4_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y4_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, DUMMY_VAR__);
      
      current_statement__ = 10;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 11;
      assign(global_params, lambda0,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 12;
      assign(global_params, r_lambda,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 13;
      assign(y_mean_stacked,
        map_rect<1, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 17;
      for (int i = 1; i <= numChi; ++i) {
        current_statement__ = 14;
        assign(y3_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((2 * i) - 1))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 15;
        assign(y4_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((2 * i) - 0))),
          "assigning variable y4_mean", index_uni(i));}
      {
        current_statement__ = 59;
        lp_accum__.add(normal_lpdf<propto__>(N0, 5E5, 1.5E5));
        current_statement__ = 60;
        lp_accum__.add(normal_lpdf<propto__>(lambda0, 0.05, 0.2));
        current_statement__ = 61;
        lp_accum__.add(normal_lpdf<propto__>(r_lambda, 0.0, 0.2));
        current_statement__ = 62;
        lp_accum__.add(normal_lpdf<propto__>(sigma_chi_counts, 0, 2));
        current_statement__ = 63;
        lp_accum__.add(normal_lpdf<propto__>(sigma_Nfd, 0, 2));
        current_statement__ = 64;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log(chi_counts),
            stan::math::log(y3_mean), sigma_chi_counts));
        current_statement__ = 65;
        lp_accum__.add(
          normal_lpdf<propto__>(logit(N_donor_fraction),
            logit(to_array_1d(y4_mean)), sigma_Nfd));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_cd4_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      N0 = stan::math::lub_constrain(N0, 1E4, 2E6);
      double lambda0;
      lambda0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      lambda0 = in__.scalar();
      current_statement__ = 2;
      lambda0 = stan::math::lub_constrain(lambda0, 0, 0.5);
      double r_lambda;
      r_lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      r_lambda = in__.scalar();
      double sigma_chi_counts;
      sigma_chi_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_chi_counts = in__.scalar();
      current_statement__ = 4;
      sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0);
      double sigma_Nfd;
      sigma_Nfd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_Nfd = in__.scalar();
      current_statement__ = 5;
      sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0);
      Eigen::Matrix<double, -1, 1> global_params;
      global_params = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(global_params, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y3_mean;
      y3_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y3_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y4_mean;
      y4_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y4_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<double, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(N0);
      vars__.emplace_back(lambda0);
      vars__.emplace_back(r_lambda);
      vars__.emplace_back(sigma_chi_counts);
      vars__.emplace_back(sigma_Nfd);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 11;
      assign(global_params, lambda0,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 12;
      assign(global_params, r_lambda,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 13;
      assign(y_mean_stacked,
        map_rect<2, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 17;
      for (int i = 1; i <= numChi; ++i) {
        current_statement__ = 14;
        assign(y3_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((2 * i) - 1))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 15;
        assign(y4_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((2 * i) - 0))),
          "assigning variable y4_mean", index_uni(i));}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          vars__.emplace_back(global_params[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y3_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y4_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
          vars__.emplace_back(y_mean_stacked[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_chi_pred1;
      y_chi_pred1 = std::vector<std::vector<double>>(numPred, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred2;
      y_chi_pred2 = std::vector<std::vector<double>>(numPred, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred3;
      y_chi_pred3 = std::vector<std::vector<double>>(numPred, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<double> y3_mean_pred1;
      y3_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred1;
      y4_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred2;
      y3_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred2;
      y4_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred3;
      y3_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred3;
      y4_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred1;
      chicounts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred1;
      Nfd_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred2;
      chicounts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred2;
      Nfd_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred3;
      chicounts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred3;
      Nfd_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_counts_pred1;
      donor_counts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_counts_pred2;
      donor_counts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_counts_pred3;
      donor_counts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_chi_counts;
      log_lik_chi_counts = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_chi_counts, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_Nfd;
      log_lik_Nfd = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_Nfd, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 38;
      assign(y3_mean_pred1,
        N_pooled_time(ts_pred_chi1, tb_pred1,
          to_array_1d(global_params), pstream__),
        "assigning variable y3_mean_pred1");
      current_statement__ = 39;
      assign(y3_mean_pred2,
        N_pooled_time(ts_pred_chi2, tb_pred2,
          to_array_1d(global_params), pstream__),
        "assigning variable y3_mean_pred2");
      current_statement__ = 40;
      assign(y3_mean_pred3,
        N_pooled_time(ts_pred_chi3, tb_pred3,
          to_array_1d(global_params), pstream__),
        "assigning variable y3_mean_pred3");
      current_statement__ = 41;
      assign(donor_counts_pred1,
        N_donor_time(ts_pred_chi1, tb_pred1,
          to_array_1d(global_params), pstream__),
        "assigning variable donor_counts_pred1");
      current_statement__ = 42;
      assign(donor_counts_pred2,
        N_donor_time(ts_pred_chi2, tb_pred2,
          to_array_1d(global_params), pstream__),
        "assigning variable donor_counts_pred2");
      current_statement__ = 43;
      assign(donor_counts_pred3,
        N_donor_time(ts_pred_chi3, tb_pred3,
          to_array_1d(global_params), pstream__),
        "assigning variable donor_counts_pred3");
      current_statement__ = 54;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 44;
        assign(y4_mean_pred1,
          (rvalue(donor_counts_pred1, "donor_counts_pred1", index_uni(i)) /
            (rvalue(y3_mean_pred1, "y3_mean_pred1", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred_chi1, "ts_pred_chi1", index_uni(i)) - 54), pstream__))),
          "assigning variable y4_mean_pred1", index_uni(i));
        current_statement__ = 45;
        assign(y4_mean_pred2,
          (rvalue(donor_counts_pred2, "donor_counts_pred2", index_uni(i)) /
            (rvalue(y3_mean_pred2, "y3_mean_pred2", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred_chi2, "ts_pred_chi2", index_uni(i)) - 71), pstream__))),
          "assigning variable y4_mean_pred2", index_uni(i));
        current_statement__ = 46;
        assign(y4_mean_pred3,
          (rvalue(donor_counts_pred3, "donor_counts_pred3", index_uni(i)) /
            (rvalue(y3_mean_pred3, "y3_mean_pred3", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred_chi3, "ts_pred_chi3", index_uni(i)) - 97), pstream__))),
          "assigning variable y4_mean_pred3", index_uni(i));
        current_statement__ = 47;
        assign(chicounts_pred1,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y3_mean_pred1, "y3_mean_pred1", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred1", index_uni(i));
        current_statement__ = 48;
        assign(chicounts_pred2,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y3_mean_pred2, "y3_mean_pred2", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred2", index_uni(i));
        current_statement__ = 49;
        assign(chicounts_pred3,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y3_mean_pred3, "y3_mean_pred3", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred3", index_uni(i));
        current_statement__ = 50;
        assign(Nfd_pred1,
          logit_inverse(
            normal_rng(
              logit(rvalue(y4_mean_pred1, "y4_mean_pred1", index_uni(i))),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred1", index_uni(i));
        current_statement__ = 51;
        assign(Nfd_pred2,
          logit_inverse(
            normal_rng(
              logit(rvalue(y4_mean_pred2, "y4_mean_pred2", index_uni(i))),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred2", index_uni(i));
        current_statement__ = 52;
        assign(Nfd_pred3,
          logit_inverse(
            normal_rng(
              logit(rvalue(y4_mean_pred3, "y4_mean_pred3", index_uni(i))),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred3", index_uni(i));}
      current_statement__ = 58;
      for (int i = 1; i <= numChi; ++i) {
        current_statement__ = 55;
        assign(log_lik_chi_counts,
          normal_lpdf<false>(
            stan::math::log(rvalue(chi_counts, "chi_counts", index_uni(i))),
            stan::math::log(rvalue(y3_mean, "y3_mean", index_uni(i))),
            sigma_chi_counts),
          "assigning variable log_lik_chi_counts", index_uni(i));
        current_statement__ = 56;
        assign(log_lik_Nfd,
          normal_lpdf<false>(
            logit(rvalue(N_donor_fraction, "N_donor_fraction", index_uni(i))),
            logit(rvalue(y4_mean, "y4_mean", index_uni(i))), sigma_Nfd),
          "assigning variable log_lik_Nfd", index_uni(i));}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred1[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred2[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred3[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_counts_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_counts_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_counts_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_chi_counts[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_Nfd[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = context__.vals_r("N0")[(1 - 1)];
      double N0_free__;
      N0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0_free__ = stan::math::lub_free(N0, 1E4, 2E6);
      double lambda0;
      lambda0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      lambda0 = context__.vals_r("lambda0")[(1 - 1)];
      double lambda0_free__;
      lambda0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      lambda0_free__ = stan::math::lub_free(lambda0, 0, 0.5);
      double r_lambda;
      r_lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      r_lambda = context__.vals_r("r_lambda")[(1 - 1)];
      double sigma_chi_counts;
      sigma_chi_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_chi_counts = context__.vals_r("sigma_chi_counts")[(1 - 1)];
      double sigma_chi_counts_free__;
      sigma_chi_counts_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_chi_counts_free__ = stan::math::lb_free(sigma_chi_counts, 0);
      double sigma_Nfd;
      sigma_Nfd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_Nfd = context__.vals_r("sigma_Nfd")[(1 - 1)];
      double sigma_Nfd_free__;
      sigma_Nfd_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_Nfd_free__ = stan::math::lb_free(sigma_Nfd, 0);
      vars__.emplace_back(N0_free__);
      vars__.emplace_back(lambda0_free__);
      vars__.emplace_back(r_lambda);
      vars__.emplace_back(sigma_chi_counts_free__);
      vars__.emplace_back(sigma_Nfd_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("N0");
    names__.emplace_back("lambda0");
    names__.emplace_back("r_lambda");
    names__.emplace_back("sigma_chi_counts");
    names__.emplace_back("sigma_Nfd");
    names__.emplace_back("global_params");
    names__.emplace_back("y3_mean");
    names__.emplace_back("y4_mean");
    names__.emplace_back("y_mean_stacked");
    names__.emplace_back("y_chi_pred1");
    names__.emplace_back("y_chi_pred2");
    names__.emplace_back("y_chi_pred3");
    names__.emplace_back("y3_mean_pred1");
    names__.emplace_back("y4_mean_pred1");
    names__.emplace_back("y3_mean_pred2");
    names__.emplace_back("y4_mean_pred2");
    names__.emplace_back("y3_mean_pred3");
    names__.emplace_back("y4_mean_pred3");
    names__.emplace_back("chicounts_pred1");
    names__.emplace_back("Nfd_pred1");
    names__.emplace_back("chicounts_pred2");
    names__.emplace_back("Nfd_pred2");
    names__.emplace_back("chicounts_pred3");
    names__.emplace_back("Nfd_pred3");
    names__.emplace_back("donor_counts_pred1");
    names__.emplace_back("donor_counts_pred2");
    names__.emplace_back("donor_counts_pred3");
    names__.emplace_back("log_lik_chi_counts");
    names__.emplace_back("log_lik_Nfd");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(5)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_mean_stacked_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "lambda0");
    param_names__.emplace_back(std::string() + "r_lambda");
    param_names__.emplace_back(std::string() + "sigma_chi_counts");
    param_names__.emplace_back(std::string() + "sigma_Nfd");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_chi_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "lambda0");
    param_names__.emplace_back(std::string() + "r_lambda");
    param_names__.emplace_back(std::string() + "sigma_chi_counts");
    param_names__.emplace_back(std::string() + "sigma_Nfd");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_chi_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_chi_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 5 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_chi_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_chi_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 5 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_chi_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = MAP_asm_cd4_model_namespace::MAP_asm_cd4_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return MAP_asm_cd4_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, MAP_asm_cd4_model_namespace::math_reduce_functor__)
STAN_REGISTER_MAP_RECT(2, MAP_asm_cd4_model_namespace::math_reduce_functor__)