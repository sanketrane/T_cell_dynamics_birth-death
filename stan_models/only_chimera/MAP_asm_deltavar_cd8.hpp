
// Code generated by stanc a7f4b745
#include <stan/model/model_header.hpp>
namespace MAP_asm_deltavar_cd8_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 766> locations_array__ = 
{" (found before start of program)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 860, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 861, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 862, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 863, column 2 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 865, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 866, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 867, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 868, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 872, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 873, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 874, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 875, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 876, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 877, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 879, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 880, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 881, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 882, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 885, column 2 to column 80)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 888, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 889, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 890, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 891, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 887, column 21 to line 892, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 887, column 2 to line 892, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 913, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 914, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 915, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 917, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 917, column 32 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 917, column 62 to column 90)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 917, column 92 to column 120)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 918, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 918, column 32 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 918, column 62 to column 90)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 918, column 92 to column 120)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 919, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 919, column 32 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 919, column 62 to column 90)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 919, column 92 to column 120)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 921, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 921, column 34 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 921, column 59 to column 87)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 921, column 88 to column 115)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 922, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 922, column 34 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 922, column 59 to column 87)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 922, column 88 to column 115)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 923, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 923, column 34 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 923, column 59 to column 87)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 923, column 88 to column 115)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 925, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 925, column 35 to column 67)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 925, column 69 to column 101)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 926, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 926, column 36 to column 69)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 926, column 71 to column 104)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 928, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 928, column 31 to column 59)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 928, column 61 to column 89)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 929, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 929, column 32 to column 61)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 929, column 63 to column 92)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 931, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 932, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 933, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 934, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 937, column 2 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 938, column 2 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 939, column 2 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 941, column 2 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 942, column 2 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 943, column 2 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 945, column 2 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 946, column 2 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 947, column 2 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 949, column 2 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 950, column 2 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 951, column 2 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 953, column 2 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 954, column 2 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 955, column 2 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 959, column 4 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 960, column 4 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 961, column 4 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 963, column 4 to column 61)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 964, column 4 to column 61)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 965, column 4 to column 61)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 967, column 4 to column 63)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 968, column 4 to column 63)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 969, column 4 to column 63)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 971, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 972, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 973, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 975, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 976, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 977, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 979, column 4 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 980, column 4 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 981, column 4 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 983, column 4 to column 95)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 984, column 4 to column 95)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 985, column 4 to column 95)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 958, column 22 to line 986, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 958, column 2 to line 986, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 990, column 4 to column 96)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 991, column 4 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 992, column 4 to column 110)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 993, column 4 to column 112)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 989, column 22 to line 994, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 989, column 2 to line 994, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 896, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 897, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 898, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 899, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 901, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 902, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 903, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 904, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 906, column 2 to column 59)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 907, column 2 to column 75)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 908, column 2 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 909, column 2 to column 90)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 828, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 829, column 29 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 829, column 2 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 830, column 35 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 830, column 2 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 831, column 27 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 831, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 832, column 26 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 832, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 833, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 834, column 31 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 834, column 2 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 835, column 31 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 835, column 2 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 836, column 31 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 836, column 2 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 837, column 27 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 837, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 838, column 27 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 838, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 839, column 27 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 839, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 840, column 2 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 841, column 24 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 841, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 842, column 26 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 842, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 846, column 10 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 846, column 2 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 847, column 11 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 847, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 850, column 25 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 850, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 854, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 855, column 3 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 853, column 23 to line 856, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 853, column 2 to line 856, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 873, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 874, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 875, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 876, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 877, column 10 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 877, column 9 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 913, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 914, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 915, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 917, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 917, column 51 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 917, column 81 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 917, column 111 to column 118)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 918, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 918, column 51 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 918, column 81 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 918, column 111 to column 118)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 919, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 919, column 51 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 919, column 81 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 919, column 111 to column 118)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 921, column 23 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 921, column 49 to column 56)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 921, column 78 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 921, column 106 to column 113)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 922, column 23 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 922, column 49 to column 56)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 922, column 78 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 922, column 106 to column 113)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 923, column 23 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 923, column 49 to column 56)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 923, column 78 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 923, column 106 to column 113)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 925, column 25 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 925, column 58 to column 65)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 925, column 92 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 926, column 26 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 926, column 60 to column 67)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 926, column 95 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 928, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 928, column 50 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 928, column 80 to column 87)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 929, column 22 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 929, column 52 to column 59)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 929, column 83 to column 90)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 931, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 932, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 933, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 934, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 5, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 6, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 7, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 7, column 16 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 10, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 10, column 27 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 10, column 49 to column 62)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 10, column 65 to column 80)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 10, column 82 to column 96)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 12, column 4 to column 77)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 17, column 6 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 16, column 11 to line 18, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 15, column 6 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 14, column 17 to line 16, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 14, column 4 to line 18, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 19, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 4, column 29 to line 20, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 25, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 27, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 27, column 29 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 27, column 54 to column 75)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 28, column 4 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 29, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 35, column 6 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 34, column 11 to line 36, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 33, column 6 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 32, column 18 to line 34, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 32, column 4 to line 36, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 37, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 24, column 28 to line 38, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 42, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 43, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 44, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 50, column 6 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 49, column 11 to line 51, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 48, column 6 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 47, column 30 to line 49, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 47, column 4 to line 51, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 52, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 41, column 37 to line 53, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 57, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 58, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 59, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 59, column 15 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 61, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 62, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 63, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 56, column 44 to line 64, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 69, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 70, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 71, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 76, column 6 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 75, column 11 to line 77, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 74, column 6 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 73, column 17 to line 75, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 73, column 4 to line 77, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 78, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 66, column 30 to line 79, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 84, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 85, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 88, column 4 to column 64)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 89, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 83, column 43 to line 90, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 95, column 4 to column 64)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 93, column 42 to line 96, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 100, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 101, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 102, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 109, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 108, column 11 to line 110, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 107, column 6 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 106, column 40 to line 108, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 106, column 11 to line 110, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 105, column 6 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 104, column 29 to line 106, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 104, column 4 to line 110, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 111, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 99, column 54 to line 112, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 116, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 117, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 122, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 121, column 12 to line 123, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 120, column 6 to column 69)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 119, column 30 to line 121, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 119, column 4 to line 123, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 124, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 115, column 28 to line 125, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 129, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 130, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 131, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 133, column 4 to column 50)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 135, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 128, column 41 to line 136, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 140, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 141, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 142, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 139, column 38 to line 143, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 147, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 148, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 149, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 151, column 4 to column 106)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 152, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 146, column 59 to line 153, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 157, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 158, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 159, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 161, column 4 to column 106)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 162, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 156, column 58 to line 163, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 167, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 169, column 4 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 170, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 166, column 55 to line 171, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 176, column 5 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 177, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 174, column 57 to line 178, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 182, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 183, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 188, column 8 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 187, column 13 to line 189, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 186, column 6 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 185, column 26 to line 187, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 185, column 4 to line 189, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 191, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 181, column 55 to line 192, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 196, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 197, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 202, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 201, column 11 to line 203, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 200, column 6 to column 113)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 199, column 27 to line 201, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 199, column 4 to line 203, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 204, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 195, column 60 to line 205, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 209, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 210, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 215, column 7 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 214, column 12 to line 216, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 213, column 7 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 212, column 27 to line 214, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 212, column 5 to line 216, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 217, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 208, column 62 to line 218, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 222, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 223, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 228, column 7 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 227, column 12 to line 229, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 226, column 7 to column 83)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 225, column 27 to line 227, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 225, column 5 to line 229, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 230, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 221, column 63 to line 231, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 235, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 236, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 241, column 7 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 240, column 12 to line 242, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 239, column 7 to column 93)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 238, column 28 to line 240, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 238, column 5 to line 242, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 244, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 234, column 58 to line 245, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 249, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 250, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 255, column 7 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 254, column 12 to line 256, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 253, column 7 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 252, column 28 to line 254, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 252, column 5 to line 256, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 258, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 248, column 56 to line 259, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 263, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 264, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 269, column 7 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 268, column 12 to line 270, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 267, column 7 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 266, column 27 to line 268, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 266, column 5 to line 270, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 272, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 262, column 57 to line 273, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 276, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 277, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 279, column 4 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 281, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 275, column 82 to line 282, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 285, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 286, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 288, column 4 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 290, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 284, column 83 to line 291, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 294, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 295, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 297, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 299, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 293, column 81 to line 300, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 303, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 304, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 306, column 4 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 308, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 302, column 82 to line 309, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 312, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 313, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 314, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 317, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 318, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 311, column 40 to line 319, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 322, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 323, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 324, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 326, column 4 to column 104)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 327, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 321, column 41 to line 328, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 331, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 332, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 333, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 335, column 4 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 336, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 330, column 39 to line 337, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 340, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 341, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 342, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 344, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 345, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 339, column 40 to line 346, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 350, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 351, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 351, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 352, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 353, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 356, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 357, column 5 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 355, column 20 to line 358, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 355, column 3 to line 358, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 359, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 349, column 48 to line 360, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 364, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 365, column 17 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 365, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 366, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 367, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 370, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 371, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 372, column 6 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 369, column 21 to line 373, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 369, column 4 to line 373, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 374, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 363, column 62 to line 375, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 379, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 380, column 17 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 380, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 381, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 382, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 385, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 386, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 387, column 6 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 384, column 21 to line 388, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 384, column 4 to line 388, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 389, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 378, column 60 to line 390, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 394, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 395, column 17 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 395, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 396, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 397, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 400, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 401, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 402, column 6 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 399, column 21 to line 403, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 399, column 4 to line 403, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 404, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 393, column 61 to line 405, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 409, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 410, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 411, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 412, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 417, column 6 to column 147)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 416, column 11 to line 418, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 415, column 6 to column 152)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 414, column 40 to line 416, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 414, column 4 to line 418, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 419, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 408, column 64 to line 420, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 424, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 425, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 426, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 427, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 432, column 6 to column 148)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 431, column 11 to line 433, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 430, column 6 to column 159)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 429, column 32 to line 431, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 429, column 4 to line 433, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 434, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 423, column 65 to line 435, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 439, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 440, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 445, column 6 to column 50)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 444, column 11 to line 446, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 443, column 6 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 442, column 24 to line 444, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 442, column 4 to line 446, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 447, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 438, column 65 to line 448, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 452, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 453, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 454, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 455, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 460, column 6 to column 152)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 459, column 11 to line 461, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 458, column 6 to column 173)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 457, column 42 to line 459, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 457, column 4 to line 461, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 462, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 451, column 67 to line 463, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 467, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 468, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 469, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 470, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 475, column 6 to column 153)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 474, column 11 to line 476, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 473, column 6 to column 157)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 472, column 32 to line 474, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 472, column 4 to line 476, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 477, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 466, column 68 to line 478, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 482, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 483, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 484, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 485, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 490, column 6 to column 154)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 489, column 11 to line 491, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 488, column 6 to column 158)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 487, column 32 to line 489, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 487, column 4 to line 491, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 493, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 481, column 69 to line 494, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 498, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 499, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 500, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 501, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 506, column 6 to column 50)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 505, column 11 to line 507, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 504, column 6 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 503, column 24 to line 505, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 503, column 4 to line 507, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 508, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 497, column 76 to line 509, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 513, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 514, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 515, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 516, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 521, column 6 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 520, column 11 to line 522, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 519, column 6 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 518, column 26 to line 520, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 518, column 4 to line 522, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 523, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 512, column 77 to line 524, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 528, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 529, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 530, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 531, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 536, column 6 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 535, column 11 to line 537, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 534, column 6 to column 54)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 533, column 26 to line 535, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 533, column 4 to line 537, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 538, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 527, column 75 to line 539, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 543, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 544, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 545, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 546, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 551, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 550, column 11 to line 552, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 549, column 6 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 548, column 26 to line 550, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 548, column 4 to line 552, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 553, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 542, column 76 to line 554, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 558, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 559, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 561, column 4 to column 112)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 562, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 557, column 31 to line 563, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 567, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 568, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 570, column 4 to column 113)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 571, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 566, column 32 to line 572, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 576, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 577, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 579, column 4 to column 111)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 580, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 575, column 30 to line 581, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 585, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 586, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 588, column 4 to column 112)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 589, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 584, column 31 to line 590, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 594, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 595, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 596, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 597, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 599, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 593, column 42 to line 600, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 604, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 605, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 606, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 607, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 609, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 603, column 43 to line 610, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 614, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 615, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 616, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 617, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 619, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 613, column 41 to line 620, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 624, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 625, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 626, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 627, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 629, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 623, column 42 to line 630, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 634, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 635, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 637, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 633, column 77 to line 638, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 642, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 643, column 4 to column 42)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 645, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 641, column 78 to line 646, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 650, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 651, column 4 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 653, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 649, column 76 to line 654, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 658, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 659, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 661, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 657, column 77 to line 662, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 666, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 667, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 669, column 4 to column 108)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 670, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 665, column 30 to line 671, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 675, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 676, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 678, column 4 to column 109)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 679, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 674, column 31 to line 680, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 684, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 685, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 687, column 4 to column 107)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 688, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 683, column 29 to line 689, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 693, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 694, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 696, column 4 to column 108)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 697, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 692, column 30 to line 698, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 702, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 703, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 703, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 704, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 705, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 708, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 709, column 5 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 707, column 20 to line 710, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 707, column 3 to line 710, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 711, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 701, column 48 to line 712, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 716, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 717, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 717, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 718, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 719, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 722, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 723, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 724, column 5 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 721, column 20 to line 725, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 721, column 3 to line 725, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 726, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 715, column 62 to line 727, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 731, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 732, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 732, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 733, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 734, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 737, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 738, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 739, column 5 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 736, column 20 to line 740, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 736, column 3 to line 740, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 741, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 730, column 60 to line 742, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 746, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 747, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 747, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 748, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 749, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 752, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 753, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 754, column 5 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 751, column 20 to line 755, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 751, column 3 to line 755, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 756, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 745, column 61 to line 757, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 761, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 762, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 765, column 25 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 765, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 766, column 26 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 766, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 767, column 27 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 767, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 768, column 24 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 768, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 769, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 770, column 25 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 770, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 771, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 773, column 11 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 773, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 776, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 777, column 4 to column 101)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 778, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 779, column 4 to column 100)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 780, column 4 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 781, column 4 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 782, column 4 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 783, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 784, column 4 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 785, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 786, column 4 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 788, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 759, column 86 to line 789, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 793, column 5 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 795, column 5 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 797, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 792, column 28 to line 798, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 802, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 803, column 17 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 803, column 5 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 804, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 807, column 7 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 806, column 24 to line 808, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 806, column 5 to line 808, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 809, column 5 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 801, column 34 to line 810, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 813, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 815, column 5 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 816, column 5 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 812, column 29 to line 817, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 820, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 822, column 5 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 823, column 5 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_chimera/MAP_asm_deltavar_cd8.stan', line 819, column 28 to line 824, column 4)"};


template <typename T0__>
stan::promote_args_t<T0__>
sp_numbers(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 211;
    t0 = 1.0;
    local_scalar_t__ dpt0;
    dpt0 = DUMMY_VAR__;
    
    current_statement__ = 212;
    dpt0 = (time - t0);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ fit1;
    fit1 = DUMMY_VAR__;
    
    local_scalar_t__ theta0;
    theta0 = DUMMY_VAR__;
    
    current_statement__ = 215;
    theta0 = 9E4;
    local_scalar_t__ theta_f;
    theta_f = DUMMY_VAR__;
    
    current_statement__ = 216;
    theta_f = 68.0;
    local_scalar_t__ n;
    n = DUMMY_VAR__;
    
    current_statement__ = 217;
    n = 3.0;
    local_scalar_t__ X;
    X = DUMMY_VAR__;
    
    current_statement__ = 218;
    X = 25.0;
    local_scalar_t__ q;
    q = DUMMY_VAR__;
    
    current_statement__ = 219;
    q = 4.25;
    current_statement__ = 220;
    fit1 = (theta0 +
             ((theta_f * pow(dpt0, n)) *
               (1 - (pow(dpt0, q) / (pow(X, q) + pow(dpt0, q))))));
    current_statement__ = 225;
    if (logical_lt(time, t0)) {
      current_statement__ = 223;
      value = fit1;
    } else {
      current_statement__ = 221;
      value = fit1;
    }
    current_statement__ = 226;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sp_numbers_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return sp_numbers(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
eps_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ eps_0;
    eps_0 = DUMMY_VAR__;
    
    current_statement__ = 229;
    eps_0 = 0.24510453;
    local_scalar_t__ eps_f;
    eps_f = DUMMY_VAR__;
    
    current_statement__ = 230;
    eps_f = 0.01559996;
    local_scalar_t__ A;
    A = DUMMY_VAR__;
    
    current_statement__ = 231;
    A = 14.83715328;
    local_scalar_t__ eps5;
    eps5 = DUMMY_VAR__;
    
    current_statement__ = 232;
    eps5 = (stan::math::exp((-eps_f * (5 + A))) + eps_0);
    local_scalar_t__ fit;
    fit = DUMMY_VAR__;
    
    current_statement__ = 238;
    if (logical_lte(time, 5)) {
      current_statement__ = 236;
      fit = eps5;
    } else {
      current_statement__ = 234;
      fit = (stan::math::exp((-eps_f * (time + A))) + eps_0);
    }
    current_statement__ = 239;
    return fit;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eps_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return eps_spline(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
g_age(const T0__& age, const std::vector<T1__>& parms,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 241;
    t0 = 1.0;
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 242;
    N0 = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 248;
    if ((primitive_value(logical_gte(age, 0)) && primitive_value(
        logical_lte(age, t0)))) {
      current_statement__ = 246;
      value = (N0 / t0);
    } else {
      current_statement__ = 244;
      value = 0;
    }
    current_statement__ = 249;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return g_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_spline(const T0__& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 251;
    N0 = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 252;
    t0 = 1.0;
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 255;
    psi = (g_age(0.0, parms, pstream__) / sp_numbers(t0, pstream__));
    current_statement__ = 256;
    value = (psi * sp_numbers(time, pstream__));
    current_statement__ = 257;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_spline_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_spline(time, parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
Chi_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ chi;
    chi = DUMMY_VAR__;
    
    local_scalar_t__ chiEst;
    chiEst = DUMMY_VAR__;
    
    current_statement__ = 260;
    chiEst = 0.85793486;
    local_scalar_t__ qEst;
    qEst = DUMMY_VAR__;
    
    current_statement__ = 261;
    qEst = 0.04299229;
    current_statement__ = 266;
    if (logical_lt(time, 0)) {
      current_statement__ = 264;
      chi = 0;
    } else {
      current_statement__ = 262;
      chi = (chiEst * (1 - stan::math::exp((-qEst * time))));
    }
    current_statement__ = 267;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Chi_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return Chi_spline(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_donor(const T0__& time, const std::vector<T1__>& parms,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 270;
    tBMT = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 271;
    value = (theta_spline(time, parms, pstream__) *
              Chi_spline((time - tBMT), pstream__));
    current_statement__ = 272;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_donor_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_donor(time, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_host(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 274;
    return (theta_spline(time, parms, pstream__) -
             theta_donor(time, parms, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_host_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_host(time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
ki_dist_theta(const T0__& ki, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 276;
    k_bar = (1 / stan::math::exp(1.0));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 278;
    t0 = 1.0;
    current_statement__ = 286;
    if ((primitive_value(logical_gte(ki, 0)) && primitive_value(
        logical_lt(ki, k_bar)))) {
      current_statement__ = 284;
      value = ((1 - eps_spline(time, pstream__)) / k_bar);
    } else {
      current_statement__ = 283;
      if ((primitive_value(logical_gte(ki, k_bar)) && primitive_value(
          logical_lte(ki, 1.0)))) {
        current_statement__ = 281;
        value = (eps_spline(time, pstream__) / (1 - k_bar));
      } else {
        current_statement__ = 279;
        value = 0.0;
      }
    }
    current_statement__ = 287;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ki_dist_theta_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& ki, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return ki_dist_theta(ki, time, parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
ki_dist_init(const T0__& ki, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ r_ki_init;
    r_ki_init = DUMMY_VAR__;
    
    current_statement__ = 290;
    r_ki_init = 1;
    current_statement__ = 295;
    if ((primitive_value(logical_gte(ki, 0.0)) && primitive_value(
        logical_lte(ki, 1.0)))) {
      current_statement__ = 293;
      value = (stan::math::exp((-ki * r_ki_init)) /
                ((1 - stan::math::exp(-r_ki_init)) / r_ki_init));
    } else {
      current_statement__ = 291;
      value = 0.0;
    }
    current_statement__ = 296;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ki_dist_init_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& ki, std::ostream* pstream__)  const 
{
return ki_dist_init(ki, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
lambda_age(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ delta;
    delta = DUMMY_VAR__;
    
    current_statement__ = 298;
    delta = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ rho0;
    rho0 = DUMMY_VAR__;
    
    current_statement__ = 299;
    rho0 = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ r_rho;
    r_rho = DUMMY_VAR__;
    
    current_statement__ = 300;
    r_rho = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 301;
    value = (delta - (rho0 * stan::math::exp((r_rho * age))));
    current_statement__ = 302;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct lambda_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return lambda_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
rho_age(const T0__& age, const std::vector<T1__>& parms,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 304;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 305;
    value = rho;
    current_statement__ = 306;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rho_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return rho_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
lambda_integ(const T0__& lo_lim, const T1__& up_lim,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ del0;
    del0 = DUMMY_VAR__;
    
    current_statement__ = 308;
    del0 = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 309;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ r_del;
    r_del = DUMMY_VAR__;
    
    current_statement__ = 310;
    r_del = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 311;
    value = (((del0 / r_del) *
               (stan::math::exp((-r_del * lo_lim)) -
                 stan::math::exp((-r_del * up_lim)))) -
              (rho * (up_lim - lo_lim)));
    current_statement__ = 312;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct lambda_integ_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& lo_lim, const T1__& up_lim,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return lambda_integ(lo_lim, up_lim, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
alpha_integ(const T0__& lo_lim, const T1__& up_lim,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ del0;
    del0 = DUMMY_VAR__;
    
    current_statement__ = 314;
    del0 = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 315;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ r_del;
    r_del = DUMMY_VAR__;
    
    current_statement__ = 316;
    r_del = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 317;
    value = (((del0 / r_del) *
               (stan::math::exp((-r_del * lo_lim)) -
                 stan::math::exp((-r_del * up_lim)))) +
              (rho * (up_lim - lo_lim)));
    current_statement__ = 318;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct alpha_integ_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& lo_lim, const T1__& up_lim,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return alpha_integ(lo_lim, up_lim, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_init_age(const T0__& age, const T1__& time,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 320;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 321;
    value = (g_age(t0, parms, pstream__) *
              stan::math::exp(
                -lambda_integ(((age - time) + t0), age, parms, pstream__)));
    current_statement__ = 322;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_init_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_init_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_theta_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 324;
    value = (theta_spline((time - age), parms, pstream__) *
              stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    current_statement__ = 325;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_total_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 328;
    t0 = 1.0;
    current_statement__ = 333;
    if (logical_lt(age, (time - t0))) {
      current_statement__ = 331;
      value = (theta_spline((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 329;
      value = (g_age(t0, parms, pstream__) *
                stan::math::exp(
                  -lambda_integ(((age - time) + t0), age, parms, pstream__)));
    }
    current_statement__ = 334;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_total_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_total_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_Host_init_age(const T0__& age, const T1__& time,
                  const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 336;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 342;
    if (logical_gte(age, (time - tBMT))) {
      current_statement__ = 340;
      value = (Asm_total_age(((age - time) + tBMT), tBMT, parms, pstream__) *
                stan::math::exp(
                  -lambda_integ(((age - time) + tBMT), age, parms, pstream__)));
    } else {
      current_statement__ = 338;
      value = 0.0;
    }
    current_statement__ = 343;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_Host_init_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_Host_init_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_Host_theta_age(const T0__& age, const T1__& time,
                   const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 345;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 351;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 349;
      value = (theta_host((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 347;
      value = 0.0;
    }
    current_statement__ = 352;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_Host_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_Host_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_Donor_theta_age(const T0__& age, const T1__& time,
                    const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 354;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 360;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 358;
      value = (theta_donor((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 356;
      value = 0.0;
    }
    current_statement__ = 361;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_Donor_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_Donor_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_pooled_age(const T0__& age, const T1__& time,
               const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 363;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 369;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 367;
      value = (Asm_Host_theta_age(age, time, parms, pstream__) +
                Asm_Donor_theta_age(age, time, parms, pstream__));
    } else {
      current_statement__ = 365;
      value = Asm_Host_init_age(age, time, parms, pstream__);
    }
    current_statement__ = 370;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_pooled_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_pooled_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_host_age(const T0__& age, const T1__& time,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 372;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 378;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 376;
      value = Asm_Host_theta_age(age, time, parms, pstream__);
    } else {
      current_statement__ = 374;
      value = Asm_Host_init_age(age, time, parms, pstream__);
    }
    current_statement__ = 379;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_host_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_host_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_donor_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 381;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 387;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 385;
      value = Asm_Donor_theta_age(age, time, parms, pstream__);
    } else {
      current_statement__ = 383;
      value = 0.0;
    }
    current_statement__ = 388;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_donor_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_donor_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_total_ode(const T0__& age, const std::vector<T1__>& y,
              const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
              const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 391;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 392;
    value = Asm_total_age(age, time, parms, pstream__);
    current_statement__ = 393;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_total_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_total_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_pooled_ode(const T0__& age, const std::vector<T1__>& y,
               const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
               const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 396;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 397;
    value = Asm_pooled_age(age, time, parms, pstream__);
    current_statement__ = 398;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_pooled_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_pooled_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_host_ode(const T0__& age, const std::vector<T1__>& y,
             const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 401;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 402;
    value = Asm_host_age(age, time, parms, pstream__);
    current_statement__ = 403;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_host_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_host_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_donor_ode(const T0__& age, const std::vector<T1__>& y,
              const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
              const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 406;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 407;
    value = Asm_donor_age(age, time, parms, pstream__);
    current_statement__ = 408;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_donor_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_donor_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_total_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 412;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 413;
    value = rvalue(
              integrate_ode_rk45(Asm_total_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_total_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(time, 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 414;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_total_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_total_counts(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_pooled_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 418;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 419;
    value = rvalue(
              integrate_ode_rk45(Asm_pooled_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_pooled_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(time, 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 420;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_pooled_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_pooled_counts(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_host_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 424;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 425;
    value = rvalue(
              integrate_ode_rk45(Asm_host_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_host_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 426;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_host_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_host_counts(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_donor_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 430;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 431;
    value = rvalue(
              integrate_ode_rk45(Asm_donor_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_donor_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(time, 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 432;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_donor_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_donor_counts(parms, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
N_total_time(const std::vector<T0__>& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 434;
    ndim = size(time);
    current_statement__ = 435;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    current_statement__ = 438;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 442;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 439;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 440;
      assign(y_solve, solve_total_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 443;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_total_time_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return N_total_time(time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
N_pooled_time(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 445;
    ndim = size(time);
    current_statement__ = 446;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 449;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 454;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 450;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 451;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 452;
      assign(y_solve, solve_pooled_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 455;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_pooled_time_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return N_pooled_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
N_host_time(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 457;
    ndim = size(time);
    current_statement__ = 458;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 461;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 466;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 462;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 463;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 464;
      assign(y_solve, solve_host_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 467;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_host_time_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return N_host_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
N_donor_time(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 469;
    ndim = size(time);
    current_statement__ = 470;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 473;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 478;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 474;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 475;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 476;
      assign(y_solve, solve_donor_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 479;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_donor_time_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return N_donor_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
U_init_ki_age(const T0__& ki, const T1__& age, const T2__& time,
              const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 481;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 482;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 483;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 489;
    if (logical_lte(ki, stan::math::exp((-beta * (time - t0))))) {
      current_statement__ = 487;
      value = (((g_age(t0, parms, pstream__) *
                  ki_dist_init(
                    (ki * stan::math::exp((beta * (time - t0)))), pstream__))
                 * stan::math::exp((beta * (time - t0)))) *
                stan::math::exp(
                  -alpha_integ(((age - time) + t0), age, parms, pstream__)));
    } else {
      current_statement__ = 485;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_init_age((age - tau), (time - tau), parms, pstream__))
                 * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 490;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_init_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return U_init_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
U_theta_ki_age(const T0__& ki, const T1__& age, const T2__& time,
               const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 492;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 493;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 494;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 500;
    if (logical_lte(ki, stan::math::exp((-beta * age)))) {
      current_statement__ = 498;
      value = (((theta_spline((time - age), parms, pstream__) *
                  ki_dist_theta((ki * stan::math::exp((beta * age))),
                    (time - age), parms, pstream__)) *
                 stan::math::exp((beta * age))) *
                stan::math::exp(-alpha_integ(0.0, age, parms, pstream__)));
    } else {
      current_statement__ = 496;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_theta_age((age - tau), (time - tau), parms, pstream__))
                 * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 501;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_theta_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return U_theta_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
U_total_ki_age(const T0__& ki, const T1__& age, const T2__& time,
               const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 503;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 509;
    if (logical_lt(age, (time - t0))) {
      current_statement__ = 507;
      value = U_theta_ki_age(ki, age, time, parms, pstream__);
    } else {
      current_statement__ = 505;
      value = U_init_ki_age(ki, age, time, parms, pstream__);
    }
    current_statement__ = 510;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return U_total_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
host_init_ki_age(const T0__& ki, const T1__& age, const T2__& time,
                 const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 512;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 514;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 515;
    tau = (-stan::math::log(ki) / beta);
    current_statement__ = 520;
    if (logical_lte(ki, stan::math::exp((-beta * (time - tBMT))))) {
      current_statement__ = 518;
      value = ((U_total_ki_age(
                  (ki * stan::math::exp((beta * (time - tBMT)))),
                  ((age - time) + tBMT), time, parms, pstream__) *
                 stan::math::exp((beta * (time - tBMT)))) *
                stan::math::exp(
                  -alpha_integ(((age - time) + tBMT), age, parms, pstream__)));
    } else {
      current_statement__ = 516;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_Host_init_age((age - tau), (time - tau),
                    parms, pstream__)) * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 521;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct host_init_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return host_init_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
host_theta_ki_age(const T0__& ki, const T1__& age, const T2__& time,
                  const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 523;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 524;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 525;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 531;
    if (logical_lte(ki, stan::math::exp((-beta * age)))) {
      current_statement__ = 529;
      value = (((theta_host((time - age), parms, pstream__) *
                  ki_dist_theta((ki * stan::math::exp((beta * age))),
                    (time - age), parms, pstream__)) *
                 stan::math::exp((beta * age))) *
                stan::math::exp(-alpha_integ(0.0, age, parms, pstream__)));
    } else {
      current_statement__ = 527;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_Host_theta_age((age - tau), (time - tau),
                    parms, pstream__)) * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 532;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct host_theta_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return host_theta_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
donor_theta_ki_age(const T0__& ki, const T1__& age, const T2__& time,
                   const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 534;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 535;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 536;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 542;
    if (logical_lte(ki, stan::math::exp((-beta * age)))) {
      current_statement__ = 540;
      value = (((theta_donor((time - age), parms, pstream__) *
                  ki_dist_theta((ki * stan::math::exp((beta * age))),
                    (time - age), parms, pstream__)) *
                 stan::math::exp((beta * age))) *
                stan::math::exp(-alpha_integ(0.0, age, parms, pstream__)));
    } else {
      current_statement__ = 538;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_Donor_theta_age((age - tau), (time - tau),
                    parms, pstream__)) * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 543;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct donor_theta_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return donor_theta_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_total_kat(const T0__& ki, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 545;
    time = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ age;
    age = DUMMY_VAR__;
    
    current_statement__ = 546;
    age = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 547;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 553;
    if (logical_lt(age, (time - t0))) {
      current_statement__ = 551;
      value = U_theta_ki_age(ki, age, time, parms, pstream__);
    } else {
      current_statement__ = 549;
      value = U_init_ki_age(ki, age, time, parms, pstream__);
    }
    current_statement__ = 554;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_kat_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_total_kat(ki, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_Pooled_kat(const T0__& ki, const std::vector<T1__>& y,
             const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 556;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ age;
    age = DUMMY_VAR__;
    
    current_statement__ = 557;
    age = rvalue(parms, "parms", index_uni(7));
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 558;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 564;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 562;
      value = (donor_theta_ki_age(ki, age, time, parms, pstream__) +
                host_theta_ki_age(ki, age, time, parms, pstream__));
    } else {
      current_statement__ = 560;
      value = host_init_ki_age(ki, age, time, parms, pstream__);
    }
    current_statement__ = 565;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_kat_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_Pooled_kat(ki, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_host_kat(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 567;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ age;
    age = DUMMY_VAR__;
    
    current_statement__ = 568;
    age = rvalue(parms, "parms", index_uni(7));
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 569;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 575;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 573;
      value = host_theta_ki_age(ki, age, time, parms, pstream__);
    } else {
      current_statement__ = 571;
      value = host_init_ki_age(ki, age, time, parms, pstream__);
    }
    current_statement__ = 576;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_kat_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_host_kat(ki, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_donor_kat(const T0__& ki, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 578;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ age;
    age = DUMMY_VAR__;
    
    current_statement__ = 579;
    age = rvalue(parms, "parms", index_uni(7));
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 580;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 586;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 584;
      value = donor_theta_ki_age(ki, age, time, parms, pstream__);
    } else {
      current_statement__ = 582;
      value = 0.0;
    }
    current_statement__ = 587;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_kat_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_donor_kat(ki, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_total_at(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 590;
    k_bar = (1 / stan::math::exp(1));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 591;
    y_solve = rvalue(
                integrate_ode_rk45(U_total_kat_functor__(), std::vector<double>{0.0},
  (1 / stan::math::exp(1)), rep_array(1.0, 1), parms, std::vector<double>{
  0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_total_kat, FnMakeArray__(0.0), (1 / exp(1)),\n                   rep_array(1.0, 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 592;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_at_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_total_at(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_Pooled_at(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 595;
    k_bar = (1 / stan::math::exp(1));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 596;
    y_solve = rvalue(
                integrate_ode_rk45(U_Pooled_kat_functor__(), std::vector<double>{0.0},
  (1 / stan::math::exp(1)), rep_array(1.0, 1), parms, std::vector<double>{
  0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_Pooled_kat, FnMakeArray__(0.0), (1 / exp(1)),\n                   rep_array(1.0, 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 597;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_at_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_Pooled_at(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_host_at(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 600;
    k_bar = (1 / stan::math::exp(1));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 601;
    y_solve = rvalue(
                integrate_ode_rk45(U_host_kat_functor__(), std::vector<double>{0.0},
  (1 / stan::math::exp(1)), rep_array(1.0, 1), parms, std::vector<double>{
  0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_host_kat, FnMakeArray__(0.0), (1 / exp(1)),\n                   rep_array(1.0, 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 602;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_at_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_host_at(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_donor_at(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 605;
    k_bar = (1 / stan::math::exp(1));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 606;
    y_solve = rvalue(
                integrate_ode_rk45(U_donor_kat_functor__(), std::vector<double>{0.0},
  (1 / stan::math::exp(1)), rep_array(1.0, 1), parms, std::vector<double>{
  0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_donor_kat, FnMakeArray__(0.0), (1 / exp(1)),\n                   rep_array(1.0, 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 607;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_at_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_donor_at(parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
U_total_age(const T0__& age, const std::vector<T1__>& parms,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 611;
    assign(params, rvalue(parms, "parms", index_min_max(1, 5)),
      "assigning variable params", index_min_max(1, 5));
    current_statement__ = 612;
    assign(params, age, "assigning variable params", index_uni(6));
    current_statement__ = 613;
    return U_total_at(params, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_total_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
U_Pooled_age(const T0__& age, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(7, DUMMY_VAR__);
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 617;
    assign(params, rvalue(parms, "parms", index_min_max(1, 6)),
      "assigning variable params", index_min_max(1, 6));
    current_statement__ = 618;
    assign(params, age, "assigning variable params", index_uni(7));
    current_statement__ = 619;
    return U_Pooled_at(params, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_Pooled_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
U_host_age(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(7, DUMMY_VAR__);
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 623;
    assign(params, rvalue(parms, "parms", index_min_max(1, 6)),
      "assigning variable params", index_min_max(1, 6));
    current_statement__ = 624;
    assign(params, age, "assigning variable params", index_uni(7));
    current_statement__ = 625;
    return U_host_at(params, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_host_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
U_donor_age(const T0__& age, const std::vector<T1__>& parms,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(7, DUMMY_VAR__);
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 629;
    assign(params, rvalue(parms, "parms", index_min_max(1, 6)),
      "assigning variable params", index_min_max(1, 6));
    current_statement__ = 630;
    assign(params, age, "assigning variable params", index_uni(7));
    current_statement__ = 631;
    return U_donor_at(params, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_donor_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_total_ode(const T0__& age, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 633;
    time = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 634;
    value = U_total_age(age, parms, pstream__);
    current_statement__ = 635;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_total_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_Pooled_ode(const T0__& age, const std::vector<T1__>& y,
             const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 637;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 638;
    value = U_Pooled_age(age, parms, pstream__);
    current_statement__ = 639;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_Pooled_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_host_ode(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 641;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 642;
    value = U_host_age(age, parms, pstream__);
    current_statement__ = 643;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_host_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_donor_ode(const T0__& age, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 645;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 646;
    value = U_donor_age(age, parms, pstream__);
    current_statement__ = 647;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_donor_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_total_t(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 650;
    time = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 651;
    y_solve = rvalue(
                integrate_ode_rk45(U_total_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_total_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 652;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_t_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_total_t(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_Pooled_t(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 655;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 656;
    y_solve = rvalue(
                integrate_ode_rk45(U_Pooled_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_Pooled_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 657;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_t_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_Pooled_t(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_host_t(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 660;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 661;
    y_solve = rvalue(
                integrate_ode_rk45(U_host_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_host_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 662;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_t_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_host_t(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_donor_t(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 665;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 666;
    y_solve = rvalue(
                integrate_ode_rk45(U_donor_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_donor_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 667;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_t_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_donor_t(parms, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
U_total_time(const std::vector<T0__>& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 669;
    ndim = size(time);
    current_statement__ = 670;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    current_statement__ = 673;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 677;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 674;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 675;
      assign(y_solve, U_total_t(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 678;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_time_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_total_time(time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
U_Pooled_time(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 680;
    ndim = size(time);
    current_statement__ = 681;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 684;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 689;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 685;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 686;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 687;
      assign(y_solve, U_Pooled_t(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 690;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_time_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return U_Pooled_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
U_host_time(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 692;
    ndim = size(time);
    current_statement__ = 693;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 696;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 701;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 697;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 698;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 699;
      assign(y_solve, U_host_t(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 702;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_time_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return U_host_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
U_donor_time(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 704;
    ndim = size(time);
    current_statement__ = 705;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 708;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 713;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 709;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 710;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 711;
      assign(y_solve, U_donor_t(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 714;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_time_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return U_donor_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
math_reduce(const T0__& global_params_arg__, const T1__& local_params_arg__,
            const std::vector<T2__>& x_r, const std::vector<int>& x_i,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& global_params = to_ref(global_params_arg__);
  const auto& local_params = to_ref(local_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 716;
    n = size(x_i);
    int dat_t0;
    dat_t0 = std::numeric_limits<int>::min();
    
    current_statement__ = 717;
    dat_t0 = rvalue(x_i, "x_i", index_uni(1));
    current_statement__ = 718;
    validate_non_negative_index("chi_counts_mean", "n", n);
    std::vector<local_scalar_t__> chi_counts_mean;
    chi_counts_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 720;
    validate_non_negative_index("host_counts_mean", "n", n);
    std::vector<local_scalar_t__> host_counts_mean;
    host_counts_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 722;
    validate_non_negative_index("donor_counts_mean", "n", n);
    std::vector<local_scalar_t__> donor_counts_mean;
    donor_counts_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 724;
    validate_non_negative_index("host_ki_counts", "n", n);
    std::vector<local_scalar_t__> host_ki_counts;
    host_ki_counts = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    local_scalar_t__ host_ki_mean;
    host_ki_mean = DUMMY_VAR__;
    
    current_statement__ = 727;
    validate_non_negative_index("donor_ki_counts", "n", n);
    std::vector<local_scalar_t__> donor_ki_counts;
    donor_ki_counts = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    local_scalar_t__ donor_ki_mean;
    donor_ki_mean = DUMMY_VAR__;
    
    current_statement__ = 730;
    validate_non_negative_index("y_mean_stacked", "4 * n", (4 * n));
    Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
    y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>((4 * n));
    stan::math::fill(y_mean_stacked, DUMMY_VAR__);
    
    current_statement__ = 732;
    assign(chi_counts_mean,
      N_pooled_time(x_r, to_array_1d(divide(to_vector(x_i), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable chi_counts_mean");
    current_statement__ = 733;
    assign(host_counts_mean,
      N_host_time(x_r, to_array_1d(divide(to_vector(x_i), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable host_counts_mean");
    current_statement__ = 734;
    assign(donor_counts_mean,
      N_donor_time(x_r, to_array_1d(divide(to_vector(x_i), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable donor_counts_mean");
    current_statement__ = 735;
    assign(host_ki_counts,
      U_host_time(x_r, to_array_1d(divide(to_vector(x_i), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable host_ki_counts");
    current_statement__ = 736;
    host_ki_mean = (rvalue(host_ki_counts, "host_ki_counts", index_uni(1)) /
                     rvalue(host_counts_mean, "host_counts_mean",
                       index_uni(1)));
    current_statement__ = 737;
    assign(donor_ki_counts,
      U_donor_time(x_r, to_array_1d(divide(to_vector(x_i), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable donor_ki_counts");
    current_statement__ = 738;
    donor_ki_mean = (rvalue(donor_ki_counts, "donor_ki_counts", index_uni(1))
                      /
                      rvalue(donor_counts_mean, "donor_counts_mean",
                        index_uni(1)));
    current_statement__ = 739;
    assign(y_mean_stacked,
      rvalue(chi_counts_mean, "chi_counts_mean", index_uni(1)),
      "assigning variable y_mean_stacked", index_uni(1));
    current_statement__ = 740;
    assign(y_mean_stacked,
      (rvalue(donor_counts_mean, "donor_counts_mean", index_uni(1)) /
        (rvalue(chi_counts_mean, "chi_counts_mean", index_uni(1)) *
          Chi_spline(
            (rvalue(x_r, "x_r", index_uni(1)) -
              (rvalue(x_i, "x_i", index_uni(1)) / 1.0)), pstream__))),
      "assigning variable y_mean_stacked", index_uni(2));
    current_statement__ = 741;
    assign(y_mean_stacked, host_ki_mean,
      "assigning variable y_mean_stacked", index_uni(3));
    current_statement__ = 742;
    assign(y_mean_stacked, donor_ki_mean,
      "assigning variable y_mean_stacked", index_uni(4));
    current_statement__ = 743;
    return y_mean_stacked;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct math_reduce_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& global_params, const T1__& local_params,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return math_reduce(global_params, local_params, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
logit_inverse(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ ans;
    ans = DUMMY_VAR__;
    
    current_statement__ = 746;
    ans = (stan::math::exp(x) / (1 + stan::math::exp(x)));
    current_statement__ = 747;
    return ans;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logit_inverse_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return logit_inverse(x, pstream__);
}
};

template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
asinsqrt_array(const std::vector<T0__>& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndims;
    ndims = std::numeric_limits<int>::min();
    
    current_statement__ = 749;
    ndims = size(x);
    current_statement__ = 750;
    validate_non_negative_index("answer", "ndims", ndims);
    std::vector<local_scalar_t__> answer;
    answer = std::vector<local_scalar_t__>(ndims, DUMMY_VAR__);
    
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 752;
    a = 1.2;
    current_statement__ = 755;
    for (int i = 1; i <= ndims; ++i) {
      current_statement__ = 753;
      assign(answer,
        stan::math::asin(
          (stan::math::sqrt(rvalue(x, "x", index_uni(i))) /
            stan::math::sqrt(a))), "assigning variable answer", index_uni(i));
    }
    current_statement__ = 756;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_array_functor__ {
template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
operator()(const std::vector<T0__>& x, std::ostream* pstream__)  const 
{
return asinsqrt_array(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_real(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 758;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 759;
    answer = stan::math::asin((stan::math::sqrt(x) / stan::math::sqrt(a)));
    current_statement__ = 760;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_real_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_real(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_inv(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 762;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 763;
    answer = (a * pow(stan::math::sin(x), 2));
    current_statement__ = 764;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_inv_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_inv(x, pstream__);
}
};

class MAP_asm_deltavar_cd8_model final : public model_base_crtp<MAP_asm_deltavar_cd8_model> {

 private:
  int numChi;
  std::vector<double> chi_counts;
  std::vector<double> N_donor_fraction;
  std::vector<double> donor_ki;
  std::vector<double> host_ki;
  int numPred;
  std::vector<double> ts_pred_chi1;
  std::vector<double> ts_pred_chi2;
  std::vector<double> ts_pred_chi3;
  std::vector<double> tb_pred1;
  std::vector<double> tb_pred2;
  std::vector<double> tb_pred3;
  int n_shards;
  std::vector<int> dat_t0;
  std::vector<int> dat_time;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<double>> x_r;
  std::vector<Eigen::Matrix<double, -1, 1>> local_params;
  int y_mean_stacked_1dim__;
 
 public:
  ~MAP_asm_deltavar_cd8_model() { }
  
  inline std::string model_name() const final { return "MAP_asm_deltavar_cd8_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 a7f4b745", "stancflags = "};
  }
  
  
  MAP_asm_deltavar_cd8_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_deltavar_cd8_model_namespace::MAP_asm_deltavar_cd8_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 125;
      context__.validate_dims("data initialization","numChi","int",
          context__.to_vec());
      numChi = std::numeric_limits<int>::min();
      
      current_statement__ = 125;
      numChi = context__.vals_i("numChi")[(1 - 1)];
      current_statement__ = 125;
      current_statement__ = 125;
      check_greater_or_equal(function__, "numChi", numChi, 1);
      current_statement__ = 126;
      validate_non_negative_index("chi_counts", "numChi", numChi);
      current_statement__ = 127;
      context__.validate_dims("data initialization","chi_counts","double",
          context__.to_vec(numChi));
      chi_counts = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 127;
      assign(chi_counts, context__.vals_r("chi_counts"),
        "assigning variable chi_counts");
      current_statement__ = 127;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 127;
        current_statement__ = 127;
        check_greater_or_equal(function__, "chi_counts[sym1__]",
                               chi_counts[(sym1__ - 1)], 0);}
      current_statement__ = 128;
      validate_non_negative_index("N_donor_fraction", "numChi", numChi);
      current_statement__ = 129;
      context__.validate_dims("data initialization","N_donor_fraction",
          "double",context__.to_vec(numChi));
      N_donor_fraction = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 129;
      assign(N_donor_fraction, context__.vals_r("N_donor_fraction"),
        "assigning variable N_donor_fraction");
      current_statement__ = 129;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 129;
        current_statement__ = 129;
        check_greater_or_equal(function__, "N_donor_fraction[sym1__]",
                               N_donor_fraction[(sym1__ - 1)], 0);}
      current_statement__ = 130;
      validate_non_negative_index("donor_ki", "numChi", numChi);
      current_statement__ = 131;
      context__.validate_dims("data initialization","donor_ki","double",
          context__.to_vec(numChi));
      donor_ki = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 131;
      assign(donor_ki, context__.vals_r("donor_ki"),
        "assigning variable donor_ki");
      current_statement__ = 131;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 131;
        current_statement__ = 131;
        check_greater_or_equal(function__, "donor_ki[sym1__]",
                               donor_ki[(sym1__ - 1)], 0);}
      current_statement__ = 132;
      validate_non_negative_index("host_ki", "numChi", numChi);
      current_statement__ = 133;
      context__.validate_dims("data initialization","host_ki","double",
          context__.to_vec(numChi));
      host_ki = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 133;
      assign(host_ki, context__.vals_r("host_ki"),
        "assigning variable host_ki");
      current_statement__ = 133;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 133;
        current_statement__ = 133;
        check_greater_or_equal(function__, "host_ki[sym1__]",
                               host_ki[(sym1__ - 1)], 0);}
      current_statement__ = 134;
      context__.validate_dims("data initialization","numPred","int",
          context__.to_vec());
      numPred = std::numeric_limits<int>::min();
      
      current_statement__ = 134;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 134;
      current_statement__ = 134;
      check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 135;
      validate_non_negative_index("ts_pred_chi1", "numPred", numPred);
      current_statement__ = 136;
      context__.validate_dims("data initialization","ts_pred_chi1","double",
          context__.to_vec(numPred));
      ts_pred_chi1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 136;
      assign(ts_pred_chi1, context__.vals_r("ts_pred_chi1"),
        "assigning variable ts_pred_chi1");
      current_statement__ = 136;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 136;
        current_statement__ = 136;
        check_greater_or_equal(function__, "ts_pred_chi1[sym1__]",
                               ts_pred_chi1[(sym1__ - 1)], 0);}
      current_statement__ = 137;
      validate_non_negative_index("ts_pred_chi2", "numPred", numPred);
      current_statement__ = 138;
      context__.validate_dims("data initialization","ts_pred_chi2","double",
          context__.to_vec(numPred));
      ts_pred_chi2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 138;
      assign(ts_pred_chi2, context__.vals_r("ts_pred_chi2"),
        "assigning variable ts_pred_chi2");
      current_statement__ = 138;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 138;
        current_statement__ = 138;
        check_greater_or_equal(function__, "ts_pred_chi2[sym1__]",
                               ts_pred_chi2[(sym1__ - 1)], 0);}
      current_statement__ = 139;
      validate_non_negative_index("ts_pred_chi3", "numPred", numPred);
      current_statement__ = 140;
      context__.validate_dims("data initialization","ts_pred_chi3","double",
          context__.to_vec(numPred));
      ts_pred_chi3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 140;
      assign(ts_pred_chi3, context__.vals_r("ts_pred_chi3"),
        "assigning variable ts_pred_chi3");
      current_statement__ = 140;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 140;
        current_statement__ = 140;
        check_greater_or_equal(function__, "ts_pred_chi3[sym1__]",
                               ts_pred_chi3[(sym1__ - 1)], 0);}
      current_statement__ = 141;
      validate_non_negative_index("tb_pred1", "numPred", numPred);
      current_statement__ = 142;
      context__.validate_dims("data initialization","tb_pred1","double",
          context__.to_vec(numPred));
      tb_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 142;
      assign(tb_pred1, context__.vals_r("tb_pred1"),
        "assigning variable tb_pred1");
      current_statement__ = 142;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 142;
        current_statement__ = 142;
        check_greater_or_equal(function__, "tb_pred1[sym1__]",
                               tb_pred1[(sym1__ - 1)], 0);}
      current_statement__ = 143;
      validate_non_negative_index("tb_pred2", "numPred", numPred);
      current_statement__ = 144;
      context__.validate_dims("data initialization","tb_pred2","double",
          context__.to_vec(numPred));
      tb_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 144;
      assign(tb_pred2, context__.vals_r("tb_pred2"),
        "assigning variable tb_pred2");
      current_statement__ = 144;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 144;
        current_statement__ = 144;
        check_greater_or_equal(function__, "tb_pred2[sym1__]",
                               tb_pred2[(sym1__ - 1)], 0);}
      current_statement__ = 145;
      validate_non_negative_index("tb_pred3", "numPred", numPred);
      current_statement__ = 146;
      context__.validate_dims("data initialization","tb_pred3","double",
          context__.to_vec(numPred));
      tb_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 146;
      assign(tb_pred3, context__.vals_r("tb_pred3"),
        "assigning variable tb_pred3");
      current_statement__ = 146;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 146;
        current_statement__ = 146;
        check_greater_or_equal(function__, "tb_pred3[sym1__]",
                               tb_pred3[(sym1__ - 1)], 0);}
      current_statement__ = 147;
      context__.validate_dims("data initialization","n_shards","int",
          context__.to_vec());
      n_shards = std::numeric_limits<int>::min();
      
      current_statement__ = 147;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 148;
      validate_non_negative_index("dat_t0", "n_shards", n_shards);
      current_statement__ = 149;
      context__.validate_dims("data initialization","dat_t0","int",
          context__.to_vec(n_shards));
      dat_t0 = std::vector<int>(n_shards, std::numeric_limits<int>::min());
      
      current_statement__ = 149;
      assign(dat_t0, context__.vals_i("dat_t0"), "assigning variable dat_t0");
      current_statement__ = 149;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 149;
        current_statement__ = 149;
        check_greater_or_equal(function__, "dat_t0[sym1__]",
                               dat_t0[(sym1__ - 1)], 0);}
      current_statement__ = 150;
      validate_non_negative_index("dat_time", "n_shards", n_shards);
      current_statement__ = 151;
      context__.validate_dims("data initialization","dat_time","int",
          context__.to_vec(n_shards));
      dat_time = std::vector<int>(n_shards, std::numeric_limits<int>::min());
      
      current_statement__ = 151;
      assign(dat_time, context__.vals_i("dat_time"),
        "assigning variable dat_time");
      current_statement__ = 151;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 151;
        current_statement__ = 151;
        check_greater_or_equal(function__, "dat_time[sym1__]",
                               dat_time[(sym1__ - 1)], 0);}
      current_statement__ = 152;
      validate_non_negative_index("x_i", "n_shards", n_shards);
      current_statement__ = 153;
      x_i = std::vector<std::vector<int>>(n_shards, std::vector<int>(1, std::numeric_limits<int>::min()));
      
      current_statement__ = 154;
      validate_non_negative_index("x_r", "n_shards", n_shards);
      current_statement__ = 155;
      x_r = std::vector<std::vector<double>>(n_shards, std::vector<double>(1, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 156;
      validate_non_negative_index("local_params", "n_shards", n_shards);
      current_statement__ = 157;
      local_params = std::vector<Eigen::Matrix<double, -1, 1>>(n_shards, Eigen::Matrix<double, -1, 1>(0));
      stan::math::fill(local_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 161;
      for (int s = 1; s <= n_shards; ++s) {
        current_statement__ = 158;
        assign(x_i, rvalue(dat_t0, "dat_t0", index_uni(s)),
          "assigning variable x_i", index_uni(s), index_uni(1));
        current_statement__ = 159;
        assign(x_r, rvalue(dat_time, "dat_time", index_uni(s)),
          "assigning variable x_r", index_uni(s), index_uni(1));}
      current_statement__ = 162;
      validate_non_negative_index("y3_mean", "numChi", numChi);
      current_statement__ = 163;
      validate_non_negative_index("y4_mean", "numChi", numChi);
      current_statement__ = 164;
      validate_non_negative_index("y5_mean", "numChi", numChi);
      current_statement__ = 165;
      validate_non_negative_index("y6_mean", "numChi", numChi);
      current_statement__ = 166;
      y_mean_stacked_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 166;
      y_mean_stacked_1dim__ = (4 * numChi);
      current_statement__ = 167;
      validate_non_negative_index("y_mean_stacked", "(4 * numChi)",
                                  y_mean_stacked_1dim__);
      current_statement__ = 168;
      validate_non_negative_index("y_chi_pred1", "numPred", numPred);
      current_statement__ = 169;
      validate_non_negative_index("y_chi_pred2", "numPred", numPred);
      current_statement__ = 170;
      validate_non_negative_index("y_chi_pred3", "numPred", numPred);
      current_statement__ = 171;
      validate_non_negative_index("y3_mean_pred1", "numPred", numPred);
      current_statement__ = 172;
      validate_non_negative_index("y4_mean_pred1", "numPred", numPred);
      current_statement__ = 173;
      validate_non_negative_index("y5_mean_pred1", "numPred", numPred);
      current_statement__ = 174;
      validate_non_negative_index("y6_mean_pred1", "numPred", numPred);
      current_statement__ = 175;
      validate_non_negative_index("y3_mean_pred2", "numPred", numPred);
      current_statement__ = 176;
      validate_non_negative_index("y4_mean_pred2", "numPred", numPred);
      current_statement__ = 177;
      validate_non_negative_index("y5_mean_pred2", "numPred", numPred);
      current_statement__ = 178;
      validate_non_negative_index("y6_mean_pred2", "numPred", numPred);
      current_statement__ = 179;
      validate_non_negative_index("y3_mean_pred3", "numPred", numPred);
      current_statement__ = 180;
      validate_non_negative_index("y4_mean_pred3", "numPred", numPred);
      current_statement__ = 181;
      validate_non_negative_index("y5_mean_pred3", "numPred", numPred);
      current_statement__ = 182;
      validate_non_negative_index("y6_mean_pred3", "numPred", numPred);
      current_statement__ = 183;
      validate_non_negative_index("chicounts_pred1", "numPred", numPred);
      current_statement__ = 184;
      validate_non_negative_index("Nfd_pred1", "numPred", numPred);
      current_statement__ = 185;
      validate_non_negative_index("donorki_pred1", "numPred", numPred);
      current_statement__ = 186;
      validate_non_negative_index("hostki_pred1", "numPred", numPred);
      current_statement__ = 187;
      validate_non_negative_index("chicounts_pred2", "numPred", numPred);
      current_statement__ = 188;
      validate_non_negative_index("Nfd_pred2", "numPred", numPred);
      current_statement__ = 189;
      validate_non_negative_index("donorki_pred2", "numPred", numPred);
      current_statement__ = 190;
      validate_non_negative_index("hostki_pred2", "numPred", numPred);
      current_statement__ = 191;
      validate_non_negative_index("chicounts_pred3", "numPred", numPred);
      current_statement__ = 192;
      validate_non_negative_index("Nfd_pred3", "numPred", numPred);
      current_statement__ = 193;
      validate_non_negative_index("donorki_pred3", "numPred", numPred);
      current_statement__ = 194;
      validate_non_negative_index("hostki_pred3", "numPred", numPred);
      current_statement__ = 195;
      validate_non_negative_index("host_counts_pred1", "numPred", numPred);
      current_statement__ = 196;
      validate_non_negative_index("host_counts_pred2", "numPred", numPred);
      current_statement__ = 197;
      validate_non_negative_index("host_counts_pred3", "numPred", numPred);
      current_statement__ = 198;
      validate_non_negative_index("donor_counts_pred1", "numPred", numPred);
      current_statement__ = 199;
      validate_non_negative_index("donor_counts_pred2", "numPred", numPred);
      current_statement__ = 200;
      validate_non_negative_index("donor_counts_pred3", "numPred", numPred);
      current_statement__ = 201;
      validate_non_negative_index("host_ki_pred1", "numPred", numPred);
      current_statement__ = 202;
      validate_non_negative_index("host_ki_pred2", "numPred", numPred);
      current_statement__ = 203;
      validate_non_negative_index("host_ki_pred3", "numPred", numPred);
      current_statement__ = 204;
      validate_non_negative_index("donor_ki_pred1", "numPred", numPred);
      current_statement__ = 205;
      validate_non_negative_index("donor_ki_pred2", "numPred", numPred);
      current_statement__ = 206;
      validate_non_negative_index("donor_ki_pred3", "numPred", numPred);
      current_statement__ = 207;
      validate_non_negative_index("log_lik_chi_counts", "numChi", numChi);
      current_statement__ = 208;
      validate_non_negative_index("log_lik_Nfd", "numChi", numChi);
      current_statement__ = 209;
      validate_non_negative_index("log_lik_donor_ki", "numChi", numChi);
      current_statement__ = 210;
      validate_non_negative_index("log_lik_host_ki", "numChi", numChi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_deltavar_cd8_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ N0;
      N0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E5, 2E6, lp__);
      } else {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E5, 2E6);
      }
      local_scalar_t__ delta0;
      delta0 = DUMMY_VAR__;
      
      current_statement__ = 2;
      delta0 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        delta0 = stan::math::lub_constrain(delta0, 0.0, 1.0, lp__);
      } else {
        current_statement__ = 2;
        delta0 = stan::math::lub_constrain(delta0, 0.0, 1.0);
      }
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      current_statement__ = 3;
      rho = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        rho = stan::math::lub_constrain(rho, 0.0, delta0, lp__);
      } else {
        current_statement__ = 3;
        rho = stan::math::lub_constrain(rho, 0.0, delta0);
      }
      local_scalar_t__ r_del;
      r_del = DUMMY_VAR__;
      
      current_statement__ = 4;
      r_del = in__.scalar();
      local_scalar_t__ sigma_chi_counts;
      sigma_chi_counts = DUMMY_VAR__;
      
      current_statement__ = 5;
      sigma_chi_counts = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0, lp__);
      } else {
        current_statement__ = 5;
        sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0);
      }
      local_scalar_t__ sigma_Nfd;
      sigma_Nfd = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigma_Nfd = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0, lp__);
      } else {
        current_statement__ = 6;
        sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0);
      }
      local_scalar_t__ sigma_donor_ki;
      sigma_donor_ki = DUMMY_VAR__;
      
      current_statement__ = 7;
      sigma_donor_ki = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sigma_donor_ki = stan::math::lb_constrain(sigma_donor_ki, 0, lp__);
      } else {
        current_statement__ = 7;
        sigma_donor_ki = stan::math::lb_constrain(sigma_donor_ki, 0);
      }
      local_scalar_t__ sigma_host_ki;
      sigma_host_ki = DUMMY_VAR__;
      
      current_statement__ = 8;
      sigma_host_ki = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        sigma_host_ki = stan::math::lb_constrain(sigma_host_ki, 0, lp__);
      } else {
        current_statement__ = 8;
        sigma_host_ki = stan::math::lb_constrain(sigma_host_ki, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> global_params;
      global_params = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
      stan::math::fill(global_params, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y3_mean;
      y3_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y3_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y4_mean;
      y4_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y4_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y5_mean;
      y5_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y5_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y6_mean;
      y6_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y6_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, DUMMY_VAR__);
      
      current_statement__ = 15;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 16;
      assign(global_params, delta0,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 17;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 18;
      assign(global_params, r_del,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 19;
      assign(y_mean_stacked,
        map_rect<1, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 25;
      for (int i = 1; i <= numChi; ++i) {
        current_statement__ = 20;
        assign(y3_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 3))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 21;
        assign(y4_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 2))),
          "assigning variable y4_mean", index_uni(i));
        current_statement__ = 22;
        assign(y5_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 1))),
          "assigning variable y5_mean", index_uni(i));
        current_statement__ = 23;
        assign(y6_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni((4 * i))),
          "assigning variable y6_mean", index_uni(i));}
      {
        current_statement__ = 113;
        lp_accum__.add(normal_lpdf<propto__>(N0, 1E5, 3E4));
        current_statement__ = 114;
        lp_accum__.add(normal_lpdf<propto__>(delta0, 0.04, 0.02));
        current_statement__ = 115;
        lp_accum__.add(normal_lpdf<propto__>(rho, 0.005, 0.02));
        current_statement__ = 116;
        lp_accum__.add(normal_lpdf<propto__>(r_del, 0.0, 0.02));
        current_statement__ = 117;
        lp_accum__.add(normal_lpdf<propto__>(sigma_chi_counts, 0, 2));
        current_statement__ = 118;
        lp_accum__.add(normal_lpdf<propto__>(sigma_Nfd, 0, 2));
        current_statement__ = 119;
        lp_accum__.add(normal_lpdf<propto__>(sigma_donor_ki, 0, 2));
        current_statement__ = 120;
        lp_accum__.add(normal_lpdf<propto__>(sigma_host_ki, 0, 2));
        current_statement__ = 121;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log(chi_counts),
            stan::math::log(y3_mean), sigma_chi_counts));
        current_statement__ = 122;
        lp_accum__.add(
          normal_lpdf<propto__>(logit(N_donor_fraction),
            logit(to_array_1d(y4_mean)), sigma_Nfd));
        current_statement__ = 123;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(host_ki, pstream__),
            asinsqrt_array(to_array_1d(y5_mean), pstream__), sigma_host_ki));
        current_statement__ = 124;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(donor_ki, pstream__),
            asinsqrt_array(to_array_1d(y6_mean), pstream__), sigma_donor_ki));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_deltavar_cd8_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      N0 = stan::math::lub_constrain(N0, 1E5, 2E6);
      double delta0;
      delta0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta0 = in__.scalar();
      current_statement__ = 2;
      delta0 = stan::math::lub_constrain(delta0, 0.0, 1.0);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho = in__.scalar();
      current_statement__ = 3;
      rho = stan::math::lub_constrain(rho, 0.0, delta0);
      double r_del;
      r_del = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      r_del = in__.scalar();
      double sigma_chi_counts;
      sigma_chi_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_chi_counts = in__.scalar();
      current_statement__ = 5;
      sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0);
      double sigma_Nfd;
      sigma_Nfd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_Nfd = in__.scalar();
      current_statement__ = 6;
      sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0);
      double sigma_donor_ki;
      sigma_donor_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_donor_ki = in__.scalar();
      current_statement__ = 7;
      sigma_donor_ki = stan::math::lb_constrain(sigma_donor_ki, 0);
      double sigma_host_ki;
      sigma_host_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_host_ki = in__.scalar();
      current_statement__ = 8;
      sigma_host_ki = stan::math::lb_constrain(sigma_host_ki, 0);
      Eigen::Matrix<double, -1, 1> global_params;
      global_params = Eigen::Matrix<double, -1, 1>(4);
      stan::math::fill(global_params, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y3_mean;
      y3_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y3_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y4_mean;
      y4_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y4_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y5_mean;
      y5_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y5_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y6_mean;
      y6_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y6_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<double, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(N0);
      vars__.emplace_back(delta0);
      vars__.emplace_back(rho);
      vars__.emplace_back(r_del);
      vars__.emplace_back(sigma_chi_counts);
      vars__.emplace_back(sigma_Nfd);
      vars__.emplace_back(sigma_donor_ki);
      vars__.emplace_back(sigma_host_ki);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 16;
      assign(global_params, delta0,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 17;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 18;
      assign(global_params, r_del,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 19;
      assign(y_mean_stacked,
        map_rect<2, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 25;
      for (int i = 1; i <= numChi; ++i) {
        current_statement__ = 20;
        assign(y3_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 3))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 21;
        assign(y4_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 2))),
          "assigning variable y4_mean", index_uni(i));
        current_statement__ = 22;
        assign(y5_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 1))),
          "assigning variable y5_mean", index_uni(i));
        current_statement__ = 23;
        assign(y6_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni((4 * i))),
          "assigning variable y6_mean", index_uni(i));}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          vars__.emplace_back(global_params[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y3_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y4_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y5_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y6_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
          vars__.emplace_back(y_mean_stacked[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_chi_pred1;
      y_chi_pred1 = std::vector<std::vector<double>>(numPred, std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred2;
      y_chi_pred2 = std::vector<std::vector<double>>(numPred, std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred3;
      y_chi_pred3 = std::vector<std::vector<double>>(numPred, std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<double> y3_mean_pred1;
      y3_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred1;
      y4_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y5_mean_pred1;
      y5_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y6_mean_pred1;
      y6_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred2;
      y3_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred2;
      y4_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y5_mean_pred2;
      y5_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y6_mean_pred2;
      y6_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred3;
      y3_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred3;
      y4_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y5_mean_pred3;
      y5_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y6_mean_pred3;
      y6_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred1;
      chicounts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred1;
      Nfd_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donorki_pred1;
      donorki_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> hostki_pred1;
      hostki_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred2;
      chicounts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred2;
      Nfd_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donorki_pred2;
      donorki_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> hostki_pred2;
      hostki_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred3;
      chicounts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred3;
      Nfd_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donorki_pred3;
      donorki_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> hostki_pred3;
      hostki_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_counts_pred1;
      host_counts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_counts_pred2;
      host_counts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_counts_pred3;
      host_counts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_counts_pred1;
      donor_counts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_counts_pred2;
      donor_counts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_counts_pred3;
      donor_counts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_ki_pred1;
      host_ki_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_ki_pred2;
      host_ki_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_ki_pred3;
      host_ki_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_ki_pred1;
      donor_ki_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_ki_pred2;
      donor_ki_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_ki_pred3;
      donor_ki_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_chi_counts;
      log_lik_chi_counts = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_chi_counts, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_Nfd;
      log_lik_Nfd = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_Nfd, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_donor_ki;
      log_lik_donor_ki = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_donor_ki, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_host_ki;
      log_lik_host_ki = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_host_ki, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 69;
      assign(y3_mean_pred1,
        N_pooled_time(ts_pred_chi1, tb_pred1,
          to_array_1d(global_params), pstream__),
        "assigning variable y3_mean_pred1");
      current_statement__ = 70;
      assign(y3_mean_pred2,
        N_pooled_time(ts_pred_chi2, tb_pred2,
          to_array_1d(global_params), pstream__),
        "assigning variable y3_mean_pred2");
      current_statement__ = 71;
      assign(y3_mean_pred3,
        N_pooled_time(ts_pred_chi3, tb_pred3,
          to_array_1d(global_params), pstream__),
        "assigning variable y3_mean_pred3");
      current_statement__ = 72;
      assign(host_counts_pred1,
        N_host_time(ts_pred_chi1, tb_pred1,
          to_array_1d(global_params), pstream__),
        "assigning variable host_counts_pred1");
      current_statement__ = 73;
      assign(host_counts_pred2,
        N_host_time(ts_pred_chi1, tb_pred2,
          to_array_1d(global_params), pstream__),
        "assigning variable host_counts_pred2");
      current_statement__ = 74;
      assign(host_counts_pred3,
        N_host_time(ts_pred_chi1, tb_pred3,
          to_array_1d(global_params), pstream__),
        "assigning variable host_counts_pred3");
      current_statement__ = 75;
      assign(donor_counts_pred1,
        N_donor_time(ts_pred_chi1, tb_pred1,
          to_array_1d(global_params), pstream__),
        "assigning variable donor_counts_pred1");
      current_statement__ = 76;
      assign(donor_counts_pred2,
        N_donor_time(ts_pred_chi2, tb_pred2,
          to_array_1d(global_params), pstream__),
        "assigning variable donor_counts_pred2");
      current_statement__ = 77;
      assign(donor_counts_pred3,
        N_donor_time(ts_pred_chi3, tb_pred3,
          to_array_1d(global_params), pstream__),
        "assigning variable donor_counts_pred3");
      current_statement__ = 78;
      assign(host_ki_pred1,
        U_host_time(ts_pred_chi1, tb_pred1,
          to_array_1d(global_params), pstream__),
        "assigning variable host_ki_pred1");
      current_statement__ = 79;
      assign(host_ki_pred2,
        U_host_time(ts_pred_chi2, tb_pred2,
          to_array_1d(global_params), pstream__),
        "assigning variable host_ki_pred2");
      current_statement__ = 80;
      assign(host_ki_pred3,
        U_host_time(ts_pred_chi3, tb_pred3,
          to_array_1d(global_params), pstream__),
        "assigning variable host_ki_pred3");
      current_statement__ = 81;
      assign(donor_ki_pred1,
        U_donor_time(ts_pred_chi1, tb_pred1,
          to_array_1d(global_params), pstream__),
        "assigning variable donor_ki_pred1");
      current_statement__ = 82;
      assign(donor_ki_pred2,
        U_donor_time(ts_pred_chi2, tb_pred2,
          to_array_1d(global_params), pstream__),
        "assigning variable donor_ki_pred2");
      current_statement__ = 83;
      assign(donor_ki_pred3,
        U_donor_time(ts_pred_chi3, tb_pred3,
          to_array_1d(global_params), pstream__),
        "assigning variable donor_ki_pred3");
      current_statement__ = 106;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 84;
        assign(y4_mean_pred1,
          (rvalue(donor_counts_pred1, "donor_counts_pred1", index_uni(i)) /
            (rvalue(y3_mean_pred1, "y3_mean_pred1", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred_chi1, "ts_pred_chi1", index_uni(i)) - 54), pstream__))),
          "assigning variable y4_mean_pred1", index_uni(i));
        current_statement__ = 85;
        assign(y4_mean_pred2,
          (rvalue(donor_counts_pred2, "donor_counts_pred2", index_uni(i)) /
            (rvalue(y3_mean_pred2, "y3_mean_pred2", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred_chi2, "ts_pred_chi2", index_uni(i)) - 71), pstream__))),
          "assigning variable y4_mean_pred2", index_uni(i));
        current_statement__ = 86;
        assign(y4_mean_pred3,
          (rvalue(donor_counts_pred3, "donor_counts_pred3", index_uni(i)) /
            (rvalue(y3_mean_pred3, "y3_mean_pred3", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred_chi3, "ts_pred_chi3", index_uni(i)) - 97), pstream__))),
          "assigning variable y4_mean_pred3", index_uni(i));
        current_statement__ = 87;
        assign(y5_mean_pred1,
          (rvalue(host_ki_pred1, "host_ki_pred1", index_uni(i)) /
            rvalue(host_counts_pred1, "host_counts_pred1", index_uni(i))),
          "assigning variable y5_mean_pred1", index_uni(i));
        current_statement__ = 88;
        assign(y5_mean_pred2,
          (rvalue(host_ki_pred2, "host_ki_pred2", index_uni(i)) /
            rvalue(host_counts_pred2, "host_counts_pred2", index_uni(i))),
          "assigning variable y5_mean_pred2", index_uni(i));
        current_statement__ = 89;
        assign(y5_mean_pred3,
          (rvalue(host_ki_pred1, "host_ki_pred1", index_uni(i)) /
            rvalue(host_counts_pred3, "host_counts_pred3", index_uni(i))),
          "assigning variable y5_mean_pred3", index_uni(i));
        current_statement__ = 90;
        assign(y6_mean_pred1,
          (rvalue(donor_ki_pred1, "donor_ki_pred1", index_uni(i)) /
            rvalue(donor_counts_pred1, "donor_counts_pred1", index_uni(i))),
          "assigning variable y6_mean_pred1", index_uni(i));
        current_statement__ = 91;
        assign(y6_mean_pred2,
          (rvalue(donor_ki_pred2, "donor_ki_pred2", index_uni(i)) /
            rvalue(donor_counts_pred2, "donor_counts_pred2", index_uni(i))),
          "assigning variable y6_mean_pred2", index_uni(i));
        current_statement__ = 92;
        assign(y6_mean_pred3,
          (rvalue(donor_ki_pred3, "donor_ki_pred3", index_uni(i)) /
            rvalue(donor_counts_pred3, "donor_counts_pred3", index_uni(i))),
          "assigning variable y6_mean_pred3", index_uni(i));
        current_statement__ = 93;
        assign(chicounts_pred1,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y3_mean_pred1, "y3_mean_pred1", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred1", index_uni(i));
        current_statement__ = 94;
        assign(chicounts_pred2,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y3_mean_pred2, "y3_mean_pred2", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred2", index_uni(i));
        current_statement__ = 95;
        assign(chicounts_pred3,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y3_mean_pred3, "y3_mean_pred3", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred3", index_uni(i));
        current_statement__ = 96;
        assign(Nfd_pred1,
          logit_inverse(
            normal_rng(
              logit(rvalue(y4_mean_pred1, "y4_mean_pred1", index_uni(i))),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred1", index_uni(i));
        current_statement__ = 97;
        assign(Nfd_pred2,
          logit_inverse(
            normal_rng(
              logit(rvalue(y4_mean_pred2, "y4_mean_pred2", index_uni(i))),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred2", index_uni(i));
        current_statement__ = 98;
        assign(Nfd_pred3,
          logit_inverse(
            normal_rng(
              logit(rvalue(y4_mean_pred3, "y4_mean_pred3", index_uni(i))),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred3", index_uni(i));
        current_statement__ = 99;
        assign(donorki_pred1,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y5_mean_pred1, "y5_mean_pred1", index_uni(i)), pstream__),
              sigma_donor_ki, base_rng__), pstream__),
          "assigning variable donorki_pred1", index_uni(i));
        current_statement__ = 100;
        assign(donorki_pred2,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y5_mean_pred2, "y5_mean_pred2", index_uni(i)), pstream__),
              sigma_donor_ki, base_rng__), pstream__),
          "assigning variable donorki_pred2", index_uni(i));
        current_statement__ = 101;
        assign(donorki_pred3,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y5_mean_pred3, "y5_mean_pred3", index_uni(i)), pstream__),
              sigma_donor_ki, base_rng__), pstream__),
          "assigning variable donorki_pred3", index_uni(i));
        current_statement__ = 102;
        assign(hostki_pred1,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y6_mean_pred1, "y6_mean_pred1", index_uni(i)), pstream__),
              sigma_host_ki, base_rng__), pstream__),
          "assigning variable hostki_pred1", index_uni(i));
        current_statement__ = 103;
        assign(hostki_pred2,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y6_mean_pred2, "y6_mean_pred2", index_uni(i)), pstream__),
              sigma_host_ki, base_rng__), pstream__),
          "assigning variable hostki_pred2", index_uni(i));
        current_statement__ = 104;
        assign(hostki_pred3,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y6_mean_pred3, "y6_mean_pred3", index_uni(i)), pstream__),
              sigma_host_ki, base_rng__), pstream__),
          "assigning variable hostki_pred3", index_uni(i));}
      current_statement__ = 112;
      for (int i = 1; i <= numChi; ++i) {
        current_statement__ = 107;
        assign(log_lik_chi_counts,
          normal_lpdf<false>(
            stan::math::log(rvalue(chi_counts, "chi_counts", index_uni(i))),
            stan::math::log(rvalue(y3_mean, "y3_mean", index_uni(i))),
            sigma_chi_counts),
          "assigning variable log_lik_chi_counts", index_uni(i));
        current_statement__ = 108;
        assign(log_lik_Nfd,
          normal_lpdf<false>(
            logit(rvalue(N_donor_fraction, "N_donor_fraction", index_uni(i))),
            logit(rvalue(y4_mean, "y4_mean", index_uni(i))), sigma_Nfd),
          "assigning variable log_lik_Nfd", index_uni(i));
        current_statement__ = 109;
        assign(log_lik_host_ki,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(host_ki, "host_ki", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(y5_mean, "y5_mean", index_uni(i)), pstream__),
            sigma_host_ki),
          "assigning variable log_lik_host_ki", index_uni(i));
        current_statement__ = 110;
        assign(log_lik_donor_ki,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(donor_ki, "donor_ki", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(y6_mean, "y6_mean", index_uni(i)), pstream__),
            sigma_donor_ki),
          "assigning variable log_lik_donor_ki", index_uni(i));}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred1[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred2[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred3[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y5_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y6_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y5_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y6_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y5_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y6_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donorki_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(hostki_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donorki_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(hostki_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donorki_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(hostki_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(host_counts_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(host_counts_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(host_counts_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_counts_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_counts_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_counts_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(host_ki_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(host_ki_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(host_ki_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_ki_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_ki_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_ki_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_chi_counts[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_Nfd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_donor_ki[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_host_ki[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = context__.vals_r("N0")[(1 - 1)];
      double N0_free__;
      N0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0_free__ = stan::math::lub_free(N0, 1E5, 2E6);
      double delta0;
      delta0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta0 = context__.vals_r("delta0")[(1 - 1)];
      double delta0_free__;
      delta0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta0_free__ = stan::math::lub_free(delta0, 0.0, 1.0);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho = context__.vals_r("rho")[(1 - 1)];
      double rho_free__;
      rho_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho_free__ = stan::math::lub_free(rho, 0.0, delta0);
      double r_del;
      r_del = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      r_del = context__.vals_r("r_del")[(1 - 1)];
      double sigma_chi_counts;
      sigma_chi_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_chi_counts = context__.vals_r("sigma_chi_counts")[(1 - 1)];
      double sigma_chi_counts_free__;
      sigma_chi_counts_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_chi_counts_free__ = stan::math::lb_free(sigma_chi_counts, 0);
      double sigma_Nfd;
      sigma_Nfd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_Nfd = context__.vals_r("sigma_Nfd")[(1 - 1)];
      double sigma_Nfd_free__;
      sigma_Nfd_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_Nfd_free__ = stan::math::lb_free(sigma_Nfd, 0);
      double sigma_donor_ki;
      sigma_donor_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_donor_ki = context__.vals_r("sigma_donor_ki")[(1 - 1)];
      double sigma_donor_ki_free__;
      sigma_donor_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_donor_ki_free__ = stan::math::lb_free(sigma_donor_ki, 0);
      double sigma_host_ki;
      sigma_host_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_host_ki = context__.vals_r("sigma_host_ki")[(1 - 1)];
      double sigma_host_ki_free__;
      sigma_host_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_host_ki_free__ = stan::math::lb_free(sigma_host_ki, 0);
      vars__.emplace_back(N0_free__);
      vars__.emplace_back(delta0_free__);
      vars__.emplace_back(rho_free__);
      vars__.emplace_back(r_del);
      vars__.emplace_back(sigma_chi_counts_free__);
      vars__.emplace_back(sigma_Nfd_free__);
      vars__.emplace_back(sigma_donor_ki_free__);
      vars__.emplace_back(sigma_host_ki_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("N0");
    names__.emplace_back("delta0");
    names__.emplace_back("rho");
    names__.emplace_back("r_del");
    names__.emplace_back("sigma_chi_counts");
    names__.emplace_back("sigma_Nfd");
    names__.emplace_back("sigma_donor_ki");
    names__.emplace_back("sigma_host_ki");
    names__.emplace_back("global_params");
    names__.emplace_back("y3_mean");
    names__.emplace_back("y4_mean");
    names__.emplace_back("y5_mean");
    names__.emplace_back("y6_mean");
    names__.emplace_back("y_mean_stacked");
    names__.emplace_back("y_chi_pred1");
    names__.emplace_back("y_chi_pred2");
    names__.emplace_back("y_chi_pred3");
    names__.emplace_back("y3_mean_pred1");
    names__.emplace_back("y4_mean_pred1");
    names__.emplace_back("y5_mean_pred1");
    names__.emplace_back("y6_mean_pred1");
    names__.emplace_back("y3_mean_pred2");
    names__.emplace_back("y4_mean_pred2");
    names__.emplace_back("y5_mean_pred2");
    names__.emplace_back("y6_mean_pred2");
    names__.emplace_back("y3_mean_pred3");
    names__.emplace_back("y4_mean_pred3");
    names__.emplace_back("y5_mean_pred3");
    names__.emplace_back("y6_mean_pred3");
    names__.emplace_back("chicounts_pred1");
    names__.emplace_back("Nfd_pred1");
    names__.emplace_back("donorki_pred1");
    names__.emplace_back("hostki_pred1");
    names__.emplace_back("chicounts_pred2");
    names__.emplace_back("Nfd_pred2");
    names__.emplace_back("donorki_pred2");
    names__.emplace_back("hostki_pred2");
    names__.emplace_back("chicounts_pred3");
    names__.emplace_back("Nfd_pred3");
    names__.emplace_back("donorki_pred3");
    names__.emplace_back("hostki_pred3");
    names__.emplace_back("host_counts_pred1");
    names__.emplace_back("host_counts_pred2");
    names__.emplace_back("host_counts_pred3");
    names__.emplace_back("donor_counts_pred1");
    names__.emplace_back("donor_counts_pred2");
    names__.emplace_back("donor_counts_pred3");
    names__.emplace_back("host_ki_pred1");
    names__.emplace_back("host_ki_pred2");
    names__.emplace_back("host_ki_pred3");
    names__.emplace_back("donor_ki_pred1");
    names__.emplace_back("donor_ki_pred2");
    names__.emplace_back("donor_ki_pred3");
    names__.emplace_back("log_lik_chi_counts");
    names__.emplace_back("log_lik_Nfd");
    names__.emplace_back("log_lik_donor_ki");
    names__.emplace_back("log_lik_host_ki");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_mean_stacked_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "delta0");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "r_del");
    param_names__.emplace_back(std::string() + "sigma_chi_counts");
    param_names__.emplace_back(std::string() + "sigma_Nfd");
    param_names__.emplace_back(std::string() + "sigma_donor_ki");
    param_names__.emplace_back(std::string() + "sigma_host_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_counts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_counts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_counts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_chi_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_donor_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_host_ki" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "delta0");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "r_del");
    param_names__.emplace_back(std::string() + "sigma_chi_counts");
    param_names__.emplace_back(std::string() + "sigma_Nfd");
    param_names__.emplace_back(std::string() + "sigma_donor_ki");
    param_names__.emplace_back(std::string() + "sigma_host_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_counts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_counts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_counts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_counts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_chi_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_donor_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_host_ki" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_del\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_chi_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 4 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y5_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y6_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_counts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_counts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_counts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_ki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_ki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_ki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_ki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_ki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_ki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_chi_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_donor_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_host_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_del\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_chi_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 4 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y5_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y6_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_counts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_counts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_counts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_counts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_ki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_ki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_ki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_ki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_ki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_ki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_chi_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_donor_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_host_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = MAP_asm_deltavar_cd8_model_namespace::MAP_asm_deltavar_cd8_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return MAP_asm_deltavar_cd8_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, MAP_asm_deltavar_cd8_model_namespace::math_reduce_functor__)
STAN_REGISTER_MAP_RECT(2, MAP_asm_deltavar_cd8_model_namespace::math_reduce_functor__)