
// Code generated by stanc a7f4b745
#include <stan/model/model_header.hpp>
namespace MPI_neutral_cd4_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 240> locations_array__ = 
{" (found before start of program)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 218, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 219, column 2 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 220, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 221, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 222, column 2 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 224, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 225, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 229, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 230, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 232, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 233, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 234, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 235, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 236, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 237, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 238, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 240, column 2 to column 72)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 241, column 2 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 259, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 260, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 261, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 262, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 263, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 264, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 265, column 2 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 266, column 2 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 269, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 270, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 271, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 274, column 2 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 275, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 276, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 279, column 2 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 282, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 283, column 4 to column 42)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 281, column 21 to line 284, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 281, column 2 to line 284, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 287, column 2 to column 73)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 290, column 4 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 291, column 4 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 293, column 4 to column 73)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 294, column 4 to column 77)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 289, column 22 to line 295, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 289, column 2 to line 295, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 299, column 4 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 300, column 4 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 301, column 4 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 298, column 22 to line 302, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 298, column 2 to line 302, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 245, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 246, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 247, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 248, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 249, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 251, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 252, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 254, column 2 to line 255, column 49)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 190, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 191, column 27 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 191, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 192, column 25 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 192, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 193, column 26 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 193, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 194, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 195, column 26 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 195, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 196, column 2 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 200, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 201, column 10 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 201, column 20 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 201, column 2 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 202, column 11 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 202, column 21 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 202, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 205, column 25 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 205, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 209, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 210, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 211, column 4 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 212, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 213, column 4 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 208, column 24 to line 214, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 208, column 2 to line 214, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 230, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 259, column 18 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 260, column 20 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 261, column 20 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 262, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 263, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 264, column 22 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 265, column 15 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 266, column 15 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 269, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 270, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 271, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 5, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 6, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 7, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 7, column 16 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 10, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 10, column 28 to column 49)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 10, column 51 to column 64)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 10, column 67 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 10, column 84 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 12, column 4 to column 77)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 17, column 6 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 16, column 11 to line 18, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 15, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 14, column 17 to line 16, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 14, column 4 to line 18, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 19, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 4, column 29 to line 20, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 24, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 26, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 27, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 23, column 40 to line 28, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 33, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 35, column 5 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 35, column 30 to column 54)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 35, column 55 to column 75)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 37, column 5 to column 49)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 39, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 32, column 29 to line 40, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 43, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 44, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 45, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 47, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 48, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 51, column 4 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 53, column 4 to column 95)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 55, column 4 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 42, column 73 to line 56, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 60, column 4 to column 100)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 58, column 71 to line 61, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 64, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 65, column 15 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 65, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 67, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 69, column 6 to column 77)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 68, column 26 to line 70, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 68, column 4 to line 70, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 71, column 2 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 63, column 70 to line 72, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 75, column 4 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 76, column 17 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 76, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 77, column 17 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 77, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 78, column 15 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 78, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 79, column 24 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 79, column 4 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 82, column 21 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 82, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 83, column 21 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 83, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 84, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 87, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 88, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 89, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 92, column 6 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 94, column 45 to column 65)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 94, column 66 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 94, column 44 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 94, column 8 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 93, column 33 to line 95, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 93, column 6 to line 95, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 98, column 8 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 99, column 8 to column 52)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 100, column 8 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 97, column 27 to line 101, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 97, column 6 to line 101, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 91, column 24 to line 102, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 91, column 4 to line 102, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 105, column 4 to line 106, column 48)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 109, column 6 to column 73)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 110, column 6 to column 56)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 108, column 23 to line 111, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 108, column 4 to line 111, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 114, column 8 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 115, column 8 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 113, column 25 to line 116, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 113, column 4 to line 116, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 118, column 6 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 74, column 70 to line 119, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 123, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 124, column 18 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 124, column 4 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 125, column 18 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 125, column 4 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 126, column 14 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 126, column 4 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 127, column 17 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 127, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 128, column 17 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 128, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 129, column 24 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 129, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 132, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 133, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 134, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 135, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 136, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 139, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 142, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 143, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 144, column 4 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 148, column 6 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 149, column 6 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 147, column 18 to line 150, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 147, column 4 to line 150, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 153, column 4 to line 154, column 72)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 157, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 121, column 84 to line 158, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 162, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 163, column 18 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 163, column 4 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 164, column 18 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 164, column 4 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 165, column 14 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 165, column 4 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 166, column 17 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 166, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 167, column 17 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 167, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 168, column 24 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 168, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 171, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 172, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 173, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 174, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 175, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 178, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 181, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 182, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 183, column 4 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 185, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MPI_neutral_cd4.stan', line 160, column 85 to line 186, column 3)"};


template <typename T0__>
stan::promote_args_t<T0__>
sp_numbers(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 97;
    t0 = 5.0;
    local_scalar_t__ dpt0;
    dpt0 = DUMMY_VAR__;
    
    current_statement__ = 98;
    dpt0 = (time - t0);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ fit1;
    fit1 = DUMMY_VAR__;
    
    local_scalar_t__ theta0;
    theta0 = DUMMY_VAR__;
    
    current_statement__ = 101;
    theta0 = 4.3E5;
    local_scalar_t__ theta_f;
    theta_f = DUMMY_VAR__;
    
    current_statement__ = 102;
    theta_f = 1.8E3;
    local_scalar_t__ n;
    n = DUMMY_VAR__;
    
    current_statement__ = 103;
    n = 2.1;
    local_scalar_t__ X;
    X = DUMMY_VAR__;
    
    current_statement__ = 104;
    X = 30.0;
    local_scalar_t__ q;
    q = DUMMY_VAR__;
    
    current_statement__ = 105;
    q = 3.7;
    current_statement__ = 106;
    fit1 = (theta0 +
             ((theta_f * pow(dpt0, n)) *
               (1 - (pow(dpt0, q) / (pow(X, q) + pow(dpt0, q))))));
    current_statement__ = 111;
    if (logical_lt(time, t0)) {
      current_statement__ = 109;
      value = 0.0;
    } else {
      current_statement__ = 107;
      value = fit1;
    }
    current_statement__ = 112;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sp_numbers_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return sp_numbers(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_spline(const T0__& time, const T1__& psi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 115;
    value = (psi * sp_numbers(time, pstream__));
    current_statement__ = 116;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_spline_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const T1__& psi, std::ostream* pstream__)  const 
{
return theta_spline(time, psi, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
eps_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ eps_0;
    eps_0 = DUMMY_VAR__;
    
    current_statement__ = 119;
    eps_0 = 0.14965320;
    local_scalar_t__ eps_f;
    eps_f = DUMMY_VAR__;
    
    current_statement__ = 120;
    eps_f = 0.03470231;
    local_scalar_t__ A;
    A = DUMMY_VAR__;
    
    current_statement__ = 121;
    A = 3.43078629;
    local_scalar_t__ fit;
    fit = DUMMY_VAR__;
    
    current_statement__ = 122;
    fit = (stan::math::exp((-eps_f * (time + A))) + eps_0);
    current_statement__ = 123;
    return fit;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eps_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return eps_spline(time, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
shm(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
    const std::vector<int>& idata, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    current_statement__ = 125;
    psi = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ delta;
    delta = DUMMY_VAR__;
    
    current_statement__ = 126;
    delta = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 127;
    rho = rvalue(parms, "parms", index_uni(3));
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
    
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 129;
    beta = (1 / 3.5);
    current_statement__ = 130;
    assign(dydt,
      (((theta_spline(t, psi, pstream__) * eps_spline(t, pstream__)) +
         (rho *
           ((2 * rvalue(y, "y", index_uni(2))) +
             rvalue(y, "y", index_uni(1))))) -
        ((beta + delta) * rvalue(y, "y", index_uni(1)))),
      "assigning variable dydt", index_uni(1));
    current_statement__ = 131;
    assign(dydt,
      (((theta_spline(t, psi, pstream__) * (1 - eps_spline(t, pstream__))) +
         (beta * rvalue(y, "y", index_uni(1)))) -
        ((rho + delta) * rvalue(y, "y", index_uni(2)))),
      "assigning variable dydt", index_uni(2));
    current_statement__ = 132;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct shm_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
           const std::vector<int>& idata, std::ostream* pstream__)  const 
{
return shm(t, y, parms, rdata, idata, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
foreach_ode(const T0__& ts, const T1__& t0,
            const std::vector<T2__>& init_cond,
            const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 134;
    return to_array_1d(
             integrate_ode_rk45(shm_functor__(), init_cond, t0,
               rep_array(ts, 1), parms, std::vector<double>{0.0},
               std::vector<int>{0}, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foreach_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ts, const T1__& t0,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return foreach_ode(ts, t0, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__,
T2__>>>
solve_ode(const std::vector<T0__>& solve_time,
          const std::vector<T1__>& init_cond, const std::vector<T2__>& parms,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int num_solve;
    num_solve = std::numeric_limits<int>::min();
    
    current_statement__ = 136;
    num_solve = size(solve_time);
    current_statement__ = 137;
    validate_non_negative_index("y_hat", "num_solve", num_solve);
    std::vector<std::vector<local_scalar_t__>> y_hat;
    y_hat = std::vector<std::vector<local_scalar_t__>>(num_solve, std::vector<local_scalar_t__>(2, DUMMY_VAR__));
    
    current_statement__ = 139;
    assign(y_hat, init_cond, "assigning variable y_hat", index_uni(1));
    current_statement__ = 142;
    for (int i = 2; i <= num_solve; ++i) {
      current_statement__ = 140;
      assign(y_hat,
        foreach_ode(rvalue(solve_time, "solve_time", index_uni(i)),
          rvalue(solve_time, "solve_time", index_uni(1)), init_cond,
          parms, pstream__), "assigning variable y_hat", index_uni(i));}
    current_statement__ = 143;
    return y_hat;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_ode_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__,
T2__>>>
operator()(const std::vector<T0__>& solve_time,
           const std::vector<T1__>& init_cond,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return solve_ode(solve_time, init_cond, parms, pstream__);
}
};

template <typename T1__, typename T2__>
std::vector<stan::promote_args_t<T1__,
T2__>>
solve_unique(const std::vector<int>& data_time,
             const std::vector<T1__>& init_cond,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int numObs;
    numObs = std::numeric_limits<int>::min();
    
    current_statement__ = 145;
    numObs = size(data_time);
    current_statement__ = 146;
    validate_non_negative_index("y1_mean", "numObs", numObs);
    std::vector<local_scalar_t__> y1_mean;
    y1_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
    
    current_statement__ = 148;
    validate_non_negative_index("y2_mean", "numObs", numObs);
    std::vector<local_scalar_t__> y2_mean;
    y2_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
    
    current_statement__ = 150;
    validate_non_negative_index("y_hat", "numObs", numObs);
    std::vector<std::vector<local_scalar_t__>> y_hat;
    y_hat = std::vector<std::vector<local_scalar_t__>>(numObs, std::vector<local_scalar_t__>(2, DUMMY_VAR__));
    
    current_statement__ = 152;
    validate_non_negative_index("y_mean_stacked", "2 * numObs", (2 * numObs));
    std::vector<local_scalar_t__> y_mean_stacked;
    y_mean_stacked = std::vector<local_scalar_t__>((2 * numObs), DUMMY_VAR__);
    
    current_statement__ = 154;
    validate_non_negative_index("time_uniques", "numObs", numObs);
    std::vector<int> time_uniques;
    time_uniques = std::vector<int>(numObs, std::numeric_limits<int>::min());
    
    current_statement__ = 156;
    validate_non_negative_index("time_indices", "numObs", numObs);
    std::vector<int> time_indices;
    time_indices = std::vector<int>(numObs, std::numeric_limits<int>::min());
    
    int already_exists;
    already_exists = std::numeric_limits<int>::min();
    
    int number_uniques;
    number_uniques = std::numeric_limits<int>::min();
    
    current_statement__ = 159;
    number_uniques = 1;
    current_statement__ = 160;
    assign(time_uniques, rvalue(data_time, "data_time", index_uni(1)),
      "assigning variable time_uniques", index_uni(1));
    current_statement__ = 161;
    assign(time_indices, 1, "assigning variable time_indices", index_uni(1));
    current_statement__ = 175;
    for (int i = 2; i <= numObs; ++i) {
      current_statement__ = 162;
      already_exists = 0;
      current_statement__ = 168;
      for (int j = 1; j <= number_uniques; ++j) {
        current_statement__ = 166;
        if (logical_eq(rvalue(time_uniques, "time_uniques", index_uni(j)),
              rvalue(data_time, "data_time", index_uni(i)))) {
          current_statement__ = 163;
          assign(time_indices, j,
            "assigning variable time_indices", index_uni(i));
          current_statement__ = 164;
          already_exists = 1;
        } }
      current_statement__ = 173;
      if (logical_eq(already_exists, 0)) {
        current_statement__ = 169;
        number_uniques = (number_uniques + 1);
        current_statement__ = 170;
        assign(time_uniques, rvalue(data_time, "data_time", index_uni(i)),
          "assigning variable time_uniques", index_uni(number_uniques));
        current_statement__ = 171;
        assign(time_indices, number_uniques,
          "assigning variable time_indices", index_uni(i));
      } }
    current_statement__ = 176;
    assign(y_hat,
      solve_ode(
        to_array_1d(
          divide(
            to_vector(
              rvalue(time_uniques, "time_uniques",
                index_min_max(1, number_uniques))), 1.0)), init_cond,
        parms, pstream__),
      "assigning variable y_hat", index_min_max(1, number_uniques));
    current_statement__ = 180;
    for (int i = 1; i <= numObs; ++i) {
      current_statement__ = 177;
      assign(y1_mean,
        (rvalue(y_hat, "y_hat",
           index_uni(rvalue(time_indices, "time_indices", index_uni(i))),
             index_uni(1)) +
          rvalue(y_hat, "y_hat",
            index_uni(rvalue(time_indices, "time_indices", index_uni(i))),
              index_uni(2))), "assigning variable y1_mean", index_uni(i));
      current_statement__ = 178;
      assign(y2_mean,
        (rvalue(y_hat, "y_hat",
           index_uni(rvalue(time_indices, "time_indices", index_uni(i))),
             index_uni(1)) / rvalue(y1_mean, "y1_mean", index_uni(i))),
        "assigning variable y2_mean", index_uni(i));}
    current_statement__ = 184;
    for (int i = 1; i <= numObs; ++i) {
      current_statement__ = 181;
      assign(y_mean_stacked, rvalue(y1_mean, "y1_mean", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni(i));
      current_statement__ = 182;
      assign(y_mean_stacked, rvalue(y2_mean, "y2_mean", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni((i + numObs)));}
    current_statement__ = 185;
    return y_mean_stacked;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_unique_functor__ {
template <typename T1__, typename T2__>
std::vector<stan::promote_args_t<T1__,
T2__>>
operator()(const std::vector<int>& data_time,
           const std::vector<T1__>& init_cond,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return solve_unique(data_time, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
lp_reduce(const T0__& global_params_arg__, const T1__& local_params_arg__,
          const std::vector<T2__>& x_r, const std::vector<int>& x_i,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& global_params = to_ref(global_params_arg__);
  const auto& local_params = to_ref(local_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 187;
    n = (size(x_r) / 2);
    current_statement__ = 188;
    validate_non_negative_index("data_time", "n", n);
    std::vector<int> data_time;
    data_time = std::vector<int>(n, std::numeric_limits<int>::min());
    
    current_statement__ = 189;
    assign(data_time, rvalue(x_i, "x_i", index_min_max(1, n)),
      "assigning variable data_time");
    current_statement__ = 190;
    validate_non_negative_index("y_counts", "n", n);
    std::vector<local_scalar_t__> y_counts;
    y_counts = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 191;
    assign(y_counts, rvalue(x_r, "x_r", index_min_max(1, n)),
      "assigning variable y_counts");
    current_statement__ = 192;
    validate_non_negative_index("y_ki", "n", n);
    std::vector<local_scalar_t__> y_ki;
    y_ki = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 193;
    assign(y_ki, rvalue(x_r, "x_r", index_min_max((n + 1), (2 * n))),
      "assigning variable y_ki");
    current_statement__ = 194;
    validate_non_negative_index("y1_mean", "n", n);
    std::vector<local_scalar_t__> y1_mean;
    y1_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 196;
    validate_non_negative_index("y2_mean", "n", n);
    std::vector<local_scalar_t__> y2_mean;
    y2_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 198;
    validate_non_negative_index("y_mean_stacked", "2 * n", (2 * n));
    std::vector<local_scalar_t__> y_mean_stacked;
    y_mean_stacked = std::vector<local_scalar_t__>((2 * n), DUMMY_VAR__);
    
    local_scalar_t__ sigma_counts;
    sigma_counts = DUMMY_VAR__;
    
    current_statement__ = 200;
    sigma_counts = rvalue(global_params, "global_params", index_uni(6));
    local_scalar_t__ sigma_ki;
    sigma_ki = DUMMY_VAR__;
    
    current_statement__ = 201;
    sigma_ki = rvalue(global_params, "global_params", index_uni(7));
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 202;
    N0 = rvalue(global_params, "global_params", index_uni(4));
    local_scalar_t__ kappa0;
    kappa0 = DUMMY_VAR__;
    
    current_statement__ = 203;
    kappa0 = rvalue(global_params, "global_params", index_uni(5));
    std::vector<local_scalar_t__> init_cond;
    init_cond = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
    
    local_scalar_t__ lp_manual;
    lp_manual = DUMMY_VAR__;
    
    current_statement__ = 206;
    assign(init_cond, (kappa0 * N0),
      "assigning variable init_cond", index_uni(1));
    current_statement__ = 207;
    assign(init_cond, ((1 - kappa0) * N0),
      "assigning variable init_cond", index_uni(2));
    current_statement__ = 208;
    assign(y_mean_stacked,
      solve_unique(data_time, init_cond,
        to_array_1d(global_params), pstream__),
      "assigning variable y_mean_stacked");
    current_statement__ = 212;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 209;
      assign(y1_mean, rvalue(y_mean_stacked, "y_mean_stacked", index_uni(i)),
        "assigning variable y1_mean", index_uni(i));
      current_statement__ = 210;
      assign(y2_mean,
        rvalue(y_mean_stacked, "y_mean_stacked", index_uni((i + n))),
        "assigning variable y2_mean", index_uni(i));}
    current_statement__ = 213;
    lp_manual = (normal_lpdf<false>(y_counts,
                   to_vector(stan::math::log(y1_mean)), sigma_counts) +
                  normal_lpdf<false>(y_ki, to_vector(logit(y2_mean)),
                    sigma_ki));
    current_statement__ = 214;
    return (Eigen::Matrix<local_scalar_t__,-1,1>(1) << lp_manual).finished();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct lp_reduce_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& global_params, const T1__& local_params,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return lp_reduce(global_params, local_params, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
map_tester(const T0__& global_params_arg__, const T1__& local_params_arg__,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& global_params = to_ref(global_params_arg__);
  const auto& local_params = to_ref(local_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 216;
    n = (size(x_r) / 2);
    current_statement__ = 217;
    validate_non_negative_index("data_time", "n", n);
    std::vector<int> data_time;
    data_time = std::vector<int>(n, std::numeric_limits<int>::min());
    
    current_statement__ = 218;
    assign(data_time, rvalue(x_i, "x_i", index_min_max(1, n)),
      "assigning variable data_time");
    current_statement__ = 219;
    validate_non_negative_index("y_counts", "n", n);
    std::vector<local_scalar_t__> y_counts;
    y_counts = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 220;
    assign(y_counts, rvalue(x_r, "x_r", index_min_max(1, n)),
      "assigning variable y_counts");
    current_statement__ = 221;
    validate_non_negative_index("y_ki", "n", n);
    std::vector<local_scalar_t__> y_ki;
    y_ki = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 222;
    assign(y_ki, rvalue(x_r, "x_r", index_min_max((n + 1), (2 * n))),
      "assigning variable y_ki");
    current_statement__ = 223;
    validate_non_negative_index("y1_mean", "n", n);
    std::vector<local_scalar_t__> y1_mean;
    y1_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 225;
    validate_non_negative_index("y2_mean", "n", n);
    std::vector<local_scalar_t__> y2_mean;
    y2_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 227;
    validate_non_negative_index("y_mean_stacked", "2 * n", (2 * n));
    std::vector<local_scalar_t__> y_mean_stacked;
    y_mean_stacked = std::vector<local_scalar_t__>((2 * n), DUMMY_VAR__);
    
    local_scalar_t__ sigma_counts;
    sigma_counts = DUMMY_VAR__;
    
    current_statement__ = 229;
    sigma_counts = rvalue(global_params, "global_params", index_uni(6));
    local_scalar_t__ sigma_ki;
    sigma_ki = DUMMY_VAR__;
    
    current_statement__ = 230;
    sigma_ki = rvalue(global_params, "global_params", index_uni(7));
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 231;
    N0 = rvalue(global_params, "global_params", index_uni(4));
    local_scalar_t__ kappa0;
    kappa0 = DUMMY_VAR__;
    
    current_statement__ = 232;
    kappa0 = rvalue(global_params, "global_params", index_uni(5));
    std::vector<local_scalar_t__> init_cond;
    init_cond = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
    
    local_scalar_t__ lp_manual;
    lp_manual = DUMMY_VAR__;
    
    current_statement__ = 235;
    assign(init_cond, (kappa0 * N0),
      "assigning variable init_cond", index_uni(1));
    current_statement__ = 236;
    assign(init_cond, ((1 - kappa0) * N0),
      "assigning variable init_cond", index_uni(2));
    current_statement__ = 237;
    assign(y_mean_stacked,
      solve_unique(data_time, init_cond,
        to_array_1d(global_params), pstream__),
      "assigning variable y_mean_stacked");
    current_statement__ = 238;
    return to_vector(y_mean_stacked);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct map_tester_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& global_params, const T1__& local_params,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return map_tester(global_params, local_params, x_r, x_i, pstream__);
}
};

class MPI_neutral_cd4_model final : public model_base_crtp<MPI_neutral_cd4_model> {

 private:
  int numObs;
  std::vector<int> data_time;
  std::vector<double> counts;
  std::vector<double> ki_prop;
  int numPred;
  std::vector<double> ts_pred;
  int n_shards;
  int M;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<double>> x_r;
  std::vector<Eigen::Matrix<double, -1, 1>> local_params;
  int y_mean_stacked_1dim__;
 
 public:
  ~MPI_neutral_cd4_model() { }
  
  inline std::string model_name() const final { return "MPI_neutral_cd4_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 a7f4b745", "stancflags = "};
  }
  
  
  MPI_neutral_cd4_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "MPI_neutral_cd4_model_namespace::MPI_neutral_cd4_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 58;
      context__.validate_dims("data initialization","numObs","int",
          context__.to_vec());
      numObs = std::numeric_limits<int>::min();
      
      current_statement__ = 58;
      numObs = context__.vals_i("numObs")[(1 - 1)];
      current_statement__ = 58;
      current_statement__ = 58;
      check_greater_or_equal(function__, "numObs", numObs, 1);
      current_statement__ = 59;
      validate_non_negative_index("data_time", "numObs", numObs);
      current_statement__ = 60;
      context__.validate_dims("data initialization","data_time","int",
          context__.to_vec(numObs));
      data_time = std::vector<int>(numObs, std::numeric_limits<int>::min());
      
      current_statement__ = 60;
      assign(data_time, context__.vals_i("data_time"),
        "assigning variable data_time");
      current_statement__ = 60;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 60;
        current_statement__ = 60;
        check_greater_or_equal(function__, "data_time[sym1__]",
                               data_time[(sym1__ - 1)], 0);}
      current_statement__ = 61;
      validate_non_negative_index("counts", "numObs", numObs);
      current_statement__ = 62;
      context__.validate_dims("data initialization","counts","double",
          context__.to_vec(numObs));
      counts = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 62;
      assign(counts, context__.vals_r("counts"), "assigning variable counts");
      current_statement__ = 62;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 62;
        current_statement__ = 62;
        check_greater_or_equal(function__, "counts[sym1__]",
                               counts[(sym1__ - 1)], 0);}
      current_statement__ = 63;
      validate_non_negative_index("ki_prop", "numObs", numObs);
      current_statement__ = 64;
      context__.validate_dims("data initialization","ki_prop","double",
          context__.to_vec(numObs));
      ki_prop = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 64;
      assign(ki_prop, context__.vals_r("ki_prop"),
        "assigning variable ki_prop");
      current_statement__ = 64;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 64;
        current_statement__ = 64;
        check_greater_or_equal(function__, "ki_prop[sym1__]",
                               ki_prop[(sym1__ - 1)], 0);}
      current_statement__ = 65;
      context__.validate_dims("data initialization","numPred","int",
          context__.to_vec());
      numPred = std::numeric_limits<int>::min();
      
      current_statement__ = 65;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 65;
      current_statement__ = 65;
      check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 66;
      validate_non_negative_index("ts_pred", "numPred", numPred);
      current_statement__ = 67;
      context__.validate_dims("data initialization","ts_pred","double",
          context__.to_vec(numPred));
      ts_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 67;
      assign(ts_pred, context__.vals_r("ts_pred"),
        "assigning variable ts_pred");
      current_statement__ = 67;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 67;
        current_statement__ = 67;
        check_greater_or_equal(function__, "ts_pred[sym1__]",
                               ts_pred[(sym1__ - 1)], 0);}
      current_statement__ = 68;
      context__.validate_dims("data initialization","n_shards","int",
          context__.to_vec());
      n_shards = std::numeric_limits<int>::min();
      
      current_statement__ = 68;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 69;
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 69;
      M = (numObs / n_shards);
      current_statement__ = 70;
      validate_non_negative_index("x_i", "n_shards", n_shards);
      current_statement__ = 71;
      validate_non_negative_index("x_i", "M", M);
      current_statement__ = 72;
      x_i = std::vector<std::vector<int>>(n_shards, std::vector<int>(M, std::numeric_limits<int>::min()));
      
      current_statement__ = 73;
      validate_non_negative_index("x_r", "n_shards", n_shards);
      current_statement__ = 74;
      validate_non_negative_index("x_r", "2 * M", (2 * M));
      current_statement__ = 75;
      x_r = std::vector<std::vector<double>>(n_shards, std::vector<double>(
        (2 * M), std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 76;
      validate_non_negative_index("local_params", "n_shards", n_shards);
      current_statement__ = 77;
      local_params = std::vector<Eigen::Matrix<double, -1, 1>>(n_shards, Eigen::Matrix<double, -1, 1>(0));
      stan::math::fill(local_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 84;
      for (int s = 1; s <= n_shards; ++s) {
        int i;
        i = std::numeric_limits<int>::min();
        
        current_statement__ = 78;
        i = (1 + ((s - 1) * M));
        int j;
        j = std::numeric_limits<int>::min();
        
        current_statement__ = 79;
        j = (s * M);
        current_statement__ = 80;
        assign(x_i, rvalue(data_time, "data_time", index_min_max(i, j)),
          "assigning variable x_i", index_uni(s), index_min_max(1, M));
        current_statement__ = 81;
        assign(x_r,
          stan::math::log(rvalue(counts, "counts", index_min_max(i, j))),
          "assigning variable x_r", index_uni(s), index_min_max(1, M));
        current_statement__ = 82;
        assign(x_r, logit(rvalue(ki_prop, "ki_prop", index_min_max(i, j))),
          "assigning variable x_r", index_uni(s),
                                      index_min_max((M + 1), (2 * M)));}
      current_statement__ = 85;
      validate_non_negative_index("map_val", "numObs", numObs);
      current_statement__ = 86;
      validate_non_negative_index("y_hat_pred", "numPred", numPred);
      current_statement__ = 87;
      validate_non_negative_index("y1_mean_pred", "numPred", numPred);
      current_statement__ = 88;
      validate_non_negative_index("y2_mean_pred", "numPred", numPred);
      current_statement__ = 89;
      validate_non_negative_index("counts_pred", "numPred", numPred);
      current_statement__ = 90;
      validate_non_negative_index("kiprop_pred", "numPred", numPred);
      current_statement__ = 91;
      y_mean_stacked_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 91;
      y_mean_stacked_1dim__ = (2 * numObs);
      current_statement__ = 91;
      validate_non_negative_index("y_mean_stacked", "2 * numObs",
                                  y_mean_stacked_1dim__);
      current_statement__ = 92;
      validate_non_negative_index("y1_mean", "numObs", numObs);
      current_statement__ = 93;
      validate_non_negative_index("y2_mean", "numObs", numObs);
      current_statement__ = 94;
      validate_non_negative_index("log_lik_counts", "numObs", numObs);
      current_statement__ = 95;
      validate_non_negative_index("log_lik_ki", "numObs", numObs);
      current_statement__ = 96;
      validate_non_negative_index("aic_ll", "numObs", numObs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MPI_neutral_cd4_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ N0;
      N0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E4, 5E6, lp__);
      } else {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E4, 5E6);
      }
      local_scalar_t__ delta;
      delta = DUMMY_VAR__;
      
      current_statement__ = 2;
      delta = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        delta = stan::math::lub_constrain(delta, 0.001, 0.5, lp__);
      } else {
        current_statement__ = 2;
        delta = stan::math::lub_constrain(delta, 0.001, 0.5);
      }
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      current_statement__ = 3;
      rho = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        rho = stan::math::lub_constrain(rho, 0.001, 0.5, lp__);
      } else {
        current_statement__ = 3;
        rho = stan::math::lub_constrain(rho, 0.001, 0.5);
      }
      local_scalar_t__ psi;
      psi = DUMMY_VAR__;
      
      current_statement__ = 4;
      psi = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        psi = stan::math::lub_constrain(psi, 0, 1, lp__);
      } else {
        current_statement__ = 4;
        psi = stan::math::lub_constrain(psi, 0, 1);
      }
      local_scalar_t__ kappa0;
      kappa0 = DUMMY_VAR__;
      
      current_statement__ = 5;
      kappa0 = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        kappa0 = stan::math::lub_constrain(kappa0, 0.2, 1, lp__);
      } else {
        current_statement__ = 5;
        kappa0 = stan::math::lub_constrain(kappa0, 0.2, 1);
      }
      local_scalar_t__ sigma_counts;
      sigma_counts = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigma_counts = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        sigma_counts = stan::math::lb_constrain(sigma_counts, 0, lp__);
      } else {
        current_statement__ = 6;
        sigma_counts = stan::math::lb_constrain(sigma_counts, 0);
      }
      local_scalar_t__ sigma_ki;
      sigma_ki = DUMMY_VAR__;
      
      current_statement__ = 7;
      sigma_ki = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sigma_ki = stan::math::lb_constrain(sigma_ki, 0, lp__);
      } else {
        current_statement__ = 7;
        sigma_ki = stan::math::lb_constrain(sigma_ki, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> global_params;
      global_params = Eigen::Matrix<local_scalar_t__, -1, 1>(7);
      stan::math::fill(global_params, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> map_val;
      map_val = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs);
      stan::math::fill(map_val, DUMMY_VAR__);
      
      current_statement__ = 10;
      assign(global_params, psi,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 11;
      assign(global_params, delta,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 12;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 13;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 14;
      assign(global_params, kappa0,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 15;
      assign(global_params, sigma_counts,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 16;
      assign(global_params, sigma_ki,
        "assigning variable global_params", index_uni(7));
      current_statement__ = 17;
      assign(map_val,
        map_rect<1, map_tester_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable map_val");
      current_statement__ = 18;
      if (pstream__) {
        stan_print(pstream__, map_val);
        stan_print(pstream__, "\n");
      }
      {
        current_statement__ = 50;
        lp_accum__.add(normal_lpdf<propto__>(psi, 0.3, 0.2));
        current_statement__ = 51;
        lp_accum__.add(normal_lpdf<propto__>(delta, 0.03, 0.2));
        current_statement__ = 52;
        lp_accum__.add(normal_lpdf<propto__>(rho, 0.005, 0.2));
        current_statement__ = 53;
        lp_accum__.add(normal_lpdf<propto__>(N0, 9E5, 1E5));
        current_statement__ = 54;
        lp_accum__.add(normal_lpdf<propto__>(kappa0, 0.8, 0.1));
        current_statement__ = 55;
        lp_accum__.add(normal_lpdf<propto__>(sigma_counts, 0, 2));
        current_statement__ = 56;
        lp_accum__.add(normal_lpdf<propto__>(sigma_ki, 0, 2));
        current_statement__ = 57;
        lp_accum__.add(
          sum(
            map_rect<2, lp_reduce_functor__>(global_params, local_params,
              x_r, x_i, pstream__)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MPI_neutral_cd4_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      N0 = stan::math::lub_constrain(N0, 1E4, 5E6);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta = in__.scalar();
      current_statement__ = 2;
      delta = stan::math::lub_constrain(delta, 0.001, 0.5);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho = in__.scalar();
      current_statement__ = 3;
      rho = stan::math::lub_constrain(rho, 0.001, 0.5);
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      psi = in__.scalar();
      current_statement__ = 4;
      psi = stan::math::lub_constrain(psi, 0, 1);
      double kappa0;
      kappa0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      kappa0 = in__.scalar();
      current_statement__ = 5;
      kappa0 = stan::math::lub_constrain(kappa0, 0.2, 1);
      double sigma_counts;
      sigma_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_counts = in__.scalar();
      current_statement__ = 6;
      sigma_counts = stan::math::lb_constrain(sigma_counts, 0);
      double sigma_ki;
      sigma_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_ki = in__.scalar();
      current_statement__ = 7;
      sigma_ki = stan::math::lb_constrain(sigma_ki, 0);
      Eigen::Matrix<double, -1, 1> global_params;
      global_params = Eigen::Matrix<double, -1, 1>(7);
      stan::math::fill(global_params, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> map_val;
      map_val = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(map_val, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(N0);
      vars__.emplace_back(delta);
      vars__.emplace_back(rho);
      vars__.emplace_back(psi);
      vars__.emplace_back(kappa0);
      vars__.emplace_back(sigma_counts);
      vars__.emplace_back(sigma_ki);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      assign(global_params, psi,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 11;
      assign(global_params, delta,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 12;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 13;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 14;
      assign(global_params, kappa0,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 15;
      assign(global_params, sigma_counts,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 16;
      assign(global_params, sigma_ki,
        "assigning variable global_params", index_uni(7));
      current_statement__ = 17;
      assign(map_val,
        map_rect<3, map_tester_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable map_val");
      current_statement__ = 18;
      if (pstream__) {
        stan_print(pstream__, map_val);
        stan_print(pstream__, "\n");
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
          vars__.emplace_back(global_params[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(map_val[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_hat_pred;
      y_hat_pred = std::vector<std::vector<double>>(numPred, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<double> y1_mean_pred;
      y1_mean_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred;
      y2_mean_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> counts_pred;
      counts_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> kiprop_pred;
      kiprop_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y_mean_stacked;
      y_mean_stacked = std::vector<double>(y_mean_stacked_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y1_mean;
      y1_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean;
      y2_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_counts;
      log_lik_counts = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik_counts, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ki;
      log_lik_ki = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik_ki, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> aic_ll;
      aic_ll = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(aic_ll, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> init_cond;
      init_cond = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 31;
      assign(init_cond, (kappa0 * N0),
        "assigning variable init_cond", index_uni(1));
      current_statement__ = 32;
      assign(init_cond, ((1 - kappa0) * N0),
        "assigning variable init_cond", index_uni(2));
      current_statement__ = 33;
      assign(y_mean_stacked,
        solve_unique(data_time, init_cond,
          to_array_1d(global_params), pstream__),
        "assigning variable y_mean_stacked");
      current_statement__ = 37;
      for (int i = 1; i <= numObs; ++i) {
        current_statement__ = 34;
        assign(y1_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(i)),
          "assigning variable y1_mean", index_uni(i));
        current_statement__ = 35;
        assign(y2_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni((i + numObs))),
          "assigning variable y2_mean", index_uni(i));}
      current_statement__ = 38;
      assign(y_hat_pred,
        solve_ode(ts_pred, init_cond, to_array_1d(global_params), pstream__),
        "assigning variable y_hat_pred");
      current_statement__ = 44;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 39;
        assign(y1_mean_pred,
          (rvalue(y_hat_pred, "y_hat_pred", index_uni(i), index_uni(1)) +
            rvalue(y_hat_pred, "y_hat_pred", index_uni(i), index_uni(2))),
          "assigning variable y1_mean_pred", index_uni(i));
        current_statement__ = 40;
        assign(y2_mean_pred,
          (rvalue(y_hat_pred, "y_hat_pred", index_uni(i), index_uni(1)) /
            rvalue(y1_mean_pred, "y1_mean_pred", index_uni(i))),
          "assigning variable y2_mean_pred", index_uni(i));
        current_statement__ = 41;
        assign(counts_pred,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred, "y1_mean_pred", index_uni(i))),
              sigma_counts, base_rng__)),
          "assigning variable counts_pred", index_uni(i));
        current_statement__ = 42;
        assign(kiprop_pred,
          inv_logit(
            normal_rng(
              logit(rvalue(y2_mean_pred, "y2_mean_pred", index_uni(i))),
              sigma_ki, base_rng__)),
          "assigning variable kiprop_pred", index_uni(i));}
      current_statement__ = 49;
      for (int i = 1; i <= numObs; ++i) {
        current_statement__ = 45;
        assign(log_lik_counts,
          normal_lpdf<false>(
            stan::math::log(rvalue(counts, "counts", index_uni(i))),
            stan::math::log(rvalue(y1_mean, "y1_mean", index_uni(i))),
            sigma_counts), "assigning variable log_lik_counts", index_uni(i));
        current_statement__ = 46;
        assign(log_lik_ki,
          normal_lpdf<false>(logit(rvalue(ki_prop, "ki_prop", index_uni(i))),
            logit(rvalue(y2_mean, "y2_mean", index_uni(i))), sigma_ki),
          "assigning variable log_lik_ki", index_uni(i));
        current_statement__ = 47;
        assign(aic_ll,
          (rvalue(log_lik_counts, "log_lik_counts", index_uni(i)) +
            rvalue(log_lik_ki, "log_lik_ki", index_uni(i))),
          "assigning variable aic_ll", index_uni(i));}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_hat_pred[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(kiprop_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        vars__.emplace_back(y_mean_stacked[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(y1_mean[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(y2_mean[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik_counts[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik_ki[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(aic_ll[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(init_cond[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = context__.vals_r("N0")[(1 - 1)];
      double N0_free__;
      N0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0_free__ = stan::math::lub_free(N0, 1E4, 5E6);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta = context__.vals_r("delta")[(1 - 1)];
      double delta_free__;
      delta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta_free__ = stan::math::lub_free(delta, 0.001, 0.5);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho = context__.vals_r("rho")[(1 - 1)];
      double rho_free__;
      rho_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho_free__ = stan::math::lub_free(rho, 0.001, 0.5);
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      psi = context__.vals_r("psi")[(1 - 1)];
      double psi_free__;
      psi_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      psi_free__ = stan::math::lub_free(psi, 0, 1);
      double kappa0;
      kappa0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      kappa0 = context__.vals_r("kappa0")[(1 - 1)];
      double kappa0_free__;
      kappa0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      kappa0_free__ = stan::math::lub_free(kappa0, 0.2, 1);
      double sigma_counts;
      sigma_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_counts = context__.vals_r("sigma_counts")[(1 - 1)];
      double sigma_counts_free__;
      sigma_counts_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_counts_free__ = stan::math::lb_free(sigma_counts, 0);
      double sigma_ki;
      sigma_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_ki = context__.vals_r("sigma_ki")[(1 - 1)];
      double sigma_ki_free__;
      sigma_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_ki_free__ = stan::math::lb_free(sigma_ki, 0);
      vars__.emplace_back(N0_free__);
      vars__.emplace_back(delta_free__);
      vars__.emplace_back(rho_free__);
      vars__.emplace_back(psi_free__);
      vars__.emplace_back(kappa0_free__);
      vars__.emplace_back(sigma_counts_free__);
      vars__.emplace_back(sigma_ki_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("N0");
    names__.emplace_back("delta");
    names__.emplace_back("rho");
    names__.emplace_back("psi");
    names__.emplace_back("kappa0");
    names__.emplace_back("sigma_counts");
    names__.emplace_back("sigma_ki");
    names__.emplace_back("global_params");
    names__.emplace_back("map_val");
    names__.emplace_back("y_hat_pred");
    names__.emplace_back("y1_mean_pred");
    names__.emplace_back("y2_mean_pred");
    names__.emplace_back("counts_pred");
    names__.emplace_back("kiprop_pred");
    names__.emplace_back("y_mean_stacked");
    names__.emplace_back("y1_mean");
    names__.emplace_back("y2_mean");
    names__.emplace_back("log_lik_counts");
    names__.emplace_back("log_lik_ki");
    names__.emplace_back("aic_ll");
    names__.emplace_back("init_cond");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(7)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_mean_stacked_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "kappa0");
    param_names__.emplace_back(std::string() + "sigma_counts");
    param_names__.emplace_back(std::string() + "sigma_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "map_val" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kiprop_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "aic_ll" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "kappa0");
    param_names__.emplace_back(std::string() + "sigma_counts");
    param_names__.emplace_back(std::string() + "sigma_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "map_val" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kiprop_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "aic_ll" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 7 << "},\"block\":\"transformed_parameters\"},{\"name\":\"map_val\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"kiprop_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"array\",\"length\":" << y_mean_stacked_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"aic_ll\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 7 << "},\"block\":\"transformed_parameters\"},{\"name\":\"map_val\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"kiprop_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"array\",\"length\":" << y_mean_stacked_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"aic_ll\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = MPI_neutral_cd4_model_namespace::MPI_neutral_cd4_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return MPI_neutral_cd4_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, MPI_neutral_cd4_model_namespace::map_tester_functor__)
STAN_REGISTER_MAP_RECT(2, MPI_neutral_cd4_model_namespace::lp_reduce_functor__)
STAN_REGISTER_MAP_RECT(3, MPI_neutral_cd4_model_namespace::map_tester_functor__)