
// Code generated by stanc a7f4b745
#include <stan/model/model_header.hpp>
namespace MAP_asm_rhovar_cd8_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 625> locations_array__ = 
{" (found before start of program)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 839, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 840, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 841, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 842, column 2 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 843, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 844, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 848, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 849, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 850, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 851, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 853, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 854, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 855, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 856, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 859, column 2 to column 80)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 862, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 863, column 4 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 861, column 21 to line 864, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 861, column 2 to line 864, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 881, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 883, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 883, column 31 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 884, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 884, column 34 to column 59)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 884, column 60 to column 93)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 887, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 888, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 891, column 2 to column 71)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 892, column 2 to column 77)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 895, column 4 to column 80)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 897, column 4 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 898, column 4 to column 91)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 894, column 22 to line 899, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 894, column 2 to line 899, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 903, column 4 to column 96)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 904, column 4 to column 108)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 902, column 22 to line 905, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 902, column 2 to line 905, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 868, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 869, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 870, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 871, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 873, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 874, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 876, column 2 to column 59)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 877, column 2 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 814, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 815, column 29 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 815, column 2 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 816, column 25 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 816, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 817, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 818, column 30 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 818, column 2 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 819, column 2 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 820, column 24 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 820, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 821, column 26 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 821, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 825, column 10 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 825, column 2 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 826, column 11 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 826, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 829, column 25 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 829, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 833, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 834, column 3 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 832, column 23 to line 835, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 832, column 2 to line 835, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 849, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 850, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 851, column 10 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 851, column 9 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 881, column 18 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 883, column 20 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 883, column 49 to column 56)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 884, column 22 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 884, column 50 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 884, column 84 to column 91)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 887, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 888, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 5, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 6, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 7, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 7, column 16 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 10, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 10, column 27 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 10, column 49 to column 62)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 10, column 65 to column 80)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 10, column 82 to column 96)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 12, column 4 to column 77)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 17, column 6 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 16, column 11 to line 18, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 15, column 6 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 14, column 17 to line 16, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 14, column 4 to line 18, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 19, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 4, column 29 to line 20, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 25, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 27, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 27, column 29 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 27, column 54 to column 75)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 28, column 4 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 29, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 35, column 6 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 34, column 11 to line 36, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 33, column 6 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 32, column 18 to line 34, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 32, column 4 to line 36, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 37, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 24, column 28 to line 38, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 42, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 43, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 44, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 50, column 6 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 49, column 11 to line 51, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 48, column 6 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 47, column 30 to line 49, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 47, column 4 to line 51, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 52, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 41, column 37 to line 53, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 57, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 58, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 59, column 4 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 60, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 60, column 15 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 61, column 4 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 64, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 68, column 6 to column 49)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 67, column 11 to line 69, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 66, column 6 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 65, column 18 to line 67, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 65, column 4 to line 69, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 70, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 56, column 44 to line 71, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 76, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 77, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 78, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 83, column 6 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 82, column 11 to line 84, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 81, column 6 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 80, column 17 to line 82, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 80, column 4 to line 84, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 85, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 73, column 30 to line 86, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 90, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 91, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 94, column 4 to column 64)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 95, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 89, column 43 to line 96, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 101, column 4 to column 64)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 99, column 42 to line 102, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 106, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 107, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 108, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 115, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 114, column 11 to line 116, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 113, column 6 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 112, column 40 to line 114, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 112, column 11 to line 116, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 111, column 6 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 110, column 29 to line 112, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 110, column 4 to line 116, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 117, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 105, column 54 to line 118, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 122, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 123, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 128, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 127, column 12 to line 129, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 126, column 6 to column 69)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 125, column 30 to line 127, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 125, column 4 to line 129, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 130, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 121, column 28 to line 131, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 135, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 136, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 138, column 4 to column 42)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 140, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 134, column 38 to line 141, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 145, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 146, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 147, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 149, column 4 to column 109)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 150, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 144, column 59 to line 151, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 155, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 156, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 157, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 159, column 4 to column 109)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 160, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 154, column 58 to line 161, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 165, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 167, column 4 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 168, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 164, column 55 to line 169, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 174, column 5 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 175, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 172, column 57 to line 176, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 180, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 181, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 186, column 8 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 185, column 13 to line 187, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 184, column 6 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 183, column 26 to line 185, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 183, column 4 to line 187, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 189, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 179, column 55 to line 190, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 194, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 195, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 200, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 199, column 11 to line 201, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 198, column 6 to column 113)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 197, column 27 to line 199, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 197, column 4 to line 201, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 202, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 193, column 60 to line 203, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 207, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 208, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 213, column 7 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 212, column 12 to line 214, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 211, column 7 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 210, column 27 to line 212, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 210, column 5 to line 214, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 215, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 206, column 62 to line 216, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 220, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 221, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 226, column 7 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 225, column 12 to line 227, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 224, column 7 to column 83)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 223, column 27 to line 225, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 223, column 5 to line 227, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 228, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 219, column 63 to line 229, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 233, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 234, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 239, column 7 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 238, column 12 to line 240, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 237, column 7 to column 93)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 236, column 28 to line 238, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 236, column 5 to line 240, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 242, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 232, column 58 to line 243, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 247, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 248, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 253, column 7 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 252, column 12 to line 254, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 251, column 7 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 250, column 28 to line 252, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 250, column 5 to line 254, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 256, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 246, column 56 to line 257, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 261, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 262, column 5 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 267, column 7 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 266, column 12 to line 268, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 265, column 7 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 264, column 27 to line 266, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 264, column 5 to line 268, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 270, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 260, column 57 to line 271, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 274, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 275, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 277, column 4 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 279, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 273, column 82 to line 280, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 283, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 284, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 286, column 4 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 288, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 282, column 83 to line 289, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 292, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 293, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 295, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 297, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 291, column 81 to line 298, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 301, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 302, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 304, column 4 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 306, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 300, column 82 to line 307, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 310, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 311, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 312, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 315, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 316, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 309, column 40 to line 317, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 320, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 321, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 322, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 324, column 4 to column 104)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 325, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 319, column 41 to line 326, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 329, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 330, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 331, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 333, column 4 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 334, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 328, column 39 to line 335, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 338, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 339, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 340, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 342, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 343, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 337, column 40 to line 344, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 348, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 349, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 349, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 350, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 351, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 354, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 355, column 5 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 353, column 20 to line 356, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 353, column 3 to line 356, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 357, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 347, column 48 to line 358, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 362, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 363, column 17 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 363, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 364, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 365, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 368, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 369, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 370, column 6 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 367, column 21 to line 371, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 367, column 4 to line 371, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 372, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 361, column 67 to line 373, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 377, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 378, column 17 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 378, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 379, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 380, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 383, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 384, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 385, column 6 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 382, column 21 to line 386, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 382, column 4 to line 386, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 387, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 376, column 65 to line 388, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 392, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 393, column 17 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 393, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 394, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 395, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 398, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 399, column 6 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 400, column 6 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 397, column 21 to line 401, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 397, column 4 to line 401, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 402, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 391, column 66 to line 403, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 407, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 408, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 409, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 410, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 415, column 6 to column 147)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 414, column 11 to line 416, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 413, column 6 to column 152)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 412, column 40 to line 414, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 412, column 4 to line 416, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 417, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 406, column 64 to line 418, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 422, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 423, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 424, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 425, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 430, column 6 to column 148)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 429, column 11 to line 431, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 428, column 6 to column 159)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 427, column 32 to line 429, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 427, column 4 to line 431, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 432, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 421, column 65 to line 433, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 437, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 438, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 443, column 6 to column 50)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 442, column 11 to line 444, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 441, column 6 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 440, column 24 to line 442, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 440, column 4 to line 444, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 445, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 436, column 65 to line 446, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 450, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 451, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 452, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 453, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 458, column 6 to column 152)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 457, column 11 to line 459, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 456, column 6 to column 173)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 455, column 42 to line 457, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 455, column 4 to line 459, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 460, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 449, column 67 to line 461, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 465, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 466, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 467, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 468, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 473, column 6 to column 153)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 472, column 11 to line 474, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 471, column 6 to column 157)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 470, column 32 to line 472, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 470, column 4 to line 474, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 475, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 464, column 68 to line 476, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 480, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 481, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 482, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 483, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 488, column 6 to column 154)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 487, column 11 to line 489, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 486, column 6 to column 158)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 485, column 32 to line 487, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 485, column 4 to line 489, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 491, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 479, column 69 to line 492, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 496, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 497, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 498, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 499, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 504, column 6 to column 50)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 503, column 11 to line 505, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 502, column 6 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 501, column 24 to line 503, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 501, column 4 to line 505, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 506, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 495, column 76 to line 507, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 511, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 512, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 513, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 514, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 519, column 6 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 518, column 11 to line 520, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 517, column 6 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 516, column 26 to line 518, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 516, column 4 to line 520, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 521, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 510, column 77 to line 522, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 526, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 527, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 528, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 529, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 534, column 6 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 533, column 11 to line 535, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 532, column 6 to column 54)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 531, column 26 to line 533, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 531, column 4 to line 535, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 536, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 525, column 75 to line 537, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 541, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 542, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 543, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 544, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 549, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 548, column 11 to line 550, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 547, column 6 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 546, column 26 to line 548, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 546, column 4 to line 550, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 551, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 540, column 76 to line 552, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 556, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 557, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 559, column 4 to column 112)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 560, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 555, column 31 to line 561, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 565, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 566, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 568, column 4 to column 113)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 569, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 564, column 32 to line 570, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 574, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 575, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 577, column 4 to column 111)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 578, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 573, column 30 to line 579, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 583, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 584, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 586, column 4 to column 112)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 587, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 582, column 31 to line 588, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 592, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 593, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 594, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 595, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 597, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 591, column 42 to line 598, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 602, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 603, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 604, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 605, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 607, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 601, column 43 to line 608, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 612, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 613, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 614, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 615, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 617, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 611, column 41 to line 618, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 622, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 623, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 624, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 625, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 627, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 621, column 42 to line 628, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 632, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 633, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 635, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 631, column 77 to line 636, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 640, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 641, column 4 to column 42)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 643, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 639, column 78 to line 644, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 648, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 649, column 4 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 651, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 647, column 76 to line 652, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 656, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 657, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 659, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 655, column 77 to line 660, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 664, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 665, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 667, column 4 to column 108)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 668, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 663, column 30 to line 669, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 673, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 674, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 676, column 4 to column 109)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 677, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 672, column 31 to line 678, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 682, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 683, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 685, column 4 to column 107)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 686, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 681, column 29 to line 687, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 691, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 692, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 694, column 4 to column 108)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 695, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 690, column 30 to line 696, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 700, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 701, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 701, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 702, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 703, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 706, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 707, column 5 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 705, column 20 to line 708, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 705, column 3 to line 708, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 709, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 699, column 48 to line 710, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 714, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 715, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 715, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 716, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 717, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 720, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 721, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 722, column 5 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 719, column 20 to line 723, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 719, column 3 to line 723, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 724, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 713, column 67 to line 725, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 729, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 730, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 730, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 731, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 732, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 735, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 736, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 737, column 5 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 734, column 20 to line 738, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 734, column 3 to line 738, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 739, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 728, column 65 to line 740, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 744, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 745, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 745, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 746, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 747, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 750, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 751, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 752, column 5 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 749, column 20 to line 753, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 749, column 3 to line 753, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 754, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 743, column 66 to line 755, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 759, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 760, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 763, column 25 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 763, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 764, column 23 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 764, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 765, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 767, column 11 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 767, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 770, column 4 to column 68)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 771, column 4 to column 66)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 772, column 4 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 773, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 774, column 4 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 776, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 757, column 86 to line 777, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 781, column 5 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 782, column 7 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 783, column 7 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 780, column 28 to line 784, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 788, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 789, column 16 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 789, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 790, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 793, column 6 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 792, column 23 to line 794, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 792, column 4 to line 794, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 795, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 787, column 33 to line 796, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 799, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 801, column 4 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 802, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 798, column 28 to line 803, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 806, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 808, column 4 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 809, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/only_onto/MAP_asm_rhovar_cd8.stan', line 805, column 27 to line 810, column 3)"};


template <typename T0__>
stan::promote_args_t<T0__>
sp_numbers(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 82;
    t0 = 1.0;
    local_scalar_t__ dpt0;
    dpt0 = DUMMY_VAR__;
    
    current_statement__ = 83;
    dpt0 = (time - t0);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ fit1;
    fit1 = DUMMY_VAR__;
    
    local_scalar_t__ theta0;
    theta0 = DUMMY_VAR__;
    
    current_statement__ = 86;
    theta0 = 9E4;
    local_scalar_t__ theta_f;
    theta_f = DUMMY_VAR__;
    
    current_statement__ = 87;
    theta_f = 68.0;
    local_scalar_t__ n;
    n = DUMMY_VAR__;
    
    current_statement__ = 88;
    n = 3.0;
    local_scalar_t__ X;
    X = DUMMY_VAR__;
    
    current_statement__ = 89;
    X = 25.0;
    local_scalar_t__ q;
    q = DUMMY_VAR__;
    
    current_statement__ = 90;
    q = 4.25;
    current_statement__ = 91;
    fit1 = (theta0 +
             ((theta_f * pow(dpt0, n)) *
               (1 - (pow(dpt0, q) / (pow(X, q) + pow(dpt0, q))))));
    current_statement__ = 96;
    if (logical_lt(time, t0)) {
      current_statement__ = 94;
      value = fit1;
    } else {
      current_statement__ = 92;
      value = fit1;
    }
    current_statement__ = 97;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sp_numbers_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return sp_numbers(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
eps_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ eps_0;
    eps_0 = DUMMY_VAR__;
    
    current_statement__ = 100;
    eps_0 = 0.24510453;
    local_scalar_t__ eps_f;
    eps_f = DUMMY_VAR__;
    
    current_statement__ = 101;
    eps_f = 0.01559996;
    local_scalar_t__ A;
    A = DUMMY_VAR__;
    
    current_statement__ = 102;
    A = 14.83715328;
    local_scalar_t__ eps5;
    eps5 = DUMMY_VAR__;
    
    current_statement__ = 103;
    eps5 = (stan::math::exp((-eps_f * (5 + A))) + eps_0);
    local_scalar_t__ fit;
    fit = DUMMY_VAR__;
    
    current_statement__ = 109;
    if (logical_lte(time, 5)) {
      current_statement__ = 107;
      fit = eps5;
    } else {
      current_statement__ = 105;
      fit = (stan::math::exp((-eps_f * (time + A))) + eps_0);
    }
    current_statement__ = 110;
    return fit;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eps_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return eps_spline(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
g_age(const T0__& age, const std::vector<T1__>& parms,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 112;
    t0 = 1.0;
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 113;
    N0 = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 119;
    if ((primitive_value(logical_gte(age, 0)) && primitive_value(
        logical_lte(age, t0)))) {
      current_statement__ = 117;
      value = (N0 / t0);
    } else {
      current_statement__ = 115;
      value = 0;
    }
    current_statement__ = 120;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return g_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_spline(const T0__& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 122;
    N0 = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 123;
    t0 = 1.0;
    local_scalar_t__ s1;
    s1 = DUMMY_VAR__;
    
    current_statement__ = 124;
    s1 = 0.0055;
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ theta72;
    theta72 = DUMMY_VAR__;
    
    current_statement__ = 127;
    theta72 = sp_numbers(72, pstream__);
    current_statement__ = 128;
    psi = (g_age(0.0, parms, pstream__) / sp_numbers(t0, pstream__));
    current_statement__ = 133;
    if (logical_lte(time, 72)) {
      current_statement__ = 131;
      value = (psi * sp_numbers(time, pstream__));
    } else {
      current_statement__ = 129;
      value = ((psi * theta72) * stan::math::exp((-s1 * (time - 72))));
    }
    current_statement__ = 134;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_spline_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_spline(time, parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
Chi_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ chi;
    chi = DUMMY_VAR__;
    
    local_scalar_t__ chiEst;
    chiEst = DUMMY_VAR__;
    
    current_statement__ = 137;
    chiEst = 0.85793486;
    local_scalar_t__ qEst;
    qEst = DUMMY_VAR__;
    
    current_statement__ = 138;
    qEst = 0.04299229;
    current_statement__ = 143;
    if (logical_lt(time, 0)) {
      current_statement__ = 141;
      chi = 0;
    } else {
      current_statement__ = 139;
      chi = (chiEst * (1 - stan::math::exp((-qEst * time))));
    }
    current_statement__ = 144;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Chi_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return Chi_spline(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_donor(const T0__& time, const std::vector<T1__>& parms,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 147;
    tBMT = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 148;
    value = (theta_spline(time, parms, pstream__) *
              Chi_spline((time - tBMT), pstream__));
    current_statement__ = 149;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_donor_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_donor(time, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_host(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 151;
    return (theta_spline(time, parms, pstream__) -
             theta_donor(time, parms, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_host_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_host(time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
ki_dist_theta(const T0__& ki, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 153;
    k_bar = (1 / stan::math::exp(1.0));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 155;
    t0 = 1.0;
    current_statement__ = 163;
    if ((primitive_value(logical_gte(ki, 0)) && primitive_value(
        logical_lt(ki, k_bar)))) {
      current_statement__ = 161;
      value = ((1 - eps_spline(time, pstream__)) / k_bar);
    } else {
      current_statement__ = 160;
      if ((primitive_value(logical_gte(ki, k_bar)) && primitive_value(
          logical_lte(ki, 1.0)))) {
        current_statement__ = 158;
        value = (eps_spline(time, pstream__) / (1 - k_bar));
      } else {
        current_statement__ = 156;
        value = 0.0;
      }
    }
    current_statement__ = 164;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ki_dist_theta_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& ki, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return ki_dist_theta(ki, time, parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
ki_dist_init(const T0__& ki, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ r_ki_init;
    r_ki_init = DUMMY_VAR__;
    
    current_statement__ = 167;
    r_ki_init = 1;
    current_statement__ = 172;
    if ((primitive_value(logical_gte(ki, 0.0)) && primitive_value(
        logical_lte(ki, 1.0)))) {
      current_statement__ = 170;
      value = (stan::math::exp((-ki * r_ki_init)) /
                ((1 - stan::math::exp(-r_ki_init)) / r_ki_init));
    } else {
      current_statement__ = 168;
      value = 0.0;
    }
    current_statement__ = 173;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ki_dist_init_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& ki, std::ostream* pstream__)  const 
{
return ki_dist_init(ki, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
rho_age(const T0__& age, const std::vector<T1__>& parms,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 175;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ r_rho;
    r_rho = DUMMY_VAR__;
    
    current_statement__ = 176;
    r_rho = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 177;
    value = (rho * stan::math::exp((-r_rho * age)));
    current_statement__ = 178;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rho_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return rho_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
lambda_integ(const T0__& lo_lim, const T1__& up_lim,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ delta;
    delta = DUMMY_VAR__;
    
    current_statement__ = 180;
    delta = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 181;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ r_rho;
    r_rho = DUMMY_VAR__;
    
    current_statement__ = 182;
    r_rho = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 183;
    value = ((delta * (up_lim - lo_lim)) +
              ((rho / r_rho) *
                (stan::math::exp((-r_rho * up_lim)) -
                  stan::math::exp((-r_rho * lo_lim)))));
    current_statement__ = 184;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct lambda_integ_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& lo_lim, const T1__& up_lim,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return lambda_integ(lo_lim, up_lim, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
alpha_integ(const T0__& lo_lim, const T1__& up_lim,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ delta;
    delta = DUMMY_VAR__;
    
    current_statement__ = 186;
    delta = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 187;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ r_rho;
    r_rho = DUMMY_VAR__;
    
    current_statement__ = 188;
    r_rho = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 189;
    value = ((delta * (up_lim - lo_lim)) +
              ((rho / r_rho) *
                (stan::math::exp((-r_rho * lo_lim)) -
                  stan::math::exp((-r_rho * up_lim)))));
    current_statement__ = 190;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct alpha_integ_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& lo_lim, const T1__& up_lim,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return alpha_integ(lo_lim, up_lim, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_init_age(const T0__& age, const T1__& time,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 192;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 193;
    value = (g_age(t0, parms, pstream__) *
              stan::math::exp(
                -lambda_integ(((age - time) + t0), age, parms, pstream__)));
    current_statement__ = 194;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_init_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_init_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_theta_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 196;
    value = (theta_spline((time - age), parms, pstream__) *
              stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    current_statement__ = 197;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_total_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 200;
    t0 = 1.0;
    current_statement__ = 205;
    if (logical_lt(age, (time - t0))) {
      current_statement__ = 203;
      value = (theta_spline((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 201;
      value = (g_age(t0, parms, pstream__) *
                stan::math::exp(
                  -lambda_integ(((age - time) + t0), age, parms, pstream__)));
    }
    current_statement__ = 206;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_total_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_total_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_Host_init_age(const T0__& age, const T1__& time,
                  const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 208;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 214;
    if (logical_gte(age, (time - tBMT))) {
      current_statement__ = 212;
      value = (Asm_total_age(((age - time) + tBMT), tBMT, parms, pstream__) *
                stan::math::exp(
                  -lambda_integ(((age - time) + tBMT), age, parms, pstream__)));
    } else {
      current_statement__ = 210;
      value = 0.0;
    }
    current_statement__ = 215;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_Host_init_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_Host_init_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_Host_theta_age(const T0__& age, const T1__& time,
                   const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 217;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 223;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 221;
      value = (theta_host((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 219;
      value = 0.0;
    }
    current_statement__ = 224;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_Host_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_Host_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_Donor_theta_age(const T0__& age, const T1__& time,
                    const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 226;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 232;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 230;
      value = (theta_donor((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 228;
      value = 0.0;
    }
    current_statement__ = 233;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_Donor_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_Donor_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_pooled_age(const T0__& age, const T1__& time,
               const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 235;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 241;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 239;
      value = (Asm_Host_theta_age(age, time, parms, pstream__) +
                Asm_Donor_theta_age(age, time, parms, pstream__));
    } else {
      current_statement__ = 237;
      value = Asm_Host_init_age(age, time, parms, pstream__);
    }
    current_statement__ = 242;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_pooled_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_pooled_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_host_age(const T0__& age, const T1__& time,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 244;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 250;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 248;
      value = Asm_Host_theta_age(age, time, parms, pstream__);
    } else {
      current_statement__ = 246;
      value = Asm_Host_init_age(age, time, parms, pstream__);
    }
    current_statement__ = 251;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_host_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_host_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_donor_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 253;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 259;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 257;
      value = Asm_Donor_theta_age(age, time, parms, pstream__);
    } else {
      current_statement__ = 255;
      value = 0.0;
    }
    current_statement__ = 260;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_donor_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_donor_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_total_ode(const T0__& age, const std::vector<T1__>& y,
              const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
              const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 263;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 264;
    value = Asm_total_age(age, time, parms, pstream__);
    current_statement__ = 265;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_total_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_total_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_pooled_ode(const T0__& age, const std::vector<T1__>& y,
               const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
               const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 268;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 269;
    value = Asm_pooled_age(age, time, parms, pstream__);
    current_statement__ = 270;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_pooled_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_pooled_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_host_ode(const T0__& age, const std::vector<T1__>& y,
             const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 273;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 274;
    value = Asm_host_age(age, time, parms, pstream__);
    current_statement__ = 275;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_host_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_host_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
Asm_donor_ode(const T0__& age, const std::vector<T1__>& y,
              const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
              const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 278;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 279;
    value = Asm_donor_age(age, time, parms, pstream__);
    current_statement__ = 280;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_donor_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return Asm_donor_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_total_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 284;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 285;
    value = rvalue(
              integrate_ode_rk45(Asm_total_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_total_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(time, 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 286;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_total_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_total_counts(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_pooled_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 290;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 291;
    value = rvalue(
              integrate_ode_rk45(Asm_pooled_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_pooled_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(time, 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 292;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_pooled_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_pooled_counts(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_host_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 296;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 297;
    value = rvalue(
              integrate_ode_rk45(Asm_host_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_host_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 298;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_host_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_host_counts(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_donor_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 302;
    time = rvalue(parms, "parms", index_uni(6));
    current_statement__ = 303;
    value = rvalue(
              integrate_ode_rk45(Asm_donor_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(Asm_donor_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(time, 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 304;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_donor_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_donor_counts(parms, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
N_total_time(const std::vector<T0__>& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 306;
    ndim = size(time);
    current_statement__ = 307;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    current_statement__ = 310;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 314;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 311;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 312;
      assign(y_solve, solve_total_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 315;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_total_time_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return N_total_time(time, parms, pstream__);
}
};

template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
N_pooled_time(const std::vector<T0__>& time, const std::vector<double>& tBMT,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 317;
    ndim = size(time);
    current_statement__ = 318;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 321;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 326;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 322;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 323;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 324;
      assign(y_solve, solve_pooled_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 327;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_pooled_time_functor__ {
template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<double>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return N_pooled_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
N_host_time(const std::vector<T0__>& time, const std::vector<double>& tBMT,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 329;
    ndim = size(time);
    current_statement__ = 330;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 333;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 338;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 334;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 335;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 336;
      assign(y_solve, solve_host_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 339;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_host_time_functor__ {
template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<double>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return N_host_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
N_donor_time(const std::vector<T0__>& time, const std::vector<double>& tBMT,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 341;
    ndim = size(time);
    current_statement__ = 342;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 345;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 350;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 346;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 347;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 348;
      assign(y_solve, solve_donor_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 351;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_donor_time_functor__ {
template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<double>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return N_donor_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
U_init_ki_age(const T0__& ki, const T1__& age, const T2__& time,
              const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 353;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 354;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 355;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 361;
    if (logical_lte(ki, stan::math::exp((-beta * (time - t0))))) {
      current_statement__ = 359;
      value = (((g_age(t0, parms, pstream__) *
                  ki_dist_init(
                    (ki * stan::math::exp((beta * (time - t0)))), pstream__))
                 * stan::math::exp((beta * (time - t0)))) *
                stan::math::exp(
                  -alpha_integ(((age - time) + t0), age, parms, pstream__)));
    } else {
      current_statement__ = 357;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_init_age((age - tau), (time - tau), parms, pstream__))
                 * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 362;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_init_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return U_init_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
U_theta_ki_age(const T0__& ki, const T1__& age, const T2__& time,
               const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 364;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 365;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 366;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 372;
    if (logical_lte(ki, stan::math::exp((-beta * age)))) {
      current_statement__ = 370;
      value = (((theta_spline((time - age), parms, pstream__) *
                  ki_dist_theta((ki * stan::math::exp((beta * age))),
                    (time - age), parms, pstream__)) *
                 stan::math::exp((beta * age))) *
                stan::math::exp(-alpha_integ(0.0, age, parms, pstream__)));
    } else {
      current_statement__ = 368;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_theta_age((age - tau), (time - tau), parms, pstream__))
                 * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 373;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_theta_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return U_theta_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
U_total_ki_age(const T0__& ki, const T1__& age, const T2__& time,
               const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 375;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 381;
    if (logical_lt(age, (time - t0))) {
      current_statement__ = 379;
      value = U_theta_ki_age(ki, age, time, parms, pstream__);
    } else {
      current_statement__ = 377;
      value = U_init_ki_age(ki, age, time, parms, pstream__);
    }
    current_statement__ = 382;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return U_total_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
host_init_ki_age(const T0__& ki, const T1__& age, const T2__& time,
                 const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 384;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 386;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 387;
    tau = (-stan::math::log(ki) / beta);
    current_statement__ = 392;
    if (logical_lte(ki, stan::math::exp((-beta * (time - tBMT))))) {
      current_statement__ = 390;
      value = ((U_total_ki_age(
                  (ki * stan::math::exp((beta * (time - tBMT)))),
                  ((age - time) + tBMT), time, parms, pstream__) *
                 stan::math::exp((beta * (time - tBMT)))) *
                stan::math::exp(
                  -alpha_integ(((age - time) + tBMT), age, parms, pstream__)));
    } else {
      current_statement__ = 388;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_Host_init_age((age - tau), (time - tau),
                    parms, pstream__)) * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 393;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct host_init_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return host_init_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
host_theta_ki_age(const T0__& ki, const T1__& age, const T2__& time,
                  const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 395;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 396;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 397;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 403;
    if (logical_lte(ki, stan::math::exp((-beta * age)))) {
      current_statement__ = 401;
      value = (((theta_host((time - age), parms, pstream__) *
                  ki_dist_theta((ki * stan::math::exp((beta * age))),
                    (time - age), parms, pstream__)) *
                 stan::math::exp((beta * age))) *
                stan::math::exp(-alpha_integ(0.0, age, parms, pstream__)));
    } else {
      current_statement__ = 399;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_Host_theta_age((age - tau), (time - tau),
                    parms, pstream__)) * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 404;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct host_theta_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return host_theta_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
donor_theta_ki_age(const T0__& ki, const T1__& age, const T2__& time,
                   const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 406;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 407;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 408;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 414;
    if (logical_lte(ki, stan::math::exp((-beta * age)))) {
      current_statement__ = 412;
      value = (((theta_donor((time - age), parms, pstream__) *
                  ki_dist_theta((ki * stan::math::exp((beta * age))),
                    (time - age), parms, pstream__)) *
                 stan::math::exp((beta * age))) *
                stan::math::exp(-alpha_integ(0.0, age, parms, pstream__)));
    } else {
      current_statement__ = 410;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_Donor_theta_age((age - tau), (time - tau),
                    parms, pstream__)) * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 415;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct donor_theta_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return donor_theta_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_total_kat(const T0__& ki, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 417;
    time = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ age;
    age = DUMMY_VAR__;
    
    current_statement__ = 418;
    age = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 419;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 425;
    if (logical_lt(age, (time - t0))) {
      current_statement__ = 423;
      value = U_theta_ki_age(ki, age, time, parms, pstream__);
    } else {
      current_statement__ = 421;
      value = U_init_ki_age(ki, age, time, parms, pstream__);
    }
    current_statement__ = 426;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_kat_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_total_kat(ki, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_Pooled_kat(const T0__& ki, const std::vector<T1__>& y,
             const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 428;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ age;
    age = DUMMY_VAR__;
    
    current_statement__ = 429;
    age = rvalue(parms, "parms", index_uni(7));
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 430;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 436;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 434;
      value = (donor_theta_ki_age(ki, age, time, parms, pstream__) +
                host_theta_ki_age(ki, age, time, parms, pstream__));
    } else {
      current_statement__ = 432;
      value = host_init_ki_age(ki, age, time, parms, pstream__);
    }
    current_statement__ = 437;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_kat_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_Pooled_kat(ki, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_host_kat(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 439;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ age;
    age = DUMMY_VAR__;
    
    current_statement__ = 440;
    age = rvalue(parms, "parms", index_uni(7));
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 441;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 447;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 445;
      value = host_theta_ki_age(ki, age, time, parms, pstream__);
    } else {
      current_statement__ = 443;
      value = host_init_ki_age(ki, age, time, parms, pstream__);
    }
    current_statement__ = 448;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_kat_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_host_kat(ki, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_donor_kat(const T0__& ki, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 450;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ age;
    age = DUMMY_VAR__;
    
    current_statement__ = 451;
    age = rvalue(parms, "parms", index_uni(7));
    local_scalar_t__ tBMT;
    tBMT = DUMMY_VAR__;
    
    current_statement__ = 452;
    tBMT = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 458;
    if (logical_lt(age, (time - tBMT))) {
      current_statement__ = 456;
      value = donor_theta_ki_age(ki, age, time, parms, pstream__);
    } else {
      current_statement__ = 454;
      value = 0.0;
    }
    current_statement__ = 459;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_kat_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_donor_kat(ki, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_total_at(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 462;
    k_bar = (1 / stan::math::exp(1));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 463;
    y_solve = rvalue(
                integrate_ode_rk45(U_total_kat_functor__(), std::vector<double>{0.0},
  (1 / stan::math::exp(1)), rep_array(1.0, 1), parms, std::vector<double>{
  0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_total_kat, FnMakeArray__(0.0), (1 / exp(1)),\n                   rep_array(1.0, 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 464;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_at_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_total_at(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_Pooled_at(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 467;
    k_bar = (1 / stan::math::exp(1));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 468;
    y_solve = rvalue(
                integrate_ode_rk45(U_Pooled_kat_functor__(), std::vector<double>{0.0},
  (1 / stan::math::exp(1)), rep_array(1.0, 1), parms, std::vector<double>{
  0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_Pooled_kat, FnMakeArray__(0.0), (1 / exp(1)),\n                   rep_array(1.0, 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 469;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_at_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_Pooled_at(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_host_at(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 472;
    k_bar = (1 / stan::math::exp(1));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 473;
    y_solve = rvalue(
                integrate_ode_rk45(U_host_kat_functor__(), std::vector<double>{0.0},
  (1 / stan::math::exp(1)), rep_array(1.0, 1), parms, std::vector<double>{
  0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_host_kat, FnMakeArray__(0.0), (1 / exp(1)),\n                   rep_array(1.0, 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 474;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_at_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_host_at(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_donor_at(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 477;
    k_bar = (1 / stan::math::exp(1));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 478;
    y_solve = rvalue(
                integrate_ode_rk45(U_donor_kat_functor__(), std::vector<double>{0.0},
  (1 / stan::math::exp(1)), rep_array(1.0, 1), parms, std::vector<double>{
  0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_donor_kat, FnMakeArray__(0.0), (1 / exp(1)),\n                   rep_array(1.0, 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 479;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_at_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_donor_at(parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
U_total_age(const T0__& age, const std::vector<T1__>& parms,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 483;
    assign(params, rvalue(parms, "parms", index_min_max(1, 5)),
      "assigning variable params", index_min_max(1, 5));
    current_statement__ = 484;
    assign(params, age, "assigning variable params", index_uni(6));
    current_statement__ = 485;
    return U_total_at(params, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_total_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
U_Pooled_age(const T0__& age, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(7, DUMMY_VAR__);
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 489;
    assign(params, rvalue(parms, "parms", index_min_max(1, 6)),
      "assigning variable params", index_min_max(1, 6));
    current_statement__ = 490;
    assign(params, age, "assigning variable params", index_uni(7));
    current_statement__ = 491;
    return U_Pooled_at(params, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_Pooled_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
U_host_age(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(7, DUMMY_VAR__);
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 495;
    assign(params, rvalue(parms, "parms", index_min_max(1, 6)),
      "assigning variable params", index_min_max(1, 6));
    current_statement__ = 496;
    assign(params, age, "assigning variable params", index_uni(7));
    current_statement__ = 497;
    return U_host_at(params, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_host_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
U_donor_age(const T0__& age, const std::vector<T1__>& parms,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(7, DUMMY_VAR__);
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 501;
    assign(params, rvalue(parms, "parms", index_min_max(1, 6)),
      "assigning variable params", index_min_max(1, 6));
    current_statement__ = 502;
    assign(params, age, "assigning variable params", index_uni(7));
    current_statement__ = 503;
    return U_donor_at(params, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_donor_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_total_ode(const T0__& age, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 505;
    time = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 506;
    value = U_total_age(age, parms, pstream__);
    current_statement__ = 507;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_total_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_Pooled_ode(const T0__& age, const std::vector<T1__>& y,
             const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 509;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 510;
    value = U_Pooled_age(age, parms, pstream__);
    current_statement__ = 511;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_Pooled_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_host_ode(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 513;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 514;
    value = U_host_age(age, parms, pstream__);
    current_statement__ = 515;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_host_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_donor_ode(const T0__& age, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 517;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 518;
    value = U_donor_age(age, parms, pstream__);
    current_statement__ = 519;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_donor_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_total_t(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 522;
    time = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 523;
    y_solve = rvalue(
                integrate_ode_rk45(U_total_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_total_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 524;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_t_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_total_t(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_Pooled_t(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 527;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 528;
    y_solve = rvalue(
                integrate_ode_rk45(U_Pooled_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_Pooled_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 529;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_t_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_Pooled_t(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_host_t(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 532;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 533;
    y_solve = rvalue(
                integrate_ode_rk45(U_host_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_host_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 534;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_t_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_host_t(parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_donor_t(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 537;
    time = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 538;
    y_solve = rvalue(
                integrate_ode_rk45(U_donor_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(time, 1), parms, std::vector<double>{0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_donor_ode, FnMakeArray__(0.0), 0.0, rep_array(time, 1),\n                   parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 539;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_t_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_donor_t(parms, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
U_total_time(const std::vector<T0__>& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 541;
    ndim = size(time);
    current_statement__ = 542;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    current_statement__ = 545;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 549;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 546;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 547;
      assign(y_solve, U_total_t(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 550;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_time_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const std::vector<T0__>& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_total_time(time, parms, pstream__);
}
};

template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
U_Pooled_time(const std::vector<T0__>& time, const std::vector<double>& tBMT,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 552;
    ndim = size(time);
    current_statement__ = 553;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 556;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 561;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 557;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 558;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 559;
      assign(y_solve, U_Pooled_t(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 562;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_Pooled_time_functor__ {
template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<double>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return U_Pooled_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
U_host_time(const std::vector<T0__>& time, const std::vector<double>& tBMT,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 564;
    ndim = size(time);
    current_statement__ = 565;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 568;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 573;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 569;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 570;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 571;
      assign(y_solve, U_host_t(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 574;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_host_time_functor__ {
template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<double>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return U_host_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
U_donor_time(const std::vector<T0__>& time, const std::vector<double>& tBMT,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 576;
    ndim = size(time);
    current_statement__ = 577;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 580;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 585;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 581;
      assign(params, rvalue(tBMT, "tBMT", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 582;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(6));
      current_statement__ = 583;
      assign(y_solve, U_donor_t(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 586;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_donor_time_functor__ {
template <typename T0__, typename T2__>
std::vector<stan::promote_args_t<T0__,
T2__>>
operator()(const std::vector<T0__>& time, const std::vector<double>& tBMT,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return U_donor_time(time, tBMT, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
math_reduce(const T0__& global_params_arg__, const T1__& local_params_arg__,
            const std::vector<T2__>& x_r, const std::vector<int>& x_i,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& global_params = to_ref(global_params_arg__);
  const auto& local_params = to_ref(local_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 588;
    n = size(x_i);
    int dat_t0;
    dat_t0 = std::numeric_limits<int>::min();
    
    current_statement__ = 589;
    dat_t0 = rvalue(x_i, "x_i", index_uni(1));
    current_statement__ = 590;
    validate_non_negative_index("ont_counts_mean", "n", n);
    std::vector<local_scalar_t__> ont_counts_mean;
    ont_counts_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 592;
    validate_non_negative_index("ont_ki_counts", "n", n);
    std::vector<local_scalar_t__> ont_ki_counts;
    ont_ki_counts = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    local_scalar_t__ ont_kiprop_mean;
    ont_kiprop_mean = DUMMY_VAR__;
    
    current_statement__ = 595;
    validate_non_negative_index("y_mean_stacked", "2 * n", (2 * n));
    Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
    y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>((2 * n));
    stan::math::fill(y_mean_stacked, DUMMY_VAR__);
    
    current_statement__ = 597;
    assign(ont_counts_mean,
      N_total_time(x_r, to_array_1d(global_params), pstream__),
      "assigning variable ont_counts_mean");
    current_statement__ = 598;
    assign(ont_ki_counts,
      U_total_time(x_r, to_array_1d(global_params), pstream__),
      "assigning variable ont_ki_counts");
    current_statement__ = 599;
    ont_kiprop_mean = (rvalue(ont_ki_counts, "ont_ki_counts", index_uni(1)) /
                        rvalue(ont_counts_mean, "ont_counts_mean",
                          index_uni(1)));
    current_statement__ = 600;
    assign(y_mean_stacked,
      rvalue(ont_counts_mean, "ont_counts_mean", index_uni(1)),
      "assigning variable y_mean_stacked", index_uni(1));
    current_statement__ = 601;
    assign(y_mean_stacked, ont_kiprop_mean,
      "assigning variable y_mean_stacked", index_uni(2));
    current_statement__ = 602;
    return y_mean_stacked;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct math_reduce_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& global_params, const T1__& local_params,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return math_reduce(global_params, local_params, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
logit_inverse(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ ans;
    ans = DUMMY_VAR__;
    
    current_statement__ = 605;
    ans = (stan::math::exp(x) / (1 + stan::math::exp(x)));
    current_statement__ = 606;
    return ans;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logit_inverse_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return logit_inverse(x, pstream__);
}
};

template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
asinsqrt_array(const std::vector<T0__>& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndims;
    ndims = std::numeric_limits<int>::min();
    
    current_statement__ = 608;
    ndims = size(x);
    current_statement__ = 609;
    validate_non_negative_index("answer", "ndims", ndims);
    std::vector<local_scalar_t__> answer;
    answer = std::vector<local_scalar_t__>(ndims, DUMMY_VAR__);
    
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 611;
    a = 1.2;
    current_statement__ = 614;
    for (int i = 1; i <= ndims; ++i) {
      current_statement__ = 612;
      assign(answer,
        stan::math::asin(
          (stan::math::sqrt(rvalue(x, "x", index_uni(i))) /
            stan::math::sqrt(a))), "assigning variable answer", index_uni(i));
    }
    current_statement__ = 615;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_array_functor__ {
template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
operator()(const std::vector<T0__>& x, std::ostream* pstream__)  const 
{
return asinsqrt_array(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_real(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 617;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 618;
    answer = stan::math::asin((stan::math::sqrt(x) / stan::math::sqrt(a)));
    current_statement__ = 619;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_real_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_real(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_inv(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 621;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 622;
    answer = (a * pow(stan::math::sin(x), 2));
    current_statement__ = 623;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_inv_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_inv(x, pstream__);
}
};

class MAP_asm_rhovar_cd8_model final : public model_base_crtp<MAP_asm_rhovar_cd8_model> {

 private:
  int numOnt;
  std::vector<double> ont_counts;
  std::vector<double> ont_ki;
  int numPred;
  std::vector<double> ts_pred_ont;
  int n_shards;
  std::vector<int> dat_t0;
  std::vector<int> dat_time;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<double>> x_r;
  std::vector<Eigen::Matrix<double, -1, 1>> local_params;
  int y_mean_stacked_1dim__;
 
 public:
  ~MAP_asm_rhovar_cd8_model() { }
  
  inline std::string model_name() const final { return "MAP_asm_rhovar_cd8_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 a7f4b745", "stancflags = "};
  }
  
  
  MAP_asm_rhovar_cd8_model(stan::io::var_context& context__,
                           unsigned int random_seed__ = 0,
                           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_rhovar_cd8_model_namespace::MAP_asm_rhovar_cd8_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization","numOnt","int",
          context__.to_vec());
      numOnt = std::numeric_limits<int>::min();
      
      current_statement__ = 47;
      numOnt = context__.vals_i("numOnt")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "numOnt", numOnt, 1);
      current_statement__ = 48;
      validate_non_negative_index("ont_counts", "numOnt", numOnt);
      current_statement__ = 49;
      context__.validate_dims("data initialization","ont_counts","double",
          context__.to_vec(numOnt));
      ont_counts = std::vector<double>(numOnt, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 49;
      assign(ont_counts, context__.vals_r("ont_counts"),
        "assigning variable ont_counts");
      current_statement__ = 49;
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        current_statement__ = 49;
        current_statement__ = 49;
        check_greater_or_equal(function__, "ont_counts[sym1__]",
                               ont_counts[(sym1__ - 1)], 0);}
      current_statement__ = 50;
      validate_non_negative_index("ont_ki", "numOnt", numOnt);
      current_statement__ = 51;
      context__.validate_dims("data initialization","ont_ki","double",
          context__.to_vec(numOnt));
      ont_ki = std::vector<double>(numOnt, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 51;
      assign(ont_ki, context__.vals_r("ont_ki"), "assigning variable ont_ki");
      current_statement__ = 51;
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        current_statement__ = 51;
        current_statement__ = 51;
        check_greater_or_equal(function__, "ont_ki[sym1__]",
                               ont_ki[(sym1__ - 1)], 0);}
      current_statement__ = 52;
      context__.validate_dims("data initialization","numPred","int",
          context__.to_vec());
      numPred = std::numeric_limits<int>::min();
      
      current_statement__ = 52;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 52;
      current_statement__ = 52;
      check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 53;
      validate_non_negative_index("ts_pred_ont", "numPred", numPred);
      current_statement__ = 54;
      context__.validate_dims("data initialization","ts_pred_ont","double",
          context__.to_vec(numPred));
      ts_pred_ont = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 54;
      assign(ts_pred_ont, context__.vals_r("ts_pred_ont"),
        "assigning variable ts_pred_ont");
      current_statement__ = 54;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 54;
        current_statement__ = 54;
        check_greater_or_equal(function__, "ts_pred_ont[sym1__]",
                               ts_pred_ont[(sym1__ - 1)], 0);}
      current_statement__ = 55;
      context__.validate_dims("data initialization","n_shards","int",
          context__.to_vec());
      n_shards = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 56;
      validate_non_negative_index("dat_t0", "n_shards", n_shards);
      current_statement__ = 57;
      context__.validate_dims("data initialization","dat_t0","int",
          context__.to_vec(n_shards));
      dat_t0 = std::vector<int>(n_shards, std::numeric_limits<int>::min());
      
      current_statement__ = 57;
      assign(dat_t0, context__.vals_i("dat_t0"), "assigning variable dat_t0");
      current_statement__ = 57;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 57;
        current_statement__ = 57;
        check_greater_or_equal(function__, "dat_t0[sym1__]",
                               dat_t0[(sym1__ - 1)], 0);}
      current_statement__ = 58;
      validate_non_negative_index("dat_time", "n_shards", n_shards);
      current_statement__ = 59;
      context__.validate_dims("data initialization","dat_time","int",
          context__.to_vec(n_shards));
      dat_time = std::vector<int>(n_shards, std::numeric_limits<int>::min());
      
      current_statement__ = 59;
      assign(dat_time, context__.vals_i("dat_time"),
        "assigning variable dat_time");
      current_statement__ = 59;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 59;
        current_statement__ = 59;
        check_greater_or_equal(function__, "dat_time[sym1__]",
                               dat_time[(sym1__ - 1)], 0);}
      current_statement__ = 60;
      validate_non_negative_index("x_i", "n_shards", n_shards);
      current_statement__ = 61;
      x_i = std::vector<std::vector<int>>(n_shards, std::vector<int>(1, std::numeric_limits<int>::min()));
      
      current_statement__ = 62;
      validate_non_negative_index("x_r", "n_shards", n_shards);
      current_statement__ = 63;
      x_r = std::vector<std::vector<double>>(n_shards, std::vector<double>(1, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 64;
      validate_non_negative_index("local_params", "n_shards", n_shards);
      current_statement__ = 65;
      local_params = std::vector<Eigen::Matrix<double, -1, 1>>(n_shards, Eigen::Matrix<double, -1, 1>(0));
      stan::math::fill(local_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 69;
      for (int s = 1; s <= n_shards; ++s) {
        current_statement__ = 66;
        assign(x_i, rvalue(dat_t0, "dat_t0", index_uni(s)),
          "assigning variable x_i", index_uni(s), index_uni(1));
        current_statement__ = 67;
        assign(x_r, rvalue(dat_time, "dat_time", index_uni(s)),
          "assigning variable x_r", index_uni(s), index_uni(1));}
      current_statement__ = 70;
      validate_non_negative_index("y1_mean", "numOnt", numOnt);
      current_statement__ = 71;
      validate_non_negative_index("y2_mean", "numOnt", numOnt);
      current_statement__ = 72;
      y_mean_stacked_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 72;
      y_mean_stacked_1dim__ = (2 * numOnt);
      current_statement__ = 73;
      validate_non_negative_index("y_mean_stacked", "(2 * numOnt)",
                                  y_mean_stacked_1dim__);
      current_statement__ = 74;
      validate_non_negative_index("y_ont_pred", "numPred", numPred);
      current_statement__ = 75;
      validate_non_negative_index("y1_mean_pred", "numPred", numPred);
      current_statement__ = 76;
      validate_non_negative_index("y2_mean_pred", "numPred", numPred);
      current_statement__ = 77;
      validate_non_negative_index("ontcounts_pred", "numPred", numPred);
      current_statement__ = 78;
      validate_non_negative_index("ontki_pred", "numPred", numPred);
      current_statement__ = 79;
      validate_non_negative_index("ont_ki_counts_pred", "numPred", numPred);
      current_statement__ = 80;
      validate_non_negative_index("log_lik_ont_counts", "numOnt", numOnt);
      current_statement__ = 81;
      validate_non_negative_index("log_lik_ont_ki", "numOnt", numOnt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_rhovar_cd8_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ N0;
      N0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E4, 2E6, lp__);
      } else {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E4, 2E6);
      }
      local_scalar_t__ delta;
      delta = DUMMY_VAR__;
      
      current_statement__ = 2;
      delta = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        delta = stan::math::lub_constrain(delta, 0.0, 1.0, lp__);
      } else {
        current_statement__ = 2;
        delta = stan::math::lub_constrain(delta, 0.0, 1.0);
      }
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      current_statement__ = 3;
      rho = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        rho = stan::math::lub_constrain(rho, 0.0, 1.0, lp__);
      } else {
        current_statement__ = 3;
        rho = stan::math::lub_constrain(rho, 0.0, 1.0);
      }
      local_scalar_t__ r_rho;
      r_rho = DUMMY_VAR__;
      
      current_statement__ = 4;
      r_rho = in__.scalar();
      local_scalar_t__ sigma_ont_counts;
      sigma_ont_counts = DUMMY_VAR__;
      
      current_statement__ = 5;
      sigma_ont_counts = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sigma_ont_counts = stan::math::lb_constrain(sigma_ont_counts, 0, lp__);
      } else {
        current_statement__ = 5;
        sigma_ont_counts = stan::math::lb_constrain(sigma_ont_counts, 0);
      }
      local_scalar_t__ sigma_ont_ki;
      sigma_ont_ki = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigma_ont_ki = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        sigma_ont_ki = stan::math::lb_constrain(sigma_ont_ki, 0, lp__);
      } else {
        current_statement__ = 6;
        sigma_ont_ki = stan::math::lb_constrain(sigma_ont_ki, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> global_params;
      global_params = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
      stan::math::fill(global_params, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y1_mean;
      y1_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numOnt);
      stan::math::fill(y1_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y2_mean;
      y2_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numOnt);
      stan::math::fill(y2_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, DUMMY_VAR__);
      
      current_statement__ = 11;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 12;
      assign(global_params, delta,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 13;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 14;
      assign(global_params, r_rho,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 15;
      assign(y_mean_stacked,
        map_rect<1, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 19;
      for (int i = 1; i <= numOnt; ++i) {
        current_statement__ = 16;
        assign(y1_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((2 * i) - 1))),
          "assigning variable y1_mean", index_uni(i));
        current_statement__ = 17;
        assign(y2_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni((2 * i))),
          "assigning variable y2_mean", index_uni(i));}
      {
        current_statement__ = 39;
        lp_accum__.add(normal_lpdf<propto__>(N0, 1E5, 3E4));
        current_statement__ = 40;
        lp_accum__.add(normal_lpdf<propto__>(delta, 0.05, 0.2));
        current_statement__ = 41;
        lp_accum__.add(normal_lpdf<propto__>(rho, 0.005, 0.2));
        current_statement__ = 42;
        lp_accum__.add(normal_lpdf<propto__>(r_rho, 0.01, 0.05));
        current_statement__ = 43;
        lp_accum__.add(normal_lpdf<propto__>(sigma_ont_counts, 0, 2));
        current_statement__ = 44;
        lp_accum__.add(normal_lpdf<propto__>(sigma_ont_ki, 0, 2));
        current_statement__ = 45;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log(ont_counts),
            stan::math::log(y1_mean), sigma_ont_counts));
        current_statement__ = 46;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(ont_ki, pstream__),
            asinsqrt_array(to_array_1d(y2_mean), pstream__), sigma_ont_ki));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_rhovar_cd8_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      N0 = stan::math::lub_constrain(N0, 1E4, 2E6);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta = in__.scalar();
      current_statement__ = 2;
      delta = stan::math::lub_constrain(delta, 0.0, 1.0);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho = in__.scalar();
      current_statement__ = 3;
      rho = stan::math::lub_constrain(rho, 0.0, 1.0);
      double r_rho;
      r_rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      r_rho = in__.scalar();
      double sigma_ont_counts;
      sigma_ont_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_ont_counts = in__.scalar();
      current_statement__ = 5;
      sigma_ont_counts = stan::math::lb_constrain(sigma_ont_counts, 0);
      double sigma_ont_ki;
      sigma_ont_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_ont_ki = in__.scalar();
      current_statement__ = 6;
      sigma_ont_ki = stan::math::lb_constrain(sigma_ont_ki, 0);
      Eigen::Matrix<double, -1, 1> global_params;
      global_params = Eigen::Matrix<double, -1, 1>(6);
      stan::math::fill(global_params, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y1_mean;
      y1_mean = Eigen::Matrix<double, -1, 1>(numOnt);
      stan::math::fill(y1_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y2_mean;
      y2_mean = Eigen::Matrix<double, -1, 1>(numOnt);
      stan::math::fill(y2_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<double, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(N0);
      vars__.emplace_back(delta);
      vars__.emplace_back(rho);
      vars__.emplace_back(r_rho);
      vars__.emplace_back(sigma_ont_counts);
      vars__.emplace_back(sigma_ont_ki);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 12;
      assign(global_params, delta,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 13;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 14;
      assign(global_params, r_rho,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 15;
      assign(y_mean_stacked,
        map_rect<2, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 19;
      for (int i = 1; i <= numOnt; ++i) {
        current_statement__ = 16;
        assign(y1_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((2 * i) - 1))),
          "assigning variable y1_mean", index_uni(i));
        current_statement__ = 17;
        assign(y2_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni((2 * i))),
          "assigning variable y2_mean", index_uni(i));}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          vars__.emplace_back(global_params[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
          vars__.emplace_back(y1_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
          vars__.emplace_back(y2_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
          vars__.emplace_back(y_mean_stacked[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_ont_pred;
      y_ont_pred = std::vector<std::vector<double>>(numPred, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<double> y1_mean_pred;
      y1_mean_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred;
      y2_mean_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ontcounts_pred;
      ontcounts_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ontki_pred;
      ontki_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ont_ki_counts_pred;
      ont_ki_counts_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ont_counts;
      log_lik_ont_counts = Eigen::Matrix<double, -1, 1>(numOnt);
      stan::math::fill(log_lik_ont_counts, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ont_ki;
      log_lik_ont_ki = Eigen::Matrix<double, -1, 1>(numOnt);
      stan::math::fill(log_lik_ont_ki, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 28;
      assign(y1_mean_pred,
        N_total_time(ts_pred_ont, to_array_1d(global_params), pstream__),
        "assigning variable y1_mean_pred");
      current_statement__ = 29;
      assign(ont_ki_counts_pred,
        U_total_time(ts_pred_ont, to_array_1d(global_params), pstream__),
        "assigning variable ont_ki_counts_pred");
      current_statement__ = 34;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 30;
        assign(ontcounts_pred,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred, "y1_mean_pred", index_uni(i))),
              sigma_ont_counts, base_rng__)),
          "assigning variable ontcounts_pred", index_uni(i));
        current_statement__ = 31;
        assign(y2_mean_pred,
          (rvalue(ont_ki_counts_pred, "ont_ki_counts_pred", index_uni(i)) /
            rvalue(y1_mean_pred, "y1_mean_pred", index_uni(i))),
          "assigning variable y2_mean_pred", index_uni(i));
        current_statement__ = 32;
        assign(ontki_pred,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y2_mean_pred, "y2_mean_pred", index_uni(i)), pstream__),
              sigma_ont_ki, base_rng__), pstream__),
          "assigning variable ontki_pred", index_uni(i));}
      current_statement__ = 38;
      for (int i = 1; i <= numOnt; ++i) {
        current_statement__ = 35;
        assign(log_lik_ont_counts,
          normal_lpdf<false>(
            stan::math::log(rvalue(ont_counts, "ont_counts", index_uni(i))),
            stan::math::log(rvalue(y1_mean, "y1_mean", index_uni(i))),
            sigma_ont_counts),
          "assigning variable log_lik_ont_counts", index_uni(i));
        current_statement__ = 36;
        assign(log_lik_ont_ki,
          normal_lpdf<false>(
            asinsqrt_real(rvalue(ont_ki, "ont_ki", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(y2_mean, "y2_mean", index_uni(i)), pstream__),
            sigma_ont_ki), "assigning variable log_lik_ont_ki", index_uni(i));
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_ont_pred[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ontcounts_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ontki_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ont_ki_counts_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        vars__.emplace_back(log_lik_ont_counts[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        vars__.emplace_back(log_lik_ont_ki[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = context__.vals_r("N0")[(1 - 1)];
      double N0_free__;
      N0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0_free__ = stan::math::lub_free(N0, 1E4, 2E6);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta = context__.vals_r("delta")[(1 - 1)];
      double delta_free__;
      delta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta_free__ = stan::math::lub_free(delta, 0.0, 1.0);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho = context__.vals_r("rho")[(1 - 1)];
      double rho_free__;
      rho_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho_free__ = stan::math::lub_free(rho, 0.0, 1.0);
      double r_rho;
      r_rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      r_rho = context__.vals_r("r_rho")[(1 - 1)];
      double sigma_ont_counts;
      sigma_ont_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_ont_counts = context__.vals_r("sigma_ont_counts")[(1 - 1)];
      double sigma_ont_counts_free__;
      sigma_ont_counts_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_ont_counts_free__ = stan::math::lb_free(sigma_ont_counts, 0);
      double sigma_ont_ki;
      sigma_ont_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_ont_ki = context__.vals_r("sigma_ont_ki")[(1 - 1)];
      double sigma_ont_ki_free__;
      sigma_ont_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_ont_ki_free__ = stan::math::lb_free(sigma_ont_ki, 0);
      vars__.emplace_back(N0_free__);
      vars__.emplace_back(delta_free__);
      vars__.emplace_back(rho_free__);
      vars__.emplace_back(r_rho);
      vars__.emplace_back(sigma_ont_counts_free__);
      vars__.emplace_back(sigma_ont_ki_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("N0");
    names__.emplace_back("delta");
    names__.emplace_back("rho");
    names__.emplace_back("r_rho");
    names__.emplace_back("sigma_ont_counts");
    names__.emplace_back("sigma_ont_ki");
    names__.emplace_back("global_params");
    names__.emplace_back("y1_mean");
    names__.emplace_back("y2_mean");
    names__.emplace_back("y_mean_stacked");
    names__.emplace_back("y_ont_pred");
    names__.emplace_back("y1_mean_pred");
    names__.emplace_back("y2_mean_pred");
    names__.emplace_back("ontcounts_pred");
    names__.emplace_back("ontki_pred");
    names__.emplace_back("ont_ki_counts_pred");
    names__.emplace_back("log_lik_ont_counts");
    names__.emplace_back("log_lik_ont_ki");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(6)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numOnt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numOnt)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_mean_stacked_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numOnt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numOnt)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "r_rho");
    param_names__.emplace_back(std::string() + "sigma_ont_counts");
    param_names__.emplace_back(std::string() + "sigma_ont_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_ont_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ontcounts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ontki_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ont_ki_counts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ont_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ont_ki" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "r_rho");
    param_names__.emplace_back(std::string() + "sigma_ont_counts");
    param_names__.emplace_back(std::string() + "sigma_ont_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_ont_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ontcounts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ontki_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ont_ki_counts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ont_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ont_ki" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ont_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ont_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 6 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_ont_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ontcounts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ontki_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ont_ki_counts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ont_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ont_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ont_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ont_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 6 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_ont_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ontcounts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ontki_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ont_ki_counts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ont_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ont_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = MAP_asm_rhovar_cd8_model_namespace::MAP_asm_rhovar_cd8_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return MAP_asm_rhovar_cd8_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, MAP_asm_rhovar_cd8_model_namespace::math_reduce_functor__)
STAN_REGISTER_MAP_RECT(2, MAP_asm_rhovar_cd8_model_namespace::math_reduce_functor__)