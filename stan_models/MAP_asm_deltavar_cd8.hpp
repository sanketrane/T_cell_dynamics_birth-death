
// Code generated by stanc a7f4b745
#include <stan/model/model_header.hpp>
namespace MAP_asm_deltavar_cd8_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 328> locations_array__ = 
{" (found before start of program)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 372, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 373, column 2 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 374, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 375, column 2 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 377, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 378, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 382, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 383, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 384, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 385, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 387, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 388, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 389, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 390, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 391, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 392, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 395, column 2 to column 80)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 398, column 4 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 399, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 397, column 23 to line 400, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 397, column 2 to line 400, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 417, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 418, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 419, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 420, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 421, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 424, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 425, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 428, column 2 to column 67)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 429, column 2 to column 69)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 432, column 3 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 433, column 3 to column 72)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 434, column 3 to column 76)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 431, column 23 to line 435, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 431, column 2 to line 435, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 439, column 4 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 440, column 4 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 438, column 22 to line 441, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 438, column 2 to line 441, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 404, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 405, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 406, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 407, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 409, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 410, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 412, column 2 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 413, column 2 to column 52)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 344, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 345, column 27 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 345, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 346, column 25 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 346, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 347, column 26 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 347, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 348, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 349, column 26 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 349, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 350, column 2 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 354, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 355, column 10 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 355, column 20 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 355, column 2 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 356, column 11 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 356, column 21 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 356, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 359, column 25 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 359, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 363, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 364, column 3 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 365, column 3 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 366, column 3 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 367, column 3 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 362, column 24 to line 368, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 362, column 2 to line 368, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 383, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 384, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 385, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 417, column 20 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 418, column 22 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 419, column 20 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 420, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 421, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 424, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 425, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 5, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 6, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 7, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 7, column 16 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 10, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 10, column 27 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 10, column 49 to column 62)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 10, column 65 to column 80)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 10, column 82 to column 96)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 12, column 4 to column 77)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 17, column 6 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 16, column 11 to line 18, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 15, column 6 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 14, column 17 to line 16, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 14, column 4 to line 18, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 19, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 4, column 29 to line 20, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 25, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 27, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 27, column 29 to column 53)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 27, column 54 to column 75)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 28, column 4 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 29, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 35, column 6 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 34, column 11 to line 36, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 33, column 6 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 32, column 18 to line 34, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 32, column 4 to line 36, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 37, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 24, column 28 to line 38, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 42, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 43, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 44, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 50, column 6 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 49, column 11 to line 51, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 48, column 6 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 47, column 30 to line 49, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 47, column 4 to line 51, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 52, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 41, column 37 to line 53, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 57, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 58, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 59, column 4 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 59, column 15 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 61, column 4 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 62, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 63, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 56, column 44 to line 64, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 68, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 69, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 70, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 71, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 80, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 79, column 11 to line 81, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 78, column 6 to column 50)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 77, column 45 to line 79, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 77, column 11 to line 81, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 76, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 75, column 46 to line 77, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 75, column 11 to line 81, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 74, column 6 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 73, column 29 to line 75, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 73, column 4 to line 81, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 82, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 67, column 54 to line 83, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 87, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 88, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 93, column 6 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 92, column 12 to line 94, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 91, column 6 to column 67)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 90, column 30 to line 92, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 90, column 4 to line 94, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 95, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 86, column 28 to line 96, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 100, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 101, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 102, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 99, column 38 to line 103, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 107, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 108, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 109, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 111, column 4 to column 106)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 112, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 106, column 59 to line 113, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 117, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 118, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 119, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 121, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 123, column 4 to column 106)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 124, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 116, column 58 to line 125, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 129, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 131, column 4 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 132, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 128, column 55 to line 133, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 138, column 5 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 139, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 136, column 57 to line 140, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 144, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 145, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 150, column 8 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 149, column 13 to line 151, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 148, column 6 to column 84)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 147, column 26 to line 149, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 147, column 4 to line 151, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 153, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 143, column 55 to line 154, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 157, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 158, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 160, column 4 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 162, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 156, column 82 to line 163, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 166, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 167, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 172, column 4 to column 107)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 173, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 165, column 40 to line 174, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 178, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 179, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 179, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 180, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 181, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 184, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 185, column 5 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 183, column 20 to line 186, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 183, column 3 to line 186, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 187, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 177, column 53 to line 188, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 192, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 193, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 194, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 195, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 200, column 6 to column 147)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 199, column 11 to line 201, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 198, column 6 to column 152)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 197, column 40 to line 199, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 197, column 4 to line 201, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 202, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 191, column 64 to line 203, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 207, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 208, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 209, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 210, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 215, column 6 to column 148)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 214, column 11 to line 216, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 213, column 6 to column 159)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 212, column 32 to line 214, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 212, column 4 to line 216, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 217, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 206, column 65 to line 218, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 222, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 223, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 224, column 4 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 225, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 230, column 6 to column 50)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 229, column 11 to line 231, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 228, column 6 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 227, column 24 to line 229, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 227, column 4 to line 231, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 232, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 221, column 76 to line 233, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 237, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 238, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 240, column 4 to column 112)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 241, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 236, column 31 to line 242, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 246, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 247, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 248, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 249, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 251, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 245, column 42 to line 252, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 256, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 257, column 4 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 259, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 255, column 77 to line 260, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 264, column 4 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 266, column 4 to column 112)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 267, column 4 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 263, column 30 to line 268, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 272, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 273, column 16 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 273, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 274, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 275, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 278, column 5 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 279, column 5 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 277, column 20 to line 280, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 277, column 3 to line 280, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 281, column 3 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 271, column 53 to line 282, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 286, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 287, column 18 to column 19)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 287, column 4 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 288, column 17 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 288, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 289, column 17 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 289, column 4 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 292, column 21 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 292, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 293, column 19 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 293, column 4 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 294, column 21 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 294, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 296, column 11 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 296, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 299, column 21 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 299, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 300, column 21 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 300, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 301, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 304, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 305, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 306, column 4 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 309, column 6 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 311, column 45 to column 65)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 311, column 66 to column 85)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 311, column 44 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 311, column 8 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 310, column 33 to line 312, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 310, column 6 to line 312, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 315, column 8 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 316, column 8 to column 52)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 317, column 8 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 314, column 27 to line 318, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 314, column 6 to line 318, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 308, column 19 to line 319, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 308, column 4 to line 319, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 322, column 4 to column 137)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 323, column 4 to column 135)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 326, column 6 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 325, column 31 to line 327, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 325, column 4 to line 327, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 330, column 6 to column 48)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 331, column 6 to column 48)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 329, column 18 to line 332, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 329, column 4 to line 332, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 335, column 8 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 336, column 8 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 334, column 18 to line 337, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 334, column 4 to line 337, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 339, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/MAP_asm_deltavar_cd8.stan', line 284, column 86 to line 340, column 3)"};


template <typename T0__>
stan::promote_args_t<T0__>
sp_numbers(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 85;
    t0 = 1.0;
    local_scalar_t__ dpt0;
    dpt0 = DUMMY_VAR__;
    
    current_statement__ = 86;
    dpt0 = (time - t0);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ fit1;
    fit1 = DUMMY_VAR__;
    
    local_scalar_t__ theta0;
    theta0 = DUMMY_VAR__;
    
    current_statement__ = 89;
    theta0 = 9E4;
    local_scalar_t__ theta_f;
    theta_f = DUMMY_VAR__;
    
    current_statement__ = 90;
    theta_f = 68.0;
    local_scalar_t__ n;
    n = DUMMY_VAR__;
    
    current_statement__ = 91;
    n = 3.0;
    local_scalar_t__ X;
    X = DUMMY_VAR__;
    
    current_statement__ = 92;
    X = 25.0;
    local_scalar_t__ q;
    q = DUMMY_VAR__;
    
    current_statement__ = 93;
    q = 4.25;
    current_statement__ = 94;
    fit1 = (theta0 +
             ((theta_f * pow(dpt0, n)) *
               (1 - (pow(dpt0, q) / (pow(X, q) + pow(dpt0, q))))));
    current_statement__ = 99;
    if (logical_lt(time, t0)) {
      current_statement__ = 97;
      value = fit1;
    } else {
      current_statement__ = 95;
      value = fit1;
    }
    current_statement__ = 100;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sp_numbers_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return sp_numbers(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
eps_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ eps_0;
    eps_0 = DUMMY_VAR__;
    
    current_statement__ = 103;
    eps_0 = 0.24510453;
    local_scalar_t__ eps_f;
    eps_f = DUMMY_VAR__;
    
    current_statement__ = 104;
    eps_f = 0.01559996;
    local_scalar_t__ A;
    A = DUMMY_VAR__;
    
    current_statement__ = 105;
    A = 14.83715328;
    local_scalar_t__ eps5;
    eps5 = DUMMY_VAR__;
    
    current_statement__ = 106;
    eps5 = (stan::math::exp((-eps_f * (5 + A))) + eps_0);
    local_scalar_t__ fit;
    fit = DUMMY_VAR__;
    
    current_statement__ = 112;
    if (logical_lte(time, 5)) {
      current_statement__ = 110;
      fit = eps5;
    } else {
      current_statement__ = 108;
      fit = (stan::math::exp((-eps_f * (time + A))) + eps_0);
    }
    current_statement__ = 113;
    return fit;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eps_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return eps_spline(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
g_age(const T0__& age, const std::vector<T1__>& parms,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 115;
    t0 = 1.0;
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 116;
    N0 = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 122;
    if ((primitive_value(logical_gte(age, 0)) && primitive_value(
        logical_lte(age, t0)))) {
      current_statement__ = 120;
      value = (N0 / t0);
    } else {
      current_statement__ = 118;
      value = 0;
    }
    current_statement__ = 123;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return g_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_spline(const T0__& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 125;
    N0 = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 126;
    t0 = 1.0;
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 129;
    psi = (g_age(0.0, parms, pstream__) / sp_numbers(t0, pstream__));
    current_statement__ = 130;
    value = (psi * sp_numbers(time, pstream__));
    current_statement__ = 131;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_spline_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return theta_spline(time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
ki_dist_theta(const T0__& ki, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 133;
    k_bar = (1 / stan::math::exp(1.0));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 135;
    t0 = 1.0;
    local_scalar_t__ r_ki_theta;
    r_ki_theta = DUMMY_VAR__;
    
    current_statement__ = 136;
    r_ki_theta = 0.9;
    current_statement__ = 147;
    if ((primitive_value(logical_gte(ki, 0)) && primitive_value(
        logical_lt(ki, k_bar)))) {
      current_statement__ = 145;
      value = ((1 - eps_spline(time, pstream__)) / k_bar);
    } else {
      current_statement__ = 144;
      if ((primitive_value(logical_gte(ki, k_bar)) && primitive_value(
          logical_lt(ki, r_ki_theta)))) {
        current_statement__ = 142;
        value = 0.0;
      } else {
        current_statement__ = 141;
        if ((primitive_value(logical_gte(ki, r_ki_theta)) && primitive_value(
            logical_lte(ki, 1.0)))) {
          current_statement__ = 139;
          value = (eps_spline(time, pstream__) / (1 - r_ki_theta));
        } else {
          current_statement__ = 137;
          value = 0.0;
        }
      }
    }
    current_statement__ = 148;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ki_dist_theta_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& ki, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return ki_dist_theta(ki, time, parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
ki_dist_init(const T0__& ki, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ r_ki_init;
    r_ki_init = DUMMY_VAR__;
    
    current_statement__ = 151;
    r_ki_init = 3.0;
    current_statement__ = 156;
    if ((primitive_value(logical_gte(ki, 0.0)) && primitive_value(
        logical_lte(ki, 1.0)))) {
      current_statement__ = 154;
      value = (stan::math::exp((ki * r_ki_init)) /
                ((stan::math::exp(r_ki_init) - 1) / r_ki_init));
    } else {
      current_statement__ = 152;
      value = 0.0;
    }
    current_statement__ = 157;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ki_dist_init_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& ki, std::ostream* pstream__)  const 
{
return ki_dist_init(ki, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
rho_age(const T0__& age, const std::vector<T1__>& parms,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 159;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 160;
    value = rho;
    current_statement__ = 161;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rho_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return rho_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
lambda_integ(const T0__& lo_lim, const T1__& up_lim,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ del0;
    del0 = DUMMY_VAR__;
    
    current_statement__ = 163;
    del0 = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 164;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ r_del;
    r_del = DUMMY_VAR__;
    
    current_statement__ = 165;
    r_del = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 166;
    value = (((del0 / r_del) *
               (stan::math::exp((-r_del * lo_lim)) -
                 stan::math::exp((-r_del * up_lim)))) -
              (rho * (up_lim - lo_lim)));
    current_statement__ = 167;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct lambda_integ_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& lo_lim, const T1__& up_lim,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return lambda_integ(lo_lim, up_lim, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
alpha_integ(const T0__& lo_lim, const T1__& up_lim,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ del0;
    del0 = DUMMY_VAR__;
    
    current_statement__ = 169;
    del0 = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 170;
    rho = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ r_del;
    r_del = DUMMY_VAR__;
    
    current_statement__ = 171;
    r_del = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ rho_time;
    rho_time = DUMMY_VAR__;
    
    current_statement__ = 172;
    rho_time = rho;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 173;
    value = (((del0 / r_del) *
               (stan::math::exp((-r_del * lo_lim)) -
                 stan::math::exp((-r_del * up_lim)))) +
              (rho * (up_lim - lo_lim)));
    current_statement__ = 174;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct alpha_integ_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& lo_lim, const T1__& up_lim,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return alpha_integ(lo_lim, up_lim, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_init_age(const T0__& age, const T1__& time,
             const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 176;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 177;
    value = (g_age(t0, parms, pstream__) *
              stan::math::exp(
                -lambda_integ(((age - time) + t0), age, parms, pstream__)));
    current_statement__ = 178;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_init_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_init_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_theta_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 180;
    value = (theta_spline((time - age), parms, pstream__) *
              stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    current_statement__ = 181;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_theta_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_theta_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
Asm_total_age(const T0__& age, const T1__& time,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 184;
    t0 = 1.0;
    current_statement__ = 189;
    if (logical_lt(age, (time - t0))) {
      current_statement__ = 187;
      value = (theta_spline((time - age), parms, pstream__) *
                stan::math::exp(-lambda_integ(0, age, parms, pstream__)));
    } else {
      current_statement__ = 185;
      value = (g_age(t0, parms, pstream__) *
                stan::math::exp(
                  -lambda_integ(((age - time) + t0), age, parms, pstream__)));
    }
    current_statement__ = 190;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Asm_total_age_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& age, const T1__& time, const std::vector<T2__>& parms,
           std::ostream* pstream__)  const 
{
return Asm_total_age(age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
asm_total_ode(const T0__& age, const std::vector<T1__>& y,
              const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
              const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 193;
    time = rvalue(parms, "parms", index_uni(5));
    current_statement__ = 194;
    value = Asm_total_age(age, time, parms, pstream__);
    current_statement__ = 195;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asm_total_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return asm_total_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
solve_total_counts(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 199;
    value = rvalue(
              integrate_ode_rk45(asm_total_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(rvalue(parms, "parms", index_uni(5)), 1), parms,
  std::vector<double>{0.0}, x_i, pstream__),
              "integrate_ode_rk45(asm_total_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(parms[5], 1), parms, FnMakeArray__(0.0), x_i)",
              index_uni(1), index_uni(1));
    current_statement__ = 200;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_total_counts_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return solve_total_counts(parms, pstream__);
}
};

template <typename T1__>
std::vector<stan::promote_args_t<T1__>>
N_total_time(const std::vector<double>& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 202;
    ndim = size(time);
    current_statement__ = 203;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    current_statement__ = 206;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 210;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 207;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 208;
      assign(y_solve, solve_total_counts(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 211;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct N_total_time_functor__ {
template <typename T1__>
std::vector<stan::promote_args_t<T1__>>
operator()(const std::vector<double>& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return N_total_time(time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
U_init_ki_age(const T0__& ki, const T1__& age, const T2__& time,
              const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 213;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 214;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 215;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 221;
    if (logical_lte(ki, stan::math::exp((-beta * (time - t0))))) {
      current_statement__ = 219;
      value = (((g_age(t0, parms, pstream__) *
                  ki_dist_init(
                    (ki * stan::math::exp((beta * (time - t0)))), pstream__))
                 * stan::math::exp((beta * (time - t0)))) *
                stan::math::exp(
                  -alpha_integ(((age - time) + t0), age, parms, pstream__)));
    } else {
      current_statement__ = 217;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_init_age((age - tau), (time - tau), parms, pstream__))
                 * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 222;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_init_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return U_init_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
U_theta_ki_age(const T0__& ki, const T1__& age, const T2__& time,
               const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 224;
    t0 = 1.0;
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 225;
    beta = (1 / 3.5);
    local_scalar_t__ tau;
    tau = DUMMY_VAR__;
    
    current_statement__ = 226;
    tau = (-stan::math::log(ki) / beta);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 232;
    if (logical_lte(ki, stan::math::exp((-beta * age)))) {
      current_statement__ = 230;
      value = (((theta_spline((time - age), parms, pstream__) *
                  ki_dist_theta((ki * stan::math::exp((beta * age))),
                    (time - age), parms, pstream__)) *
                 stan::math::exp((beta * age))) *
                stan::math::exp(-alpha_integ(0.0, age, parms, pstream__)));
    } else {
      current_statement__ = 228;
      value = ((((2.0 * rho_age(age, parms, pstream__)) *
                  Asm_theta_age((age - tau), (time - tau), parms, pstream__))
                 * (1 / (beta * ki))) *
                stan::math::exp(
                  -alpha_integ((age - tau), age, parms, pstream__)));
    }
    current_statement__ = 233;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_theta_ki_age_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ki, const T1__& age, const T2__& time,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return U_theta_ki_age(ki, age, time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_total_kat(const T0__& ki, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 235;
    time = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ age;
    age = DUMMY_VAR__;
    
    current_statement__ = 236;
    age = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 237;
    t0 = 1.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 243;
    if (logical_lt(age, (time - t0))) {
      current_statement__ = 241;
      value = U_theta_ki_age(ki, age, time, parms, pstream__);
    } else {
      current_statement__ = 239;
      value = U_init_ki_age(ki, age, time, parms, pstream__);
    }
    current_statement__ = 244;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_kat_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& ki, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_total_kat(ki, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_total_at(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ k_bar;
    k_bar = DUMMY_VAR__;
    
    current_statement__ = 247;
    k_bar = (1 / stan::math::exp(1));
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 248;
    y_solve = rvalue(
                integrate_ode_rk45(U_total_kat_functor__(), std::vector<double>{0.0},
  (1 / stan::math::exp(1)), rep_array(1.0, 1), parms, std::vector<double>{
  0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_total_kat, FnMakeArray__(0.0), (1 / exp(1)),\n                   rep_array(1.0, 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 249;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_at_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_total_at(parms, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
U_total_age(const T0__& age, const std::vector<T1__>& parms,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 253;
    assign(params, rvalue(parms, "parms", index_min_max(1, 5)),
      "assigning variable params", index_min_max(1, 5));
    current_statement__ = 254;
    assign(params, age, "assigning variable params", index_uni(6));
    current_statement__ = 255;
    return U_total_at(params, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_age_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& age, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_total_age(age, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
U_total_ode(const T0__& age, const std::vector<T1__>& y,
            const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ time;
    time = DUMMY_VAR__;
    
    current_statement__ = 257;
    time = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 258;
    value = U_total_age(age, parms, pstream__);
    current_statement__ = 259;
    return std::vector<local_scalar_t__>{value};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_ode_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& age, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return U_total_ode(age, y, parms, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
U_total_t(const std::vector<T0__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> x_i;
    x_i = std::vector<int>(0, std::numeric_limits<int>::min());
    
    local_scalar_t__ y_solve;
    y_solve = DUMMY_VAR__;
    
    current_statement__ = 262;
    y_solve = rvalue(
                integrate_ode_rk45(U_total_ode_functor__(), std::vector<double>{0.0}, 0.0,
  rep_array(rvalue(parms, "parms", index_uni(5)), 1), parms,
  std::vector<double>{0.0}, x_i, pstream__),
                "integrate_ode_rk45(U_total_ode, FnMakeArray__(0.0), 0.0,\n                   rep_array(parms[5], 1), parms, FnMakeArray__(0.0), x_i)",
                index_uni(1), index_uni(1));
    current_statement__ = 263;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_t_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& parms, std::ostream* pstream__)  const 
{
return U_total_t(parms, pstream__);
}
};

template <typename T1__>
std::vector<stan::promote_args_t<T1__>>
U_total_time(const std::vector<double>& time, const std::vector<T1__>& parms,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndim;
    ndim = std::numeric_limits<int>::min();
    
    current_statement__ = 265;
    ndim = size(time);
    current_statement__ = 266;
    validate_non_negative_index("y_solve", "ndim", ndim);
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(ndim, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    current_statement__ = 269;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 273;
    for (int i = 1; i <= ndim; ++i) {
      current_statement__ = 270;
      assign(params, rvalue(time, "time", index_uni(i)),
        "assigning variable params", index_uni(5));
      current_statement__ = 271;
      assign(y_solve, U_total_t(params, pstream__),
        "assigning variable y_solve", index_uni(i));}
    current_statement__ = 274;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct U_total_time_functor__ {
template <typename T1__>
std::vector<stan::promote_args_t<T1__>>
operator()(const std::vector<double>& time, const std::vector<T1__>& parms,
           std::ostream* pstream__)  const 
{
return U_total_time(time, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
math_reduce(const T0__& global_params_arg__, const T1__& local_params_arg__,
            const std::vector<T2__>& x_r, const std::vector<int>& x_i,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& global_params = to_ref(global_params_arg__);
  const auto& local_params = to_ref(local_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 276;
    n = size(x_i);
    current_statement__ = 277;
    validate_non_negative_index("data_time", "n", n);
    std::vector<int> data_time;
    data_time = std::vector<int>(n, std::numeric_limits<int>::min());
    
    current_statement__ = 278;
    assign(data_time, rvalue(x_i, "x_i", index_min_max(1, n)),
      "assigning variable data_time");
    current_statement__ = 279;
    validate_non_negative_index("y1_mean", "n", n);
    std::vector<local_scalar_t__> y1_mean;
    y1_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 281;
    validate_non_negative_index("y2_mean", "n", n);
    std::vector<local_scalar_t__> y2_mean;
    y2_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 283;
    validate_non_negative_index("counts_mean", "n", n);
    std::vector<local_scalar_t__> counts_mean;
    counts_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 285;
    validate_non_negative_index("ki_counts", "n", n);
    std::vector<local_scalar_t__> ki_counts;
    ki_counts = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 287;
    validate_non_negative_index("kiprop_mean", "n", n);
    std::vector<local_scalar_t__> kiprop_mean;
    kiprop_mean = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 289;
    validate_non_negative_index("y_mean_stacked", "2 * n", (2 * n));
    Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
    y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>((2 * n));
    stan::math::fill(y_mean_stacked, DUMMY_VAR__);
    
    current_statement__ = 291;
    validate_non_negative_index("time_uniques", "n", n);
    std::vector<int> time_uniques;
    time_uniques = std::vector<int>(n, std::numeric_limits<int>::min());
    
    current_statement__ = 293;
    validate_non_negative_index("time_indices", "n", n);
    std::vector<int> time_indices;
    time_indices = std::vector<int>(n, std::numeric_limits<int>::min());
    
    int already_exists;
    already_exists = std::numeric_limits<int>::min();
    
    int number_uniques;
    number_uniques = std::numeric_limits<int>::min();
    
    current_statement__ = 296;
    number_uniques = 1;
    current_statement__ = 297;
    assign(time_uniques, rvalue(data_time, "data_time", index_uni(1)),
      "assigning variable time_uniques", index_uni(1));
    current_statement__ = 298;
    assign(time_indices, 1, "assigning variable time_indices", index_uni(1));
    current_statement__ = 312;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 299;
      already_exists = 0;
      current_statement__ = 305;
      for (int j = 1; j <= number_uniques; ++j) {
        current_statement__ = 303;
        if (logical_eq(rvalue(time_uniques, "time_uniques", index_uni(j)),
              rvalue(data_time, "data_time", index_uni(i)))) {
          current_statement__ = 300;
          assign(time_indices, j,
            "assigning variable time_indices", index_uni(i));
          current_statement__ = 301;
          already_exists = 1;
        } }
      current_statement__ = 310;
      if (logical_eq(already_exists, 0)) {
        current_statement__ = 306;
        number_uniques = (number_uniques + 1);
        current_statement__ = 307;
        assign(time_uniques, rvalue(data_time, "data_time", index_uni(i)),
          "assigning variable time_uniques", index_uni(number_uniques));
        current_statement__ = 308;
        assign(time_indices, number_uniques,
          "assigning variable time_indices", index_uni(i));
      } }
    current_statement__ = 313;
    assign(counts_mean,
      N_total_time(
        to_array_1d(
          divide(
            to_vector(
              rvalue(time_uniques, "time_uniques",
                index_min_max(1, number_uniques))), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable counts_mean", index_min_max(1, number_uniques));
    current_statement__ = 314;
    assign(ki_counts,
      U_total_time(
        to_array_1d(
          divide(
            to_vector(
              rvalue(time_uniques, "time_uniques",
                index_min_max(1, number_uniques))), 1.0)),
        to_array_1d(global_params), pstream__),
      "assigning variable ki_counts", index_min_max(1, number_uniques));
    current_statement__ = 317;
    for (int i = 1; i <= number_uniques; ++i) {
      current_statement__ = 315;
      assign(kiprop_mean,
        (rvalue(ki_counts, "ki_counts", index_uni(i)) /
          rvalue(counts_mean, "counts_mean", index_uni(i))),
        "assigning variable kiprop_mean", index_uni(i));}
    current_statement__ = 321;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 318;
      assign(y1_mean,
        rvalue(counts_mean, "counts_mean",
          index_uni(rvalue(time_indices, "time_indices", index_uni(i)))),
        "assigning variable y1_mean", index_uni(i));
      current_statement__ = 319;
      assign(y2_mean,
        rvalue(kiprop_mean, "kiprop_mean",
          index_uni(rvalue(time_indices, "time_indices", index_uni(i)))),
        "assigning variable y2_mean", index_uni(i));}
    current_statement__ = 325;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 322;
      assign(y_mean_stacked, rvalue(y1_mean, "y1_mean", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni(i));
      current_statement__ = 323;
      assign(y_mean_stacked, rvalue(y2_mean, "y2_mean", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni((i + n)));}
    current_statement__ = 326;
    return y_mean_stacked;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct math_reduce_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& global_params, const T1__& local_params,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return math_reduce(global_params, local_params, x_r, x_i, pstream__);
}
};

class MAP_asm_deltavar_cd8_model final : public model_base_crtp<MAP_asm_deltavar_cd8_model> {

 private:
  int numObs;
  std::vector<int> data_time;
  std::vector<double> counts;
  std::vector<double> ki_prop;
  int numPred;
  std::vector<double> ts_pred;
  int n_shards;
  int M;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<double>> x_r;
  std::vector<Eigen::Matrix<double, -1, 1>> local_params;
 
 public:
  ~MAP_asm_deltavar_cd8_model() { }
  
  inline std::string model_name() const final { return "MAP_asm_deltavar_cd8_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 a7f4b745", "stancflags = "};
  }
  
  
  MAP_asm_deltavar_cd8_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_deltavar_cd8_model_namespace::MAP_asm_deltavar_cd8_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 48;
      context__.validate_dims("data initialization","numObs","int",
          context__.to_vec());
      numObs = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      numObs = context__.vals_i("numObs")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "numObs", numObs, 1);
      current_statement__ = 49;
      validate_non_negative_index("data_time", "numObs", numObs);
      current_statement__ = 50;
      context__.validate_dims("data initialization","data_time","int",
          context__.to_vec(numObs));
      data_time = std::vector<int>(numObs, std::numeric_limits<int>::min());
      
      current_statement__ = 50;
      assign(data_time, context__.vals_i("data_time"),
        "assigning variable data_time");
      current_statement__ = 50;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 50;
        current_statement__ = 50;
        check_greater_or_equal(function__, "data_time[sym1__]",
                               data_time[(sym1__ - 1)], 0);}
      current_statement__ = 51;
      validate_non_negative_index("counts", "numObs", numObs);
      current_statement__ = 52;
      context__.validate_dims("data initialization","counts","double",
          context__.to_vec(numObs));
      counts = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 52;
      assign(counts, context__.vals_r("counts"), "assigning variable counts");
      current_statement__ = 52;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 52;
        current_statement__ = 52;
        check_greater_or_equal(function__, "counts[sym1__]",
                               counts[(sym1__ - 1)], 0);}
      current_statement__ = 53;
      validate_non_negative_index("ki_prop", "numObs", numObs);
      current_statement__ = 54;
      context__.validate_dims("data initialization","ki_prop","double",
          context__.to_vec(numObs));
      ki_prop = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 54;
      assign(ki_prop, context__.vals_r("ki_prop"),
        "assigning variable ki_prop");
      current_statement__ = 54;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 54;
        current_statement__ = 54;
        check_greater_or_equal(function__, "ki_prop[sym1__]",
                               ki_prop[(sym1__ - 1)], 0);}
      current_statement__ = 55;
      context__.validate_dims("data initialization","numPred","int",
          context__.to_vec());
      numPred = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 55;
      current_statement__ = 55;
      check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 56;
      validate_non_negative_index("ts_pred", "numPred", numPred);
      current_statement__ = 57;
      context__.validate_dims("data initialization","ts_pred","double",
          context__.to_vec(numPred));
      ts_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 57;
      assign(ts_pred, context__.vals_r("ts_pred"),
        "assigning variable ts_pred");
      current_statement__ = 57;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 57;
        current_statement__ = 57;
        check_greater_or_equal(function__, "ts_pred[sym1__]",
                               ts_pred[(sym1__ - 1)], 0);}
      current_statement__ = 58;
      context__.validate_dims("data initialization","n_shards","int",
          context__.to_vec());
      n_shards = std::numeric_limits<int>::min();
      
      current_statement__ = 58;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 59;
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 59;
      M = (numObs / n_shards);
      current_statement__ = 60;
      validate_non_negative_index("x_i", "n_shards", n_shards);
      current_statement__ = 61;
      validate_non_negative_index("x_i", "M", M);
      current_statement__ = 62;
      x_i = std::vector<std::vector<int>>(n_shards, std::vector<int>(M, std::numeric_limits<int>::min()));
      
      current_statement__ = 63;
      validate_non_negative_index("x_r", "n_shards", n_shards);
      current_statement__ = 64;
      validate_non_negative_index("x_r", "2 * M", (2 * M));
      current_statement__ = 65;
      x_r = std::vector<std::vector<double>>(n_shards, std::vector<double>(
        (2 * M), std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 66;
      validate_non_negative_index("local_params", "n_shards", n_shards);
      current_statement__ = 67;
      local_params = std::vector<Eigen::Matrix<double, -1, 1>>(n_shards, Eigen::Matrix<double, -1, 1>(0));
      stan::math::fill(local_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 74;
      for (int s = 1; s <= n_shards; ++s) {
        int i;
        i = std::numeric_limits<int>::min();
        
        current_statement__ = 68;
        i = (1 + ((s - 1) * M));
        int j;
        j = std::numeric_limits<int>::min();
        
        current_statement__ = 69;
        j = (s * M);
        current_statement__ = 70;
        assign(x_i, rvalue(data_time, "data_time", index_min_max(i, j)),
          "assigning variable x_i", index_uni(s), index_min_max(1, M));
        current_statement__ = 71;
        assign(x_r,
          stan::math::log(rvalue(counts, "counts", index_min_max(i, j))),
          "assigning variable x_r", index_uni(s), index_min_max(1, M));
        current_statement__ = 72;
        assign(x_r, logit(rvalue(ki_prop, "ki_prop", index_min_max(i, j))),
          "assigning variable x_r", index_uni(s),
                                      index_min_max((M + 1), (2 * M)));}
      current_statement__ = 75;
      validate_non_negative_index("y1_mean", "numObs", numObs);
      current_statement__ = 76;
      validate_non_negative_index("y2_mean", "numObs", numObs);
      current_statement__ = 77;
      validate_non_negative_index("y_mean_stacked", "numObs", numObs);
      current_statement__ = 78;
      validate_non_negative_index("y1_mean_pred", "numPred", numPred);
      current_statement__ = 79;
      validate_non_negative_index("ki_counts_pred", "numPred", numPred);
      current_statement__ = 80;
      validate_non_negative_index("y2_mean_pred", "numPred", numPred);
      current_statement__ = 81;
      validate_non_negative_index("counts_pred", "numPred", numPred);
      current_statement__ = 82;
      validate_non_negative_index("kiprop_pred", "numPred", numPred);
      current_statement__ = 83;
      validate_non_negative_index("log_lik_counts", "numObs", numObs);
      current_statement__ = 84;
      validate_non_negative_index("log_lik_ki", "numObs", numObs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_deltavar_cd8_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ N0;
      N0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E4, 2E6, lp__);
      } else {
        current_statement__ = 1;
        N0 = stan::math::lub_constrain(N0, 1E4, 2E6);
      }
      local_scalar_t__ delta;
      delta = DUMMY_VAR__;
      
      current_statement__ = 2;
      delta = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        delta = stan::math::lub_constrain(delta, 0.001, 0.5, lp__);
      } else {
        current_statement__ = 2;
        delta = stan::math::lub_constrain(delta, 0.001, 0.5);
      }
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      current_statement__ = 3;
      rho = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        rho = stan::math::lub_constrain(rho, 0.001, 0.5, lp__);
      } else {
        current_statement__ = 3;
        rho = stan::math::lub_constrain(rho, 0.001, 0.5);
      }
      local_scalar_t__ r_del;
      r_del = DUMMY_VAR__;
      
      current_statement__ = 4;
      r_del = in__.scalar();
      local_scalar_t__ sigma_counts;
      sigma_counts = DUMMY_VAR__;
      
      current_statement__ = 5;
      sigma_counts = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sigma_counts = stan::math::lb_constrain(sigma_counts, 0, lp__);
      } else {
        current_statement__ = 5;
        sigma_counts = stan::math::lb_constrain(sigma_counts, 0);
      }
      local_scalar_t__ sigma_ki;
      sigma_ki = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigma_ki = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        sigma_ki = stan::math::lb_constrain(sigma_ki, 0, lp__);
      } else {
        current_statement__ = 6;
        sigma_ki = stan::math::lb_constrain(sigma_ki, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> global_params;
      global_params = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
      stan::math::fill(global_params, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y1_mean;
      y1_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs);
      stan::math::fill(y1_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y2_mean;
      y2_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs);
      stan::math::fill(y2_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs);
      stan::math::fill(y_mean_stacked, DUMMY_VAR__);
      
      current_statement__ = 11;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 12;
      assign(global_params, delta,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 13;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 14;
      assign(global_params, r_del,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 15;
      assign(global_params, sigma_counts,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 16;
      assign(global_params, sigma_ki,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 17;
      assign(y_mean_stacked,
        map_rect<1, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 21;
      for (int s = 1; s <= n_shards; ++s) {
        current_statement__ = 18;
        assign(y1_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_min_max((1 + (((s - 1) * 2) * M)), (M +
                                                       (((s - 1) * 2) * M)))),
          "assigning variable y1_mean", index_min_max((1 + ((s - 1) * M)), 
                                          (s * M)));
        current_statement__ = 19;
        assign(y2_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_min_max(((M + 1) + (((s - 1) * 2) * M)), ((s * 2) * M))),
          "assigning variable y2_mean", index_min_max((1 + ((s - 1) * M)), 
                                          (s * M)));}
      {
        current_statement__ = 40;
        lp_accum__.add(normal_lpdf<propto__>(N0, 1E5, 3E4));
        current_statement__ = 41;
        lp_accum__.add(normal_lpdf<propto__>(delta, 0.05, 0.2));
        current_statement__ = 42;
        lp_accum__.add(normal_lpdf<propto__>(rho, 0.005, 0.2));
        current_statement__ = 43;
        lp_accum__.add(normal_lpdf<propto__>(r_del, 0.0, 0.2));
        current_statement__ = 44;
        lp_accum__.add(normal_lpdf<propto__>(sigma_counts, 0, 2));
        current_statement__ = 45;
        lp_accum__.add(normal_lpdf<propto__>(sigma_ki, 0, 2));
        current_statement__ = 46;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log(counts),
            stan::math::log(y1_mean), sigma_counts));
        current_statement__ = 47;
        lp_accum__.add(
          normal_lpdf<propto__>(logit(ki_prop), logit(y2_mean), sigma_ki));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_asm_deltavar_cd8_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = in__.scalar();
      current_statement__ = 1;
      N0 = stan::math::lub_constrain(N0, 1E4, 2E6);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta = in__.scalar();
      current_statement__ = 2;
      delta = stan::math::lub_constrain(delta, 0.001, 0.5);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho = in__.scalar();
      current_statement__ = 3;
      rho = stan::math::lub_constrain(rho, 0.001, 0.5);
      double r_del;
      r_del = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      r_del = in__.scalar();
      double sigma_counts;
      sigma_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_counts = in__.scalar();
      current_statement__ = 5;
      sigma_counts = stan::math::lb_constrain(sigma_counts, 0);
      double sigma_ki;
      sigma_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_ki = in__.scalar();
      current_statement__ = 6;
      sigma_ki = stan::math::lb_constrain(sigma_ki, 0);
      Eigen::Matrix<double, -1, 1> global_params;
      global_params = Eigen::Matrix<double, -1, 1>(6);
      stan::math::fill(global_params, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y1_mean;
      y1_mean = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(y1_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y2_mean;
      y2_mean = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(y2_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(y_mean_stacked, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(N0);
      vars__.emplace_back(delta);
      vars__.emplace_back(rho);
      vars__.emplace_back(r_del);
      vars__.emplace_back(sigma_counts);
      vars__.emplace_back(sigma_ki);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 12;
      assign(global_params, delta,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 13;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 14;
      assign(global_params, r_del,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 15;
      assign(global_params, sigma_counts,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 16;
      assign(global_params, sigma_ki,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 17;
      assign(y_mean_stacked,
        map_rect<2, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 21;
      for (int s = 1; s <= n_shards; ++s) {
        current_statement__ = 18;
        assign(y1_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_min_max((1 + (((s - 1) * 2) * M)), (M +
                                                       (((s - 1) * 2) * M)))),
          "assigning variable y1_mean", index_min_max((1 + ((s - 1) * M)), 
                                          (s * M)));
        current_statement__ = 19;
        assign(y2_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_min_max(((M + 1) + (((s - 1) * 2) * M)), ((s * 2) * M))),
          "assigning variable y2_mean", index_min_max((1 + ((s - 1) * M)), 
                                          (s * M)));}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          vars__.emplace_back(global_params[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(y1_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(y2_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(y_mean_stacked[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> y1_mean_pred;
      y1_mean_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_counts_pred;
      ki_counts_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred;
      y2_mean_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> counts_pred;
      counts_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> kiprop_pred;
      kiprop_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_counts;
      log_lik_counts = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik_counts, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ki;
      log_lik_ki = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik_ki, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 29;
      assign(y1_mean_pred,
        N_total_time(ts_pred, to_array_1d(global_params), pstream__),
        "assigning variable y1_mean_pred");
      current_statement__ = 30;
      assign(ki_counts_pred,
        U_total_time(ts_pred, to_array_1d(global_params), pstream__),
        "assigning variable ki_counts_pred");
      current_statement__ = 35;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 31;
        assign(y2_mean_pred,
          (rvalue(ki_counts_pred, "ki_counts_pred", index_uni(i)) /
            rvalue(y1_mean_pred, "y1_mean_pred", index_uni(i))),
          "assigning variable y2_mean_pred", index_uni(i));
        current_statement__ = 32;
        assign(counts_pred,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred, "y1_mean_pred", index_uni(i))),
              sigma_counts, base_rng__)),
          "assigning variable counts_pred", index_uni(i));
        current_statement__ = 33;
        assign(kiprop_pred,
          inv_logit(
            normal_rng(
              logit(rvalue(y2_mean_pred, "y2_mean_pred", index_uni(i))),
              sigma_ki, base_rng__)),
          "assigning variable kiprop_pred", index_uni(i));}
      current_statement__ = 39;
      for (int i = 1; i <= numObs; ++i) {
        current_statement__ = 36;
        assign(log_lik_counts,
          normal_lpdf<false>(
            stan::math::log(rvalue(counts, "counts", index_uni(i))),
            stan::math::log(rvalue(y1_mean, "y1_mean", index_uni(i))),
            sigma_counts), "assigning variable log_lik_counts", index_uni(i));
        current_statement__ = 37;
        assign(log_lik_ki,
          normal_lpdf<false>(logit(rvalue(ki_prop, "ki_prop", index_uni(i))),
            logit(rvalue(y2_mean, "y2_mean", index_uni(i))), sigma_ki),
          "assigning variable log_lik_ki", index_uni(i));}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_counts_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(kiprop_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik_counts[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik_ki[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0 = context__.vals_r("N0")[(1 - 1)];
      double N0_free__;
      N0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0_free__ = stan::math::lub_free(N0, 1E4, 2E6);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta = context__.vals_r("delta")[(1 - 1)];
      double delta_free__;
      delta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta_free__ = stan::math::lub_free(delta, 0.001, 0.5);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho = context__.vals_r("rho")[(1 - 1)];
      double rho_free__;
      rho_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      rho_free__ = stan::math::lub_free(rho, 0.001, 0.5);
      double r_del;
      r_del = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      r_del = context__.vals_r("r_del")[(1 - 1)];
      double sigma_counts;
      sigma_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_counts = context__.vals_r("sigma_counts")[(1 - 1)];
      double sigma_counts_free__;
      sigma_counts_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_counts_free__ = stan::math::lb_free(sigma_counts, 0);
      double sigma_ki;
      sigma_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_ki = context__.vals_r("sigma_ki")[(1 - 1)];
      double sigma_ki_free__;
      sigma_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_ki_free__ = stan::math::lb_free(sigma_ki, 0);
      vars__.emplace_back(N0_free__);
      vars__.emplace_back(delta_free__);
      vars__.emplace_back(rho_free__);
      vars__.emplace_back(r_del);
      vars__.emplace_back(sigma_counts_free__);
      vars__.emplace_back(sigma_ki_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("N0");
    names__.emplace_back("delta");
    names__.emplace_back("rho");
    names__.emplace_back("r_del");
    names__.emplace_back("sigma_counts");
    names__.emplace_back("sigma_ki");
    names__.emplace_back("global_params");
    names__.emplace_back("y1_mean");
    names__.emplace_back("y2_mean");
    names__.emplace_back("y_mean_stacked");
    names__.emplace_back("y1_mean_pred");
    names__.emplace_back("ki_counts_pred");
    names__.emplace_back("y2_mean_pred");
    names__.emplace_back("counts_pred");
    names__.emplace_back("kiprop_pred");
    names__.emplace_back("log_lik_counts");
    names__.emplace_back("log_lik_ki");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(6)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "r_del");
    param_names__.emplace_back(std::string() + "sigma_counts");
    param_names__.emplace_back(std::string() + "sigma_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_counts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kiprop_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "r_del");
    param_names__.emplace_back(std::string() + "sigma_counts");
    param_names__.emplace_back(std::string() + "sigma_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_counts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kiprop_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_del\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 6 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_counts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"kiprop_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_del\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 6 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_counts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"kiprop_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = MAP_asm_deltavar_cd8_model_namespace::MAP_asm_deltavar_cd8_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return MAP_asm_deltavar_cd8_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, MAP_asm_deltavar_cd8_model_namespace::math_reduce_functor__)
STAN_REGISTER_MAP_RECT(2, MAP_asm_deltavar_cd8_model_namespace::math_reduce_functor__)