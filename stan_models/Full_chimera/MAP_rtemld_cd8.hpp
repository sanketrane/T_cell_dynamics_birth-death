
// Code generated by stanc a7f4b745
#include <stan/model/model_header.hpp>
namespace MAP_rtemld_cd8_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 411> locations_array__ = 
{" (found before start of program)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 314, column 4 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 315, column 4 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 316, column 4 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 317, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 318, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 319, column 4 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 320, column 4 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 321, column 4 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 323, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 324, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 325, column 4 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 326, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 327, column 4 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 328, column 4 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 332, column 4 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 333, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 334, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 335, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 336, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 337, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 338, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 339, column 4 to column 45)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 341, column 4 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 342, column 4 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 343, column 4 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 344, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 345, column 4 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 346, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 347, column 4 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 348, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 351, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 354, column 6 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 355, column 6 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 353, column 23 to line 356, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 353, column 4 to line 356, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 359, column 6 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 360, column 6 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 361, column 6 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 362, column 6 to column 51)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 358, column 23 to line 363, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 358, column 4 to line 363, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 394, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 395, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 396, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 397, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 399, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 399, column 31 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 400, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 400, column 34 to column 59)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 402, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 402, column 32 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 402, column 61 to column 89)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 402, column 91 to column 119)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 403, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 403, column 32 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 403, column 61 to column 89)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 403, column 91 to column 119)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 404, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 404, column 32 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 404, column 61 to column 89)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 404, column 91 to column 119)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 406, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 406, column 33 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 407, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 407, column 33 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 408, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 408, column 33 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 410, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 410, column 31 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 411, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 411, column 31 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 412, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 412, column 31 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 415, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 416, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 417, column 2 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 418, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 419, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 420, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 423, column 2 to column 20)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 424, column 2 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 425, column 2 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 426, column 2 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 427, column 2 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 430, column 2 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 431, column 2 to column 93)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 432, column 2 to column 93)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 433, column 2 to column 93)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 436, column 4 to column 96)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 437, column 4 to column 78)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 439, column 4 to column 80)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 440, column 4 to column 91)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 442, column 4 to column 181)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 443, column 4 to column 181)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 444, column 4 to column 181)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 446, column 4 to column 157)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 447, column 4 to column 157)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 448, column 4 to column 157)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 450, column 4 to column 143)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 451, column 4 to column 143)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 452, column 4 to column 143)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 454, column 4 to column 143)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 455, column 4 to column 143)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 456, column 4 to column 143)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 458, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 459, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 460, column 4 to column 82)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 462, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 463, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 464, column 4 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 466, column 4 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 467, column 4 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 468, column 4 to column 97)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 470, column 4 to column 95)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 471, column 4 to column 95)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 472, column 4 to column 95)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 435, column 22 to line 474, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 435, column 2 to line 474, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 478, column 4 to column 96)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 479, column 4 to column 108)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 477, column 22 to line 480, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 477, column 2 to line 480, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 484, column 4 to column 96)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 485, column 4 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 486, column 4 to column 112)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 487, column 4 to column 110)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 483, column 22 to line 488, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 483, column 2 to line 488, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 367, column 2 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 368, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 369, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 370, column 2 to column 33)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 371, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 372, column 2 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 374, column 2 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 375, column 2 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 377, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 378, column 2 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 379, column 2 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 380, column 2 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 381, column 2 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 382, column 2 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 384, column 2 to column 59)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 385, column 2 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 387, column 2 to column 59)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 388, column 2 to column 75)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 389, column 2 to column 90)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 390, column 2 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 278, column 5 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 279, column 32 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 279, column 5 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 280, column 28 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 280, column 5 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 281, column 5 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 282, column 32 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 282, column 5 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 283, column 38 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 283, column 5 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 284, column 30 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 284, column 5 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 285, column 29 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 285, column 5 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 286, column 5 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 287, column 33 to column 40)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 287, column 5 to column 42)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 288, column 34 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 288, column 5 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 289, column 34 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 289, column 5 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 290, column 34 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 290, column 5 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 291, column 30 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 291, column 5 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 292, column 30 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 292, column 5 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 293, column 30 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 293, column 5 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 294, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 295, column 27 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 295, column 5 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 296, column 29 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 296, column 5 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 300, column 13 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 300, column 5 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 301, column 14 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 301, column 5 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 304, column 28 to column 36)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 304, column 5 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 308, column 6 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 309, column 6 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 307, column 26 to line 310, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 307, column 5 to line 310, column 6)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 333, column 11 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 334, column 11 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 335, column 11 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 336, column 11 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 337, column 11 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 338, column 11 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 339, column 11 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 394, column 18 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 395, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 396, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 397, column 19 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 399, column 20 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 399, column 49 to column 56)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 400, column 22 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 400, column 50 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 402, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 402, column 51 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 402, column 80 to column 87)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 402, column 110 to column 117)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 403, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 403, column 51 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 403, column 80 to column 87)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 403, column 110 to column 117)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 404, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 404, column 51 to column 58)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 404, column 80 to column 87)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 404, column 110 to column 117)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 406, column 23 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 406, column 48 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 407, column 23 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 407, column 48 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 408, column 23 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 408, column 48 to column 55)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 410, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 410, column 49 to column 56)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 411, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 411, column 49 to column 56)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 412, column 21 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 412, column 49 to column 56)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 415, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 416, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 417, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 418, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 419, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 420, column 9 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 5, column 3 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 6, column 3 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 7, column 3 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 7, column 15 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 10, column 3 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 10, column 26 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 10, column 48 to column 61)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 10, column 64 to column 79)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 10, column 81 to column 95)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 12, column 3 to column 76)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 17, column 5 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 16, column 10 to line 18, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 15, column 5 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 14, column 16 to line 16, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 14, column 3 to line 18, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 19, column 3 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 4, column 28 to line 20, column 2)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 24, column 3 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 26, column 3 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 27, column 3 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 23, column 39 to line 28, column 2)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 33, column 3 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 35, column 3 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 35, column 28 to column 52)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 35, column 53 to column 74)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 37, column 3 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 39, column 3 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 32, column 27 to line 40, column 2)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 45, column 3 to column 12)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 46, column 3 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 47, column 3 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 52, column 5 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 51, column 10 to line 53, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 50, column 5 to column 13)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 49, column 16 to line 51, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 49, column 3 to line 53, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 54, column 3 to column 14)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 42, column 29 to line 55, column 2)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 58, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 59, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 60, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 61, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 62, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 63, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 65, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 66, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 70, column 4 to column 137)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 72, column 4 to column 102)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 74, column 4 to column 101)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 76, column 4 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 78, column 4 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 57, column 77 to line 79, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 83, column 4 to column 113)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 81, column 68 to line 84, column 4)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 87, column 4 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 88, column 15 to column 24)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 88, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 90, column 4 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 92, column 6 to column 60)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 91, column 26 to line 93, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 91, column 4 to line 93, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 94, column 2 to column 15)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 86, column 74 to line 95, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 98, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 99, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 100, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 101, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 102, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 103, column 4 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 105, column 4 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 106, column 4 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 109, column 4 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 112, column 4 to column 173)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 114, column 4 to column 138)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 117, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 119, column 4 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 123, column 4 to column 178)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 125, column 4 to column 143)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 128, column 4 to column 103)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 130, column 4 to column 57)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 132, column 4 to column 16)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 97, column 80 to line 133, column 3)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 140, column 6 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 141, column 6 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 143, column 6 to column 17)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 144, column 6 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 147, column 6 to column 49)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 150, column 6 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 151, column 6 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 152, column 6 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 153, column 6 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 154, column 6 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 155, column 6 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 156, column 6 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 157, column 6 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 159, column 6 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 160, column 6 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 162, column 6 to column 122)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 164, column 6 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 138, column 17 to line 165, column 5)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 172, column 8 to column 38)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 173, column 21 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 173, column 8 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 176, column 10 to column 79)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 175, column 28 to line 177, column 9)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 175, column 8 to line 177, column 9)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 179, column 8 to column 23)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 170, column 19 to line 180, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 184, column 9 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 185, column 11 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 186, column 11 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 183, column 32 to line 187, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 191, column 8 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 192, column 20 to column 25)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 192, column 8 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 193, column 8 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 196, column 10 to column 47)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 195, column 27 to line 197, column 9)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 195, column 8 to line 197, column 9)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 198, column 8 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 190, column 37 to line 199, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 202, column 8 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 204, column 8 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 205, column 8 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 201, column 32 to line 206, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 209, column 8 to column 21)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 211, column 8 to column 37)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 212, column 8 to column 22)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 208, column 31 to line 213, column 7)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 217, column 8 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 218, column 8 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 219, column 8 to column 28)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 220, column 8 to column 34)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 223, column 8 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 224, column 8 to column 39)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 225, column 8 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 228, column 8 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 229, column 8 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 231, column 8 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 232, column 8 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 234, column 8 to column 29)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 235, column 8 to column 30)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 236, column 8 to column 31)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 237, column 8 to column 26)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 238, column 8 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 240, column 15 to column 18)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 240, column 8 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 243, column 8 to column 35)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 244, column 8 to column 41)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 245, column 8 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 246, column 8 to column 27)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 261, column 10 to column 90)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 262, column 10 to column 146)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 263, column 10 to column 88)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 264, column 10 to column 87)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 266, column 10 to column 74)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 267, column 10 to column 72)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 268, column 10 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 269, column 10 to column 99)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 270, column 10 to column 44)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 271, column 10 to column 43)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 259, column 15 to line 272, column 9)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 252, column 10 to column 81)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 253, column 10 to column 86)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 254, column 10 to column 74)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 255, column 10 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 256, column 10 to column 46)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 257, column 10 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 258, column 10 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 250, column 24 to line 259, column 9)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 250, column 8 to line 272, column 9)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 273, column 10 to column 32)",
 " (in 'ontogeny_BUCHI/stan_models/Full_chimera/MAP_rtemld_cd8.stan', line 215, column 90 to line 274, column 7)"};


template <typename T0__>
stan::promote_args_t<T0__>
sp_numbers(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 238;
    t0 = 5.0;
    local_scalar_t__ dpt0;
    dpt0 = DUMMY_VAR__;
    
    current_statement__ = 239;
    dpt0 = (time - t0);
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ fit1;
    fit1 = DUMMY_VAR__;
    
    local_scalar_t__ theta0;
    theta0 = DUMMY_VAR__;
    
    current_statement__ = 242;
    theta0 = 9E4;
    local_scalar_t__ theta_f;
    theta_f = DUMMY_VAR__;
    
    current_statement__ = 243;
    theta_f = 68.0;
    local_scalar_t__ n;
    n = DUMMY_VAR__;
    
    current_statement__ = 244;
    n = 3.0;
    local_scalar_t__ X;
    X = DUMMY_VAR__;
    
    current_statement__ = 245;
    X = 25.0;
    local_scalar_t__ q;
    q = DUMMY_VAR__;
    
    current_statement__ = 246;
    q = 4.25;
    current_statement__ = 247;
    fit1 = (theta0 +
             ((theta_f * pow(dpt0, n)) *
               (1 - (pow(dpt0, q) / (pow(X, q) + pow(dpt0, q))))));
    current_statement__ = 252;
    if (logical_lt(time, t0)) {
      current_statement__ = 250;
      value = 0.0;
    } else {
      current_statement__ = 248;
      value = fit1;
    }
    current_statement__ = 253;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sp_numbers_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return sp_numbers(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_spline(const T0__& time, const T1__& psi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 256;
    value = (psi * sp_numbers(time, pstream__));
    current_statement__ = 257;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_spline_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const T1__& psi, std::ostream* pstream__)  const 
{
return theta_spline(time, psi, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
eps_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ eps_0;
    eps_0 = DUMMY_VAR__;
    
    current_statement__ = 260;
    eps_0 = 0.24510453;
    local_scalar_t__ eps_f;
    eps_f = DUMMY_VAR__;
    
    current_statement__ = 261;
    eps_f = 0.01559996;
    local_scalar_t__ A;
    A = DUMMY_VAR__;
    
    current_statement__ = 262;
    A = 14.83715328;
    local_scalar_t__ fit;
    fit = DUMMY_VAR__;
    
    current_statement__ = 263;
    fit = (stan::math::exp((-eps_f * (time + A))) + eps_0);
    current_statement__ = 264;
    return fit;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eps_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return eps_spline(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
Chi_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ chi;
    chi = DUMMY_VAR__;
    
    local_scalar_t__ chiEst;
    chiEst = DUMMY_VAR__;
    
    current_statement__ = 267;
    chiEst = 0.85793486;
    local_scalar_t__ qEst;
    qEst = DUMMY_VAR__;
    
    current_statement__ = 268;
    qEst = 0.04299229;
    current_statement__ = 273;
    if (logical_lt(time, 0)) {
      current_statement__ = 271;
      chi = 0;
    } else {
      current_statement__ = 269;
      chi = (chiEst * (1 - stan::math::exp((-qEst * time))));
    }
    current_statement__ = 274;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Chi_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return Chi_spline(time, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
shm_ont(const T0__& t, const std::vector<T1__>& y,
        const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
        const std::vector<int>& idata, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    current_statement__ = 276;
    psi = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ delta_nai;
    delta_nai = DUMMY_VAR__;
    
    current_statement__ = 277;
    delta_nai = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ delta_rte;
    delta_rte = DUMMY_VAR__;
    
    current_statement__ = 278;
    delta_rte = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ rho_nai;
    rho_nai = DUMMY_VAR__;
    
    current_statement__ = 279;
    rho_nai = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ rho_rte;
    rho_rte = DUMMY_VAR__;
    
    current_statement__ = 280;
    rho_rte = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ mu;
    mu = DUMMY_VAR__;
    
    current_statement__ = 281;
    mu = rvalue(parms, "parms", index_uni(6));
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 283;
    beta = (1 / 3.5);
    current_statement__ = 284;
    assign(dydt,
      (((theta_spline(t, psi, pstream__) * eps_spline(t, pstream__)) +
         ((rho_rte * (1 - mu)) *
           ((2 * rvalue(y, "y", index_uni(2))) +
             rvalue(y, "y", index_uni(1))))) -
        (((beta + delta_rte) + (rho_rte * mu)) *
          rvalue(y, "y", index_uni(1)))),
      "assigning variable dydt", index_uni(1));
    current_statement__ = 285;
    assign(dydt,
      (((theta_spline(t, psi, pstream__) * (1 - eps_spline(t, pstream__))) +
         (beta * rvalue(y, "y", index_uni(1)))) -
        ((rho_rte + delta_rte) * rvalue(y, "y", index_uni(2)))),
      "assigning variable dydt", index_uni(2));
    current_statement__ = 286;
    assign(dydt,
      ((((rho_rte * mu) *
          (rvalue(y, "y", index_uni(1)) + rvalue(y, "y", index_uni(2)))) +
         (rho_nai *
           ((2 * rvalue(y, "y", index_uni(4))) +
             rvalue(y, "y", index_uni(3))))) -
        ((beta + delta_nai) * rvalue(y, "y", index_uni(3)))),
      "assigning variable dydt", index_uni(3));
    current_statement__ = 287;
    assign(dydt,
      ((beta * rvalue(y, "y", index_uni(3))) -
        ((rho_nai + delta_nai) * rvalue(y, "y", index_uni(4)))),
      "assigning variable dydt", index_uni(4));
    current_statement__ = 288;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct shm_ont_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
           const std::vector<int>& idata, std::ostream* pstream__)  const 
{
return shm_ont(t, y, parms, rdata, idata, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
solve_ont(const T0__& solve_time, const std::vector<T1__>& init_cond,
          const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 290;
    return to_array_1d(
             integrate_ode_rk45(shm_ont_functor__(), init_cond, 1.0,
               rep_array(solve_time, 1), parms, std::vector<double>{0.0},
               std::vector<int>{0}, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_ont_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const T0__& solve_time, const std::vector<T1__>& init_cond,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return solve_ont(solve_time, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__,
T2__>>>
solve_ode_ont(const std::vector<T0__>& solve_time,
              const std::vector<T1__>& init_cond,
              const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int num_solve;
    num_solve = std::numeric_limits<int>::min();
    
    current_statement__ = 292;
    num_solve = size(solve_time);
    current_statement__ = 293;
    validate_non_negative_index("y_hat", "num_solve", num_solve);
    std::vector<std::vector<local_scalar_t__>> y_hat;
    y_hat = std::vector<std::vector<local_scalar_t__>>(num_solve, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 295;
    assign(y_hat, init_cond, "assigning variable y_hat", index_uni(1));
    current_statement__ = 298;
    for (int i = 2; i <= num_solve; ++i) {
      current_statement__ = 296;
      assign(y_hat,
        solve_ont(rvalue(solve_time, "solve_time", index_uni(i)), init_cond,
          parms, pstream__), "assigning variable y_hat", index_uni(i));}
    current_statement__ = 299;
    return y_hat;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_ode_ont_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__,
T2__>>>
operator()(const std::vector<T0__>& solve_time,
           const std::vector<T1__>& init_cond,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return solve_ode_ont(solve_time, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
shm_chi(const T0__& time, const std::vector<T1__>& y,
        const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
        const std::vector<int>& idata, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    current_statement__ = 301;
    psi = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ delta_nai;
    delta_nai = DUMMY_VAR__;
    
    current_statement__ = 302;
    delta_nai = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ delta_rte;
    delta_rte = DUMMY_VAR__;
    
    current_statement__ = 303;
    delta_rte = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ rho_nai;
    rho_nai = DUMMY_VAR__;
    
    current_statement__ = 304;
    rho_nai = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ rho_rte;
    rho_rte = DUMMY_VAR__;
    
    current_statement__ = 305;
    rho_rte = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ mu;
    mu = DUMMY_VAR__;
    
    current_statement__ = 306;
    mu = rvalue(parms, "parms", index_uni(6));
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(8, DUMMY_VAR__);
    
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 308;
    beta = (1 / 3.5);
    local_scalar_t__ ageAtBMT;
    ageAtBMT = DUMMY_VAR__;
    
    current_statement__ = 309;
    ageAtBMT = rvalue(parms, "parms", index_uni(7));
    current_statement__ = 310;
    assign(dydt,
      ((((theta_spline(time, psi, pstream__) *
           Chi_spline((time - ageAtBMT), pstream__)) *
          eps_spline(time, pstream__)) +
         ((rho_rte * (1 - mu)) *
           ((2 * rvalue(y, "y", index_uni(2))) +
             rvalue(y, "y", index_uni(1))))) -
        (((beta + delta_rte) + (rho_rte * mu)) *
          rvalue(y, "y", index_uni(1)))),
      "assigning variable dydt", index_uni(1));
    current_statement__ = 311;
    assign(dydt,
      ((((theta_spline(time, psi, pstream__) *
           Chi_spline((time - ageAtBMT), pstream__)) *
          (1 - eps_spline(time, pstream__))) +
         (beta * rvalue(y, "y", index_uni(1)))) -
        ((rho_rte + delta_rte) * rvalue(y, "y", index_uni(2)))),
      "assigning variable dydt", index_uni(2));
    current_statement__ = 312;
    assign(dydt,
      ((((rho_rte * mu) *
          (rvalue(y, "y", index_uni(1)) + rvalue(y, "y", index_uni(2)))) +
         (rho_nai *
           ((2 * rvalue(y, "y", index_uni(4))) +
             rvalue(y, "y", index_uni(3))))) -
        ((beta + delta_nai) * rvalue(y, "y", index_uni(3)))),
      "assigning variable dydt", index_uni(3));
    current_statement__ = 313;
    assign(dydt,
      ((beta * rvalue(y, "y", index_uni(3))) -
        ((rho_nai + delta_nai) * rvalue(y, "y", index_uni(4)))),
      "assigning variable dydt", index_uni(4));
    current_statement__ = 314;
    assign(dydt,
      ((((theta_spline(time, psi, pstream__) *
           (1 - Chi_spline((time - ageAtBMT), pstream__))) *
          eps_spline(time, pstream__)) +
         ((rho_rte * (1 - mu)) *
           ((2 * rvalue(y, "y", index_uni(6))) +
             rvalue(y, "y", index_uni(5))))) -
        (((beta + delta_rte) + (rho_rte * mu)) *
          rvalue(y, "y", index_uni(5)))),
      "assigning variable dydt", index_uni(5));
    current_statement__ = 315;
    assign(dydt,
      ((((theta_spline(time, psi, pstream__) *
           (1 - Chi_spline((time - ageAtBMT), pstream__))) *
          (1 - eps_spline(time, pstream__))) +
         (beta * rvalue(y, "y", index_uni(5)))) -
        ((rho_rte + delta_rte) * rvalue(y, "y", index_uni(6)))),
      "assigning variable dydt", index_uni(6));
    current_statement__ = 316;
    assign(dydt,
      ((((rho_rte * mu) *
          (rvalue(y, "y", index_uni(5)) + rvalue(y, "y", index_uni(6)))) +
         (rho_nai *
           ((2 * rvalue(y, "y", index_uni(6))) +
             rvalue(y, "y", index_uni(7))))) -
        ((beta + delta_nai) * rvalue(y, "y", index_uni(7)))),
      "assigning variable dydt", index_uni(7));
    current_statement__ = 317;
    assign(dydt,
      ((beta * rvalue(y, "y", index_uni(7))) -
        ((rho_nai + delta_nai) * rvalue(y, "y", index_uni(8)))),
      "assigning variable dydt", index_uni(8));
    current_statement__ = 318;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct shm_chi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& time, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
           const std::vector<int>& idata, std::ostream* pstream__)  const 
{
return shm_chi(time, y, parms, rdata, idata, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
solve_chi(const T0__& solve_time, const T1__& ageAtBMT,
          const std::vector<T2__>& init_cond, const std::vector<T3__>& parms,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(8, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(7, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> y0;
    y0 = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> init_tb;
    init_tb = std::vector<local_scalar_t__>(8, DUMMY_VAR__);
    
    current_statement__ = 324;
    assign(y0, solve_ont(ageAtBMT, init_cond, parms, pstream__),
      "assigning variable y0");
    current_statement__ = 325;
    assign(init_tb, 0, "assigning variable init_tb", index_uni(1));
    current_statement__ = 326;
    assign(init_tb, 0, "assigning variable init_tb", index_uni(2));
    current_statement__ = 327;
    assign(init_tb, 0, "assigning variable init_tb", index_uni(3));
    current_statement__ = 328;
    assign(init_tb, 0, "assigning variable init_tb", index_uni(4));
    current_statement__ = 329;
    assign(init_tb, rvalue(y0, "y0", index_uni(1)),
      "assigning variable init_tb", index_uni(5));
    current_statement__ = 330;
    assign(init_tb, rvalue(y0, "y0", index_uni(2)),
      "assigning variable init_tb", index_uni(6));
    current_statement__ = 331;
    assign(init_tb, rvalue(y0, "y0", index_uni(3)),
      "assigning variable init_tb", index_uni(7));
    current_statement__ = 332;
    assign(init_tb, rvalue(y0, "y0", index_uni(4)),
      "assigning variable init_tb", index_uni(8));
    current_statement__ = 333;
    assign(params, rvalue(parms, "parms", index_min_max(1, 6)),
      "assigning variable params", index_min_max(1, 6));
    current_statement__ = 334;
    assign(params, ageAtBMT, "assigning variable params", index_uni(7));
    current_statement__ = 335;
    assign(y_solve,
      to_array_1d(
        integrate_ode_rk45(shm_chi_functor__(), init_tb, ageAtBMT,
          rep_array(solve_time, 1), params, std::vector<double>{0.0},
          std::vector<int>{0}, pstream__)), "assigning variable y_solve");
    current_statement__ = 336;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_chi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& solve_time, const T1__& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_chi(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>>
solve_ode_chi(const std::vector<T0__>& solve_time,
              const std::vector<T1__>& ageAtBMT,
              const std::vector<T2__>& init_cond,
              const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int numdim;
    numdim = std::numeric_limits<int>::min();
    
    current_statement__ = 338;
    numdim = size(solve_time);
    current_statement__ = 339;
    validate_non_negative_index("y_solve", "numdim", numdim);
    std::vector<std::vector<local_scalar_t__>> y_solve;
    y_solve = std::vector<std::vector<local_scalar_t__>>(numdim, std::vector<local_scalar_t__>(8, DUMMY_VAR__));
    
    current_statement__ = 343;
    for (int i = 1; i <= numdim; ++i) {
      current_statement__ = 341;
      assign(y_solve,
        solve_chi(rvalue(solve_time, "solve_time", index_uni(i)),
          rvalue(ageAtBMT, "ageAtBMT", index_uni(i)), init_cond,
          parms, pstream__), "assigning variable y_solve", index_uni(i));}
    current_statement__ = 344;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_ode_chi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>>
operator()(const std::vector<T0__>& solve_time,
           const std::vector<T1__>& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_ode_chi(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
logit_inverse(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ ans;
    ans = DUMMY_VAR__;
    
    current_statement__ = 347;
    ans = (stan::math::exp(x) / (1 + stan::math::exp(x)));
    current_statement__ = 348;
    return ans;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logit_inverse_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return logit_inverse(x, pstream__);
}
};

template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
asinsqrt_array(const std::vector<T0__>& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndims;
    ndims = std::numeric_limits<int>::min();
    
    current_statement__ = 350;
    ndims = size(x);
    current_statement__ = 351;
    validate_non_negative_index("answer", "ndims", ndims);
    std::vector<local_scalar_t__> answer;
    answer = std::vector<local_scalar_t__>(ndims, DUMMY_VAR__);
    
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 353;
    a = 1.2;
    current_statement__ = 356;
    for (int i = 1; i <= ndims; ++i) {
      current_statement__ = 354;
      assign(answer,
        stan::math::asin(
          (stan::math::sqrt(rvalue(x, "x", index_uni(i))) /
            stan::math::sqrt(a))), "assigning variable answer", index_uni(i));
    }
    current_statement__ = 357;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_array_functor__ {
template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
operator()(const std::vector<T0__>& x, std::ostream* pstream__)  const 
{
return asinsqrt_array(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_real(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 359;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 360;
    answer = stan::math::asin((stan::math::sqrt(x) / stan::math::sqrt(a)));
    current_statement__ = 361;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_real_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_real(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_inv(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 363;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 364;
    answer = (a * pow(stan::math::sin(x), 2));
    current_statement__ = 365;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_inv_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_inv(x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
math_reduce(const T0__& global_params_arg__, const T1__& local_params_arg__,
            const std::vector<T2__>& x_r, const std::vector<int>& x_i,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& global_params = to_ref(global_params_arg__);
  const auto& local_params = to_ref(local_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 367;
    n = size(x_i);
    local_scalar_t__ dat_time;
    dat_time = DUMMY_VAR__;
    
    current_statement__ = 368;
    dat_time = rvalue(x_r, "x_r", index_uni(1));
    int dat_t0;
    dat_t0 = std::numeric_limits<int>::min();
    
    current_statement__ = 369;
    dat_t0 = rvalue(x_i, "x_i", index_uni(1));
    local_scalar_t__ tb_time;
    tb_time = DUMMY_VAR__;
    
    current_statement__ = 370;
    tb_time = (dat_t0 / 1.0);
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 371;
    N0 = rvalue(global_params, "global_params", index_uni(7));
    local_scalar_t__ kappa0;
    kappa0 = DUMMY_VAR__;
    
    current_statement__ = 372;
    kappa0 = rvalue(global_params, "global_params", index_uni(8));
    std::vector<local_scalar_t__> init_cond;
    init_cond = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> ont_solve;
    ont_solve = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> chi_solve;
    chi_solve = std::vector<local_scalar_t__>(8, DUMMY_VAR__);
    
    local_scalar_t__ ont_counts_mean;
    ont_counts_mean = DUMMY_VAR__;
    
    local_scalar_t__ ont_kiprop_mean;
    ont_kiprop_mean = DUMMY_VAR__;
    
    local_scalar_t__ chi_counts_mean;
    chi_counts_mean = DUMMY_VAR__;
    
    local_scalar_t__ host_counts_mean;
    host_counts_mean = DUMMY_VAR__;
    
    local_scalar_t__ donor_counts_mean;
    donor_counts_mean = DUMMY_VAR__;
    
    local_scalar_t__ host_ki_mean;
    host_ki_mean = DUMMY_VAR__;
    
    local_scalar_t__ donor_ki_mean;
    donor_ki_mean = DUMMY_VAR__;
    
    current_statement__ = 383;
    validate_non_negative_index("y_mean_stacked", "4 * n", (4 * n));
    Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
    y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>((4 * n));
    stan::math::fill(y_mean_stacked, DUMMY_VAR__);
    
    current_statement__ = 385;
    assign(init_cond, (kappa0 * N0),
      "assigning variable init_cond", index_uni(1));
    current_statement__ = 386;
    assign(init_cond, ((1 - kappa0) * N0),
      "assigning variable init_cond", index_uni(2));
    current_statement__ = 387;
    assign(init_cond, 0.0, "assigning variable init_cond", index_uni(3));
    current_statement__ = 388;
    assign(init_cond, 0.0, "assigning variable init_cond", index_uni(4));
    current_statement__ = 408;
    if (logical_eq(dat_t0, 1)) {
      current_statement__ = 400;
      assign(ont_solve,
        solve_ont(dat_time, init_cond, to_array_1d(global_params), pstream__),
        "assigning variable ont_solve");
      current_statement__ = 401;
      ont_counts_mean = (((rvalue(ont_solve, "ont_solve", index_uni(1)) +
                            rvalue(ont_solve, "ont_solve", index_uni(2))) +
                           rvalue(ont_solve, "ont_solve", index_uni(3))) +
                          rvalue(ont_solve, "ont_solve", index_uni(4)));
      current_statement__ = 402;
      ont_kiprop_mean = ((rvalue(ont_solve, "ont_solve", index_uni(1)) +
                           rvalue(ont_solve, "ont_solve", index_uni(2))) /
                          ont_counts_mean);
      current_statement__ = 403;
      assign(y_mean_stacked, ont_counts_mean,
        "assigning variable y_mean_stacked", index_uni(1));
      current_statement__ = 404;
      assign(y_mean_stacked, ont_kiprop_mean,
        "assigning variable y_mean_stacked", index_uni(2));
      current_statement__ = 405;
      assign(y_mean_stacked, 0,
        "assigning variable y_mean_stacked", index_uni(3));
      current_statement__ = 406;
      assign(y_mean_stacked, 0,
        "assigning variable y_mean_stacked", index_uni(4));
    } else {
      current_statement__ = 389;
      assign(chi_solve,
        solve_chi(dat_time, tb_time, init_cond,
          to_array_1d(global_params), pstream__),
        "assigning variable chi_solve");
      current_statement__ = 390;
      chi_counts_mean = (((((((rvalue(chi_solve, "chi_solve", index_uni(1)) +
                                rvalue(chi_solve, "chi_solve", index_uni(2)))
                               +
                               rvalue(chi_solve, "chi_solve", index_uni(3)))
                              + rvalue(chi_solve, "chi_solve", index_uni(4)))
                             + rvalue(chi_solve, "chi_solve", index_uni(5)))
                            + rvalue(chi_solve, "chi_solve", index_uni(6))) +
                           rvalue(chi_solve, "chi_solve", index_uni(7))) +
                          rvalue(chi_solve, "chi_solve", index_uni(8)));
      current_statement__ = 391;
      donor_counts_mean = (((rvalue(chi_solve, "chi_solve", index_uni(1)) +
                              rvalue(chi_solve, "chi_solve", index_uni(2))) +
                             rvalue(chi_solve, "chi_solve", index_uni(3))) +
                            rvalue(chi_solve, "chi_solve", index_uni(4)));
      current_statement__ = 392;
      host_counts_mean = (((rvalue(chi_solve, "chi_solve", index_uni(5)) +
                             rvalue(chi_solve, "chi_solve", index_uni(6))) +
                            rvalue(chi_solve, "chi_solve", index_uni(7))) +
                           rvalue(chi_solve, "chi_solve", index_uni(8)));
      current_statement__ = 393;
      donor_ki_mean = ((rvalue(chi_solve, "chi_solve", index_uni(1)) +
                         rvalue(chi_solve, "chi_solve", index_uni(3))) /
                        donor_counts_mean);
      current_statement__ = 394;
      host_ki_mean = ((rvalue(chi_solve, "chi_solve", index_uni(5)) +
                        rvalue(chi_solve, "chi_solve", index_uni(7))) /
                       host_counts_mean);
      current_statement__ = 395;
      assign(y_mean_stacked, chi_counts_mean,
        "assigning variable y_mean_stacked", index_uni(1));
      current_statement__ = 396;
      assign(y_mean_stacked,
        (donor_counts_mean /
          (chi_counts_mean * Chi_spline((dat_time - tb_time), pstream__))),
        "assigning variable y_mean_stacked", index_uni(2));
      current_statement__ = 397;
      assign(y_mean_stacked, donor_ki_mean,
        "assigning variable y_mean_stacked", index_uni(3));
      current_statement__ = 398;
      assign(y_mean_stacked, host_ki_mean,
        "assigning variable y_mean_stacked", index_uni(4));
    }
    current_statement__ = 409;
    return y_mean_stacked;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct math_reduce_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& global_params, const T1__& local_params,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return math_reduce(global_params, local_params, x_r, x_i, pstream__);
}
};

class MAP_rtemld_cd8_model final : public model_base_crtp<MAP_rtemld_cd8_model> {

 private:
  int numOnt;
  std::vector<double> ont_counts;
  std::vector<double> ont_ki;
  int numChi;
  std::vector<double> chi_counts;
  std::vector<double> N_donor_fraction;
  std::vector<double> donor_ki;
  std::vector<double> host_ki;
  int numPred;
  std::vector<double> ts_pred_ont;
  std::vector<double> ts_pred_chi1;
  std::vector<double> ts_pred_chi2;
  std::vector<double> ts_pred_chi3;
  std::vector<double> tb_pred1;
  std::vector<double> tb_pred2;
  std::vector<double> tb_pred3;
  int n_shards;
  std::vector<int> dat_t0;
  std::vector<int> dat_time;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<double>> x_r;
  std::vector<Eigen::Matrix<double, -1, 1>> local_params;
  int y_mean_stacked_1dim__;
 
 public:
  ~MAP_rtemld_cd8_model() { }
  
  inline std::string model_name() const final { return "MAP_rtemld_cd8_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 a7f4b745", "stancflags = "};
  }
  
  
  MAP_rtemld_cd8_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_rtemld_cd8_model_namespace::MAP_rtemld_cd8_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 149;
      context__.validate_dims("data initialization","numOnt","int",
          context__.to_vec());
      numOnt = std::numeric_limits<int>::min();
      
      current_statement__ = 149;
      numOnt = context__.vals_i("numOnt")[(1 - 1)];
      current_statement__ = 149;
      current_statement__ = 149;
      check_greater_or_equal(function__, "numOnt", numOnt, 1);
      current_statement__ = 150;
      validate_non_negative_index("ont_counts", "numOnt", numOnt);
      current_statement__ = 151;
      context__.validate_dims("data initialization","ont_counts","double",
          context__.to_vec(numOnt));
      ont_counts = std::vector<double>(numOnt, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 151;
      assign(ont_counts, context__.vals_r("ont_counts"),
        "assigning variable ont_counts");
      current_statement__ = 151;
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        current_statement__ = 151;
        current_statement__ = 151;
        check_greater_or_equal(function__, "ont_counts[sym1__]",
                               ont_counts[(sym1__ - 1)], 0);}
      current_statement__ = 152;
      validate_non_negative_index("ont_ki", "numOnt", numOnt);
      current_statement__ = 153;
      context__.validate_dims("data initialization","ont_ki","double",
          context__.to_vec(numOnt));
      ont_ki = std::vector<double>(numOnt, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 153;
      assign(ont_ki, context__.vals_r("ont_ki"), "assigning variable ont_ki");
      current_statement__ = 153;
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        current_statement__ = 153;
        current_statement__ = 153;
        check_greater_or_equal(function__, "ont_ki[sym1__]",
                               ont_ki[(sym1__ - 1)], 0);}
      current_statement__ = 154;
      context__.validate_dims("data initialization","numChi","int",
          context__.to_vec());
      numChi = std::numeric_limits<int>::min();
      
      current_statement__ = 154;
      numChi = context__.vals_i("numChi")[(1 - 1)];
      current_statement__ = 154;
      current_statement__ = 154;
      check_greater_or_equal(function__, "numChi", numChi, 1);
      current_statement__ = 155;
      validate_non_negative_index("chi_counts", "numChi", numChi);
      current_statement__ = 156;
      context__.validate_dims("data initialization","chi_counts","double",
          context__.to_vec(numChi));
      chi_counts = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 156;
      assign(chi_counts, context__.vals_r("chi_counts"),
        "assigning variable chi_counts");
      current_statement__ = 156;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 156;
        current_statement__ = 156;
        check_greater_or_equal(function__, "chi_counts[sym1__]",
                               chi_counts[(sym1__ - 1)], 0);}
      current_statement__ = 157;
      validate_non_negative_index("N_donor_fraction", "numChi", numChi);
      current_statement__ = 158;
      context__.validate_dims("data initialization","N_donor_fraction",
          "double",context__.to_vec(numChi));
      N_donor_fraction = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 158;
      assign(N_donor_fraction, context__.vals_r("N_donor_fraction"),
        "assigning variable N_donor_fraction");
      current_statement__ = 158;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 158;
        current_statement__ = 158;
        check_greater_or_equal(function__, "N_donor_fraction[sym1__]",
                               N_donor_fraction[(sym1__ - 1)], 0);}
      current_statement__ = 159;
      validate_non_negative_index("donor_ki", "numChi", numChi);
      current_statement__ = 160;
      context__.validate_dims("data initialization","donor_ki","double",
          context__.to_vec(numChi));
      donor_ki = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 160;
      assign(donor_ki, context__.vals_r("donor_ki"),
        "assigning variable donor_ki");
      current_statement__ = 160;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 160;
        current_statement__ = 160;
        check_greater_or_equal(function__, "donor_ki[sym1__]",
                               donor_ki[(sym1__ - 1)], 0);}
      current_statement__ = 161;
      validate_non_negative_index("host_ki", "numChi", numChi);
      current_statement__ = 162;
      context__.validate_dims("data initialization","host_ki","double",
          context__.to_vec(numChi));
      host_ki = std::vector<double>(numChi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 162;
      assign(host_ki, context__.vals_r("host_ki"),
        "assigning variable host_ki");
      current_statement__ = 162;
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        current_statement__ = 162;
        current_statement__ = 162;
        check_greater_or_equal(function__, "host_ki[sym1__]",
                               host_ki[(sym1__ - 1)], 0);}
      current_statement__ = 163;
      context__.validate_dims("data initialization","numPred","int",
          context__.to_vec());
      numPred = std::numeric_limits<int>::min();
      
      current_statement__ = 163;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 163;
      current_statement__ = 163;
      check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 164;
      validate_non_negative_index("ts_pred_ont", "numPred", numPred);
      current_statement__ = 165;
      context__.validate_dims("data initialization","ts_pred_ont","double",
          context__.to_vec(numPred));
      ts_pred_ont = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 165;
      assign(ts_pred_ont, context__.vals_r("ts_pred_ont"),
        "assigning variable ts_pred_ont");
      current_statement__ = 165;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 165;
        current_statement__ = 165;
        check_greater_or_equal(function__, "ts_pred_ont[sym1__]",
                               ts_pred_ont[(sym1__ - 1)], 0);}
      current_statement__ = 166;
      validate_non_negative_index("ts_pred_chi1", "numPred", numPred);
      current_statement__ = 167;
      context__.validate_dims("data initialization","ts_pred_chi1","double",
          context__.to_vec(numPred));
      ts_pred_chi1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 167;
      assign(ts_pred_chi1, context__.vals_r("ts_pred_chi1"),
        "assigning variable ts_pred_chi1");
      current_statement__ = 167;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 167;
        current_statement__ = 167;
        check_greater_or_equal(function__, "ts_pred_chi1[sym1__]",
                               ts_pred_chi1[(sym1__ - 1)], 0);}
      current_statement__ = 168;
      validate_non_negative_index("ts_pred_chi2", "numPred", numPred);
      current_statement__ = 169;
      context__.validate_dims("data initialization","ts_pred_chi2","double",
          context__.to_vec(numPred));
      ts_pred_chi2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 169;
      assign(ts_pred_chi2, context__.vals_r("ts_pred_chi2"),
        "assigning variable ts_pred_chi2");
      current_statement__ = 169;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 169;
        current_statement__ = 169;
        check_greater_or_equal(function__, "ts_pred_chi2[sym1__]",
                               ts_pred_chi2[(sym1__ - 1)], 0);}
      current_statement__ = 170;
      validate_non_negative_index("ts_pred_chi3", "numPred", numPred);
      current_statement__ = 171;
      context__.validate_dims("data initialization","ts_pred_chi3","double",
          context__.to_vec(numPred));
      ts_pred_chi3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 171;
      assign(ts_pred_chi3, context__.vals_r("ts_pred_chi3"),
        "assigning variable ts_pred_chi3");
      current_statement__ = 171;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 171;
        current_statement__ = 171;
        check_greater_or_equal(function__, "ts_pred_chi3[sym1__]",
                               ts_pred_chi3[(sym1__ - 1)], 0);}
      current_statement__ = 172;
      validate_non_negative_index("tb_pred1", "numPred", numPred);
      current_statement__ = 173;
      context__.validate_dims("data initialization","tb_pred1","double",
          context__.to_vec(numPred));
      tb_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 173;
      assign(tb_pred1, context__.vals_r("tb_pred1"),
        "assigning variable tb_pred1");
      current_statement__ = 173;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 173;
        current_statement__ = 173;
        check_greater_or_equal(function__, "tb_pred1[sym1__]",
                               tb_pred1[(sym1__ - 1)], 0);}
      current_statement__ = 174;
      validate_non_negative_index("tb_pred2", "numPred", numPred);
      current_statement__ = 175;
      context__.validate_dims("data initialization","tb_pred2","double",
          context__.to_vec(numPred));
      tb_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 175;
      assign(tb_pred2, context__.vals_r("tb_pred2"),
        "assigning variable tb_pred2");
      current_statement__ = 175;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 175;
        current_statement__ = 175;
        check_greater_or_equal(function__, "tb_pred2[sym1__]",
                               tb_pred2[(sym1__ - 1)], 0);}
      current_statement__ = 176;
      validate_non_negative_index("tb_pred3", "numPred", numPred);
      current_statement__ = 177;
      context__.validate_dims("data initialization","tb_pred3","double",
          context__.to_vec(numPred));
      tb_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 177;
      assign(tb_pred3, context__.vals_r("tb_pred3"),
        "assigning variable tb_pred3");
      current_statement__ = 177;
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        current_statement__ = 177;
        current_statement__ = 177;
        check_greater_or_equal(function__, "tb_pred3[sym1__]",
                               tb_pred3[(sym1__ - 1)], 0);}
      current_statement__ = 178;
      context__.validate_dims("data initialization","n_shards","int",
          context__.to_vec());
      n_shards = std::numeric_limits<int>::min();
      
      current_statement__ = 178;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 179;
      validate_non_negative_index("dat_t0", "n_shards", n_shards);
      current_statement__ = 180;
      context__.validate_dims("data initialization","dat_t0","int",
          context__.to_vec(n_shards));
      dat_t0 = std::vector<int>(n_shards, std::numeric_limits<int>::min());
      
      current_statement__ = 180;
      assign(dat_t0, context__.vals_i("dat_t0"), "assigning variable dat_t0");
      current_statement__ = 180;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 180;
        current_statement__ = 180;
        check_greater_or_equal(function__, "dat_t0[sym1__]",
                               dat_t0[(sym1__ - 1)], 0);}
      current_statement__ = 181;
      validate_non_negative_index("dat_time", "n_shards", n_shards);
      current_statement__ = 182;
      context__.validate_dims("data initialization","dat_time","int",
          context__.to_vec(n_shards));
      dat_time = std::vector<int>(n_shards, std::numeric_limits<int>::min());
      
      current_statement__ = 182;
      assign(dat_time, context__.vals_i("dat_time"),
        "assigning variable dat_time");
      current_statement__ = 182;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 182;
        current_statement__ = 182;
        check_greater_or_equal(function__, "dat_time[sym1__]",
                               dat_time[(sym1__ - 1)], 0);}
      current_statement__ = 183;
      validate_non_negative_index("x_i", "n_shards", n_shards);
      current_statement__ = 184;
      x_i = std::vector<std::vector<int>>(n_shards, std::vector<int>(1, std::numeric_limits<int>::min()));
      
      current_statement__ = 185;
      validate_non_negative_index("x_r", "n_shards", n_shards);
      current_statement__ = 186;
      x_r = std::vector<std::vector<double>>(n_shards, std::vector<double>(1, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 187;
      validate_non_negative_index("local_params", "n_shards", n_shards);
      current_statement__ = 188;
      local_params = std::vector<Eigen::Matrix<double, -1, 1>>(n_shards, Eigen::Matrix<double, -1, 1>(0));
      stan::math::fill(local_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 192;
      for (int s = 1; s <= n_shards; ++s) {
        current_statement__ = 189;
        assign(x_i, rvalue(dat_t0, "dat_t0", index_uni(s)),
          "assigning variable x_i", index_uni(s), index_uni(1));
        current_statement__ = 190;
        assign(x_r, rvalue(dat_time, "dat_time", index_uni(s)),
          "assigning variable x_r", index_uni(s), index_uni(1));}
      current_statement__ = 193;
      validate_non_negative_index("y1_mean", "numOnt", numOnt);
      current_statement__ = 194;
      validate_non_negative_index("y2_mean", "numOnt", numOnt);
      current_statement__ = 195;
      validate_non_negative_index("y3_mean", "numChi", numChi);
      current_statement__ = 196;
      validate_non_negative_index("y4_mean", "numChi", numChi);
      current_statement__ = 197;
      validate_non_negative_index("y5_mean", "numChi", numChi);
      current_statement__ = 198;
      validate_non_negative_index("y6_mean", "numChi", numChi);
      current_statement__ = 199;
      y_mean_stacked_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 199;
      y_mean_stacked_1dim__ = ((4 * numOnt) + (4 * numChi));
      current_statement__ = 199;
      validate_non_negative_index("y_mean_stacked",
                                  "4 * numOnt + 4 * numChi",
                                  y_mean_stacked_1dim__);
      current_statement__ = 200;
      validate_non_negative_index("y_ont_pred", "numPred", numPred);
      current_statement__ = 201;
      validate_non_negative_index("y_chi_pred1", "numPred", numPred);
      current_statement__ = 202;
      validate_non_negative_index("y_chi_pred2", "numPred", numPred);
      current_statement__ = 203;
      validate_non_negative_index("y_chi_pred3", "numPred", numPred);
      current_statement__ = 204;
      validate_non_negative_index("y1_mean_pred", "numPred", numPred);
      current_statement__ = 205;
      validate_non_negative_index("y2_mean_pred", "numPred", numPred);
      current_statement__ = 206;
      validate_non_negative_index("ontcounts_pred", "numPred", numPred);
      current_statement__ = 207;
      validate_non_negative_index("ontki_pred", "numPred", numPred);
      current_statement__ = 208;
      validate_non_negative_index("y3_mean_pred1", "numPred", numPred);
      current_statement__ = 209;
      validate_non_negative_index("y4_mean_pred1", "numPred", numPred);
      current_statement__ = 210;
      validate_non_negative_index("y5_mean_pred1", "numPred", numPred);
      current_statement__ = 211;
      validate_non_negative_index("y6_mean_pred1", "numPred", numPred);
      current_statement__ = 212;
      validate_non_negative_index("y3_mean_pred2", "numPred", numPred);
      current_statement__ = 213;
      validate_non_negative_index("y4_mean_pred2", "numPred", numPred);
      current_statement__ = 214;
      validate_non_negative_index("y5_mean_pred2", "numPred", numPred);
      current_statement__ = 215;
      validate_non_negative_index("y6_mean_pred2", "numPred", numPred);
      current_statement__ = 216;
      validate_non_negative_index("y3_mean_pred3", "numPred", numPred);
      current_statement__ = 217;
      validate_non_negative_index("y4_mean_pred3", "numPred", numPred);
      current_statement__ = 218;
      validate_non_negative_index("y5_mean_pred3", "numPred", numPred);
      current_statement__ = 219;
      validate_non_negative_index("y6_mean_pred3", "numPred", numPred);
      current_statement__ = 220;
      validate_non_negative_index("chicounts_pred1", "numPred", numPred);
      current_statement__ = 221;
      validate_non_negative_index("Nfd_pred1", "numPred", numPred);
      current_statement__ = 222;
      validate_non_negative_index("chicounts_pred2", "numPred", numPred);
      current_statement__ = 223;
      validate_non_negative_index("Nfd_pred2", "numPred", numPred);
      current_statement__ = 224;
      validate_non_negative_index("chicounts_pred3", "numPred", numPred);
      current_statement__ = 225;
      validate_non_negative_index("Nfd_pred3", "numPred", numPred);
      current_statement__ = 226;
      validate_non_negative_index("donorki_pred1", "numPred", numPred);
      current_statement__ = 227;
      validate_non_negative_index("hostki_pred1", "numPred", numPred);
      current_statement__ = 228;
      validate_non_negative_index("donorki_pred2", "numPred", numPred);
      current_statement__ = 229;
      validate_non_negative_index("hostki_pred2", "numPred", numPred);
      current_statement__ = 230;
      validate_non_negative_index("donorki_pred3", "numPred", numPred);
      current_statement__ = 231;
      validate_non_negative_index("hostki_pred3", "numPred", numPred);
      current_statement__ = 232;
      validate_non_negative_index("log_lik_ont_counts", "numOnt", numOnt);
      current_statement__ = 233;
      validate_non_negative_index("log_lik_ont_ki", "numOnt", numOnt);
      current_statement__ = 234;
      validate_non_negative_index("log_lik_chi_counts", "numChi", numChi);
      current_statement__ = 235;
      validate_non_negative_index("log_lik_Nfd", "numChi", numChi);
      current_statement__ = 236;
      validate_non_negative_index("log_lik_donor_ki", "numChi", numChi);
      current_statement__ = 237;
      validate_non_negative_index("log_lik_host_ki", "numChi", numChi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_rtemld_cd8_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ psi;
      psi = DUMMY_VAR__;
      
      current_statement__ = 1;
      psi = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        psi = stan::math::lub_constrain(psi, 0, 1, lp__);
      } else {
        current_statement__ = 1;
        psi = stan::math::lub_constrain(psi, 0, 1);
      }
      local_scalar_t__ delta_nai;
      delta_nai = DUMMY_VAR__;
      
      current_statement__ = 2;
      delta_nai = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        delta_nai = stan::math::lub_constrain(delta_nai, 0, 1, lp__);
      } else {
        current_statement__ = 2;
        delta_nai = stan::math::lub_constrain(delta_nai, 0, 1);
      }
      local_scalar_t__ delta_rte;
      delta_rte = DUMMY_VAR__;
      
      current_statement__ = 3;
      delta_rte = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        delta_rte = stan::math::lub_constrain(delta_rte, 0, 1, lp__);
      } else {
        current_statement__ = 3;
        delta_rte = stan::math::lub_constrain(delta_rte, 0, 1);
      }
      local_scalar_t__ rho_nai;
      rho_nai = DUMMY_VAR__;
      
      current_statement__ = 4;
      rho_nai = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        rho_nai = stan::math::lub_constrain(rho_nai, 0, 1, lp__);
      } else {
        current_statement__ = 4;
        rho_nai = stan::math::lub_constrain(rho_nai, 0, 1);
      }
      local_scalar_t__ rho_rte;
      rho_rte = DUMMY_VAR__;
      
      current_statement__ = 5;
      rho_rte = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        rho_rte = stan::math::lub_constrain(rho_rte, 0, 1, lp__);
      } else {
        current_statement__ = 5;
        rho_rte = stan::math::lub_constrain(rho_rte, 0, 1);
      }
      local_scalar_t__ mu;
      mu = DUMMY_VAR__;
      
      current_statement__ = 6;
      mu = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        mu = stan::math::lub_constrain(mu, 0, 1, lp__);
      } else {
        current_statement__ = 6;
        mu = stan::math::lub_constrain(mu, 0, 1);
      }
      local_scalar_t__ N0;
      N0 = DUMMY_VAR__;
      
      current_statement__ = 7;
      N0 = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        N0 = stan::math::lub_constrain(N0, 1E4, 5E6, lp__);
      } else {
        current_statement__ = 7;
        N0 = stan::math::lub_constrain(N0, 1E4, 5E6);
      }
      local_scalar_t__ kappa0;
      kappa0 = DUMMY_VAR__;
      
      current_statement__ = 8;
      kappa0 = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        kappa0 = stan::math::lub_constrain(kappa0, 0, 1, lp__);
      } else {
        current_statement__ = 8;
        kappa0 = stan::math::lub_constrain(kappa0, 0, 1);
      }
      local_scalar_t__ sigma_ont_counts;
      sigma_ont_counts = DUMMY_VAR__;
      
      current_statement__ = 9;
      sigma_ont_counts = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        sigma_ont_counts = stan::math::lb_constrain(sigma_ont_counts, 0, lp__);
      } else {
        current_statement__ = 9;
        sigma_ont_counts = stan::math::lb_constrain(sigma_ont_counts, 0);
      }
      local_scalar_t__ sigma_ont_ki;
      sigma_ont_ki = DUMMY_VAR__;
      
      current_statement__ = 10;
      sigma_ont_ki = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        sigma_ont_ki = stan::math::lb_constrain(sigma_ont_ki, 0, lp__);
      } else {
        current_statement__ = 10;
        sigma_ont_ki = stan::math::lb_constrain(sigma_ont_ki, 0);
      }
      local_scalar_t__ sigma_chi_counts;
      sigma_chi_counts = DUMMY_VAR__;
      
      current_statement__ = 11;
      sigma_chi_counts = in__.scalar();
      current_statement__ = 11;
      if (jacobian__) {
        current_statement__ = 11;
        sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0, lp__);
      } else {
        current_statement__ = 11;
        sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0);
      }
      local_scalar_t__ sigma_Nfd;
      sigma_Nfd = DUMMY_VAR__;
      
      current_statement__ = 12;
      sigma_Nfd = in__.scalar();
      current_statement__ = 12;
      if (jacobian__) {
        current_statement__ = 12;
        sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0, lp__);
      } else {
        current_statement__ = 12;
        sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0);
      }
      local_scalar_t__ sigma_donor_ki;
      sigma_donor_ki = DUMMY_VAR__;
      
      current_statement__ = 13;
      sigma_donor_ki = in__.scalar();
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        sigma_donor_ki = stan::math::lb_constrain(sigma_donor_ki, 0, lp__);
      } else {
        current_statement__ = 13;
        sigma_donor_ki = stan::math::lb_constrain(sigma_donor_ki, 0);
      }
      local_scalar_t__ sigma_host_ki;
      sigma_host_ki = DUMMY_VAR__;
      
      current_statement__ = 14;
      sigma_host_ki = in__.scalar();
      current_statement__ = 14;
      if (jacobian__) {
        current_statement__ = 14;
        sigma_host_ki = stan::math::lb_constrain(sigma_host_ki, 0, lp__);
      } else {
        current_statement__ = 14;
        sigma_host_ki = stan::math::lb_constrain(sigma_host_ki, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> global_params;
      global_params = Eigen::Matrix<local_scalar_t__, -1, 1>(8);
      stan::math::fill(global_params, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y1_mean;
      y1_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numOnt);
      stan::math::fill(y1_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y2_mean;
      y2_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numOnt);
      stan::math::fill(y2_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y3_mean;
      y3_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y3_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y4_mean;
      y4_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y4_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y5_mean;
      y5_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y5_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y6_mean;
      y6_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numChi);
      stan::math::fill(y6_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, DUMMY_VAR__);
      
      current_statement__ = 23;
      assign(global_params, psi,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 24;
      assign(global_params, delta_nai,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 25;
      assign(global_params, delta_rte,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 26;
      assign(global_params, rho_nai,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 27;
      assign(global_params, rho_rte,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 28;
      assign(global_params, mu,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 29;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(7));
      current_statement__ = 30;
      assign(global_params, kappa0,
        "assigning variable global_params", index_uni(8));
      current_statement__ = 31;
      assign(y_mean_stacked,
        map_rect<1, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 35;
      for (int i = 1; i <= numOnt; ++i) {
        current_statement__ = 32;
        assign(y1_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 3))),
          "assigning variable y1_mean", index_uni(i));
        current_statement__ = 33;
        assign(y2_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 2))),
          "assigning variable y2_mean", index_uni(i));}
      current_statement__ = 41;
      for (int i = 1; i <= numChi; ++i) {
        current_statement__ = 36;
        assign(y3_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_uni((((4 * numOnt) + (4 * i)) - 3))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 37;
        assign(y4_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_uni((((4 * numOnt) + (4 * i)) - 2))),
          "assigning variable y4_mean", index_uni(i));
        current_statement__ = 38;
        assign(y5_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_uni((((4 * numOnt) + (4 * i)) - 1))),
          "assigning variable y5_mean", index_uni(i));
        current_statement__ = 39;
        assign(y6_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_uni(((4 * numOnt) + (4 * i)))),
          "assigning variable y6_mean", index_uni(i));}
      {
        current_statement__ = 129;
        lp_accum__.add(normal_lpdf<propto__>(psi, 0.3, 0.2));
        current_statement__ = 130;
        lp_accum__.add(normal_lpdf<propto__>(rho_nai, 0.005, 0.25));
        current_statement__ = 131;
        lp_accum__.add(normal_lpdf<propto__>(rho_rte, 0.1, 0.25));
        current_statement__ = 132;
        lp_accum__.add(normal_lpdf<propto__>(delta_nai, 0.01, 0.25));
        current_statement__ = 133;
        lp_accum__.add(normal_lpdf<propto__>(delta_rte, 0.1, 0.25));
        current_statement__ = 134;
        lp_accum__.add(normal_lpdf<propto__>(mu, 0.03, 0.25));
        current_statement__ = 135;
        lp_accum__.add(normal_lpdf<propto__>(N0, 5E5, 1E5));
        current_statement__ = 136;
        lp_accum__.add(normal_lpdf<propto__>(kappa0, 0.8, 0.1));
        current_statement__ = 137;
        lp_accum__.add(normal_lpdf<propto__>(sigma_ont_counts, 0, 2));
        current_statement__ = 138;
        lp_accum__.add(normal_lpdf<propto__>(sigma_ont_ki, 0, 2));
        current_statement__ = 139;
        lp_accum__.add(normal_lpdf<propto__>(sigma_chi_counts, 0, 2));
        current_statement__ = 140;
        lp_accum__.add(normal_lpdf<propto__>(sigma_Nfd, 0, 2));
        current_statement__ = 141;
        lp_accum__.add(normal_lpdf<propto__>(sigma_donor_ki, 0, 2));
        current_statement__ = 142;
        lp_accum__.add(normal_lpdf<propto__>(sigma_host_ki, 0, 2));
        current_statement__ = 143;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log(ont_counts),
            stan::math::log(y1_mean), sigma_ont_counts));
        current_statement__ = 144;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(ont_ki, pstream__),
            asinsqrt_array(to_array_1d(y2_mean), pstream__), sigma_ont_ki));
        current_statement__ = 145;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log(chi_counts),
            stan::math::log(y3_mean), sigma_chi_counts));
        current_statement__ = 146;
        lp_accum__.add(
          normal_lpdf<propto__>(logit(N_donor_fraction),
            logit(to_array_1d(y4_mean)), sigma_Nfd));
        current_statement__ = 147;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(donor_ki, pstream__),
            asinsqrt_array(to_array_1d(y5_mean), pstream__), sigma_donor_ki));
        current_statement__ = 148;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(host_ki, pstream__),
            asinsqrt_array(to_array_1d(y6_mean), pstream__), sigma_host_ki));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_rtemld_cd8_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      psi = in__.scalar();
      current_statement__ = 1;
      psi = stan::math::lub_constrain(psi, 0, 1);
      double delta_nai;
      delta_nai = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta_nai = in__.scalar();
      current_statement__ = 2;
      delta_nai = stan::math::lub_constrain(delta_nai, 0, 1);
      double delta_rte;
      delta_rte = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      delta_rte = in__.scalar();
      current_statement__ = 3;
      delta_rte = stan::math::lub_constrain(delta_rte, 0, 1);
      double rho_nai;
      rho_nai = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      rho_nai = in__.scalar();
      current_statement__ = 4;
      rho_nai = stan::math::lub_constrain(rho_nai, 0, 1);
      double rho_rte;
      rho_rte = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_rte = in__.scalar();
      current_statement__ = 5;
      rho_rte = stan::math::lub_constrain(rho_rte, 0, 1);
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      mu = in__.scalar();
      current_statement__ = 6;
      mu = stan::math::lub_constrain(mu, 0, 1);
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      N0 = in__.scalar();
      current_statement__ = 7;
      N0 = stan::math::lub_constrain(N0, 1E4, 5E6);
      double kappa0;
      kappa0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      kappa0 = in__.scalar();
      current_statement__ = 8;
      kappa0 = stan::math::lub_constrain(kappa0, 0, 1);
      double sigma_ont_counts;
      sigma_ont_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_ont_counts = in__.scalar();
      current_statement__ = 9;
      sigma_ont_counts = stan::math::lb_constrain(sigma_ont_counts, 0);
      double sigma_ont_ki;
      sigma_ont_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_ont_ki = in__.scalar();
      current_statement__ = 10;
      sigma_ont_ki = stan::math::lb_constrain(sigma_ont_ki, 0);
      double sigma_chi_counts;
      sigma_chi_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      sigma_chi_counts = in__.scalar();
      current_statement__ = 11;
      sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0);
      double sigma_Nfd;
      sigma_Nfd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      sigma_Nfd = in__.scalar();
      current_statement__ = 12;
      sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0);
      double sigma_donor_ki;
      sigma_donor_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      sigma_donor_ki = in__.scalar();
      current_statement__ = 13;
      sigma_donor_ki = stan::math::lb_constrain(sigma_donor_ki, 0);
      double sigma_host_ki;
      sigma_host_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      sigma_host_ki = in__.scalar();
      current_statement__ = 14;
      sigma_host_ki = stan::math::lb_constrain(sigma_host_ki, 0);
      Eigen::Matrix<double, -1, 1> global_params;
      global_params = Eigen::Matrix<double, -1, 1>(8);
      stan::math::fill(global_params, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y1_mean;
      y1_mean = Eigen::Matrix<double, -1, 1>(numOnt);
      stan::math::fill(y1_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y2_mean;
      y2_mean = Eigen::Matrix<double, -1, 1>(numOnt);
      stan::math::fill(y2_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y3_mean;
      y3_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y3_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y4_mean;
      y4_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y4_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y5_mean;
      y5_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y5_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y6_mean;
      y6_mean = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(y6_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<double, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(psi);
      vars__.emplace_back(delta_nai);
      vars__.emplace_back(delta_rte);
      vars__.emplace_back(rho_nai);
      vars__.emplace_back(rho_rte);
      vars__.emplace_back(mu);
      vars__.emplace_back(N0);
      vars__.emplace_back(kappa0);
      vars__.emplace_back(sigma_ont_counts);
      vars__.emplace_back(sigma_ont_ki);
      vars__.emplace_back(sigma_chi_counts);
      vars__.emplace_back(sigma_Nfd);
      vars__.emplace_back(sigma_donor_ki);
      vars__.emplace_back(sigma_host_ki);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 23;
      assign(global_params, psi,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 24;
      assign(global_params, delta_nai,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 25;
      assign(global_params, delta_rte,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 26;
      assign(global_params, rho_nai,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 27;
      assign(global_params, rho_rte,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 28;
      assign(global_params, mu,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 29;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(7));
      current_statement__ = 30;
      assign(global_params, kappa0,
        "assigning variable global_params", index_uni(8));
      current_statement__ = 31;
      assign(y_mean_stacked,
        map_rect<2, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 35;
      for (int i = 1; i <= numOnt; ++i) {
        current_statement__ = 32;
        assign(y1_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 3))),
          "assigning variable y1_mean", index_uni(i));
        current_statement__ = 33;
        assign(y2_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 2))),
          "assigning variable y2_mean", index_uni(i));}
      current_statement__ = 41;
      for (int i = 1; i <= numChi; ++i) {
        current_statement__ = 36;
        assign(y3_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_uni((((4 * numOnt) + (4 * i)) - 3))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 37;
        assign(y4_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_uni((((4 * numOnt) + (4 * i)) - 2))),
          "assigning variable y4_mean", index_uni(i));
        current_statement__ = 38;
        assign(y5_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_uni((((4 * numOnt) + (4 * i)) - 1))),
          "assigning variable y5_mean", index_uni(i));
        current_statement__ = 39;
        assign(y6_mean,
          rvalue(y_mean_stacked, "y_mean_stacked",
            index_uni(((4 * numOnt) + (4 * i)))),
          "assigning variable y6_mean", index_uni(i));}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
          vars__.emplace_back(global_params[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
          vars__.emplace_back(y1_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
          vars__.emplace_back(y2_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y3_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y4_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y5_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
          vars__.emplace_back(y6_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
          vars__.emplace_back(y_mean_stacked[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_ont_pred;
      y_ont_pred = std::vector<std::vector<double>>(numPred, std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred1;
      y_chi_pred1 = std::vector<std::vector<double>>(numPred, std::vector<double>(8, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred2;
      y_chi_pred2 = std::vector<std::vector<double>>(numPred, std::vector<double>(8, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred3;
      y_chi_pred3 = std::vector<std::vector<double>>(numPred, std::vector<double>(8, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<double> y1_mean_pred;
      y1_mean_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred;
      y2_mean_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ontcounts_pred;
      ontcounts_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ontki_pred;
      ontki_pred = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred1;
      y3_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred1;
      y4_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y5_mean_pred1;
      y5_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y6_mean_pred1;
      y6_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred2;
      y3_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred2;
      y4_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y5_mean_pred2;
      y5_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y6_mean_pred2;
      y6_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred3;
      y3_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred3;
      y4_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y5_mean_pred3;
      y5_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y6_mean_pred3;
      y6_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred1;
      chicounts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred1;
      Nfd_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred2;
      chicounts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred2;
      Nfd_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred3;
      chicounts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred3;
      Nfd_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donorki_pred1;
      donorki_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> hostki_pred1;
      hostki_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donorki_pred2;
      donorki_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> hostki_pred2;
      hostki_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donorki_pred3;
      donorki_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> hostki_pred3;
      hostki_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ont_counts;
      log_lik_ont_counts = Eigen::Matrix<double, -1, 1>(numOnt);
      stan::math::fill(log_lik_ont_counts, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ont_ki;
      log_lik_ont_ki = Eigen::Matrix<double, -1, 1>(numOnt);
      stan::math::fill(log_lik_ont_ki, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_chi_counts;
      log_lik_chi_counts = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_chi_counts, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_Nfd;
      log_lik_Nfd = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_Nfd, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_donor_ki;
      log_lik_donor_ki = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_donor_ki, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_host_ki;
      log_lik_host_ki = Eigen::Matrix<double, -1, 1>(numChi);
      stan::math::fill(log_lik_host_ki, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> init_cond;
      init_cond = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 81;
      assign(init_cond, (kappa0 * N0),
        "assigning variable init_cond", index_uni(1));
      current_statement__ = 82;
      assign(init_cond, ((1 - kappa0) * N0),
        "assigning variable init_cond", index_uni(2));
      current_statement__ = 83;
      assign(init_cond, 0.0, "assigning variable init_cond", index_uni(3));
      current_statement__ = 84;
      assign(init_cond, 0.0, "assigning variable init_cond", index_uni(4));
      current_statement__ = 85;
      assign(y_ont_pred,
        solve_ode_ont(ts_pred_ont, init_cond,
          to_array_1d(global_params), pstream__),
        "assigning variable y_ont_pred");
      current_statement__ = 86;
      assign(y_chi_pred1,
        solve_ode_chi(ts_pred_chi1, tb_pred1, init_cond,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred1");
      current_statement__ = 87;
      assign(y_chi_pred2,
        solve_ode_chi(ts_pred_chi2, tb_pred2, init_cond,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred2");
      current_statement__ = 88;
      assign(y_chi_pred3,
        solve_ode_chi(ts_pred_chi3, tb_pred3, init_cond,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred3");
      current_statement__ = 118;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 89;
        assign(y1_mean_pred,
          (((rvalue(y_ont_pred, "y_ont_pred", index_uni(i), index_uni(1)) +
              rvalue(y_ont_pred, "y_ont_pred", index_uni(i), index_uni(2))) +
             rvalue(y_ont_pred, "y_ont_pred", index_uni(i), index_uni(3))) +
            rvalue(y_ont_pred, "y_ont_pred", index_uni(i), index_uni(4))),
          "assigning variable y1_mean_pred", index_uni(i));
        current_statement__ = 90;
        assign(y2_mean_pred,
          ((rvalue(y_ont_pred, "y_ont_pred", index_uni(i), index_uni(1)) +
             rvalue(y_ont_pred, "y_ont_pred", index_uni(i), index_uni(3))) /
            rvalue(y1_mean_pred, "y1_mean_pred", index_uni(i))),
          "assigning variable y2_mean_pred", index_uni(i));
        current_statement__ = 91;
        assign(ontcounts_pred,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred, "y1_mean_pred", index_uni(i))),
              sigma_ont_counts, base_rng__)),
          "assigning variable ontcounts_pred", index_uni(i));
        current_statement__ = 92;
        assign(ontki_pred,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y2_mean_pred, "y2_mean_pred", index_uni(i)), pstream__),
              sigma_ont_ki, base_rng__), pstream__),
          "assigning variable ontki_pred", index_uni(i));
        current_statement__ = 93;
        assign(y3_mean_pred1,
          (((((((rvalue(y_chi_pred1, "y_chi_pred1",
                   index_uni(i), index_uni(1)) +
                  rvalue(y_chi_pred1, "y_chi_pred1",
                    index_uni(i), index_uni(2))) +
                 rvalue(y_chi_pred1, "y_chi_pred1",
                   index_uni(i), index_uni(3))) +
                rvalue(y_chi_pred1, "y_chi_pred1",
                  index_uni(i), index_uni(4))) +
               rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(5)))
              +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(6)))
             +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(7)))
            + rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(8))),
          "assigning variable y3_mean_pred1", index_uni(i));
        current_statement__ = 94;
        assign(y3_mean_pred2,
          (((((((rvalue(y_chi_pred2, "y_chi_pred2",
                   index_uni(i), index_uni(1)) +
                  rvalue(y_chi_pred2, "y_chi_pred2",
                    index_uni(i), index_uni(2))) +
                 rvalue(y_chi_pred2, "y_chi_pred2",
                   index_uni(i), index_uni(3))) +
                rvalue(y_chi_pred2, "y_chi_pred2",
                  index_uni(i), index_uni(4))) +
               rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(5)))
              +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(6)))
             +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(7)))
            + rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(8))),
          "assigning variable y3_mean_pred2", index_uni(i));
        current_statement__ = 95;
        assign(y3_mean_pred3,
          (((((((rvalue(y_chi_pred3, "y_chi_pred3",
                   index_uni(i), index_uni(1)) +
                  rvalue(y_chi_pred3, "y_chi_pred3",
                    index_uni(i), index_uni(2))) +
                 rvalue(y_chi_pred3, "y_chi_pred3",
                   index_uni(i), index_uni(3))) +
                rvalue(y_chi_pred3, "y_chi_pred3",
                  index_uni(i), index_uni(4))) +
               rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(5)))
              +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(6)))
             +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(7)))
            + rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(8))),
          "assigning variable y3_mean_pred3", index_uni(i));
        current_statement__ = 96;
        assign(y4_mean_pred1,
          ((((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(1))
               +
               rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(2)))
              +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(3)))
             +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(4)))
            /
            (rvalue(y3_mean_pred1, "y3_mean_pred1", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred_chi1, "ts_pred_chi1", index_uni(i)) - 54), pstream__))),
          "assigning variable y4_mean_pred1", index_uni(i));
        current_statement__ = 97;
        assign(y4_mean_pred2,
          ((((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(1))
               +
               rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(2)))
              +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(3)))
             +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(4)))
            /
            (rvalue(y3_mean_pred2, "y3_mean_pred2", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred_chi2, "ts_pred_chi2", index_uni(i)) - 71), pstream__))),
          "assigning variable y4_mean_pred2", index_uni(i));
        current_statement__ = 98;
        assign(y4_mean_pred3,
          ((((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(1))
               +
               rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(2)))
              +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(3)))
             +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(4)))
            /
            (rvalue(y3_mean_pred3, "y3_mean_pred3", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred_chi3, "ts_pred_chi3", index_uni(i)) - 97), pstream__))),
          "assigning variable y4_mean_pred3", index_uni(i));
        current_statement__ = 99;
        assign(y5_mean_pred1,
          ((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(3)))
            /
            (((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(1))
                +
                rvalue(y_chi_pred1, "y_chi_pred1",
                  index_uni(i), index_uni(2))) +
               rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(3)))
              +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(4)))),
          "assigning variable y5_mean_pred1", index_uni(i));
        current_statement__ = 100;
        assign(y5_mean_pred2,
          ((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(3)))
            /
            (((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(1))
                +
                rvalue(y_chi_pred2, "y_chi_pred2",
                  index_uni(i), index_uni(2))) +
               rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(3)))
              +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(4)))),
          "assigning variable y5_mean_pred2", index_uni(i));
        current_statement__ = 101;
        assign(y5_mean_pred3,
          ((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(3)))
            /
            (((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(1))
                +
                rvalue(y_chi_pred3, "y_chi_pred3",
                  index_uni(i), index_uni(2))) +
               rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(3)))
              +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(4)))),
          "assigning variable y5_mean_pred3", index_uni(i));
        current_statement__ = 102;
        assign(y6_mean_pred1,
          ((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(5)) +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(7)))
            /
            (((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(5))
                +
                rvalue(y_chi_pred1, "y_chi_pred1",
                  index_uni(i), index_uni(6))) +
               rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(7)))
              +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(8)))),
          "assigning variable y6_mean_pred1", index_uni(i));
        current_statement__ = 103;
        assign(y6_mean_pred2,
          ((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(5)) +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(7)))
            /
            (((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(5))
                +
                rvalue(y_chi_pred2, "y_chi_pred2",
                  index_uni(i), index_uni(6))) +
               rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(7)))
              +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(8)))),
          "assigning variable y6_mean_pred2", index_uni(i));
        current_statement__ = 104;
        assign(y6_mean_pred3,
          ((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(5)) +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(7)))
            /
            (((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(5))
                +
                rvalue(y_chi_pred3, "y_chi_pred3",
                  index_uni(i), index_uni(6))) +
               rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(7)))
              +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(8)))),
          "assigning variable y6_mean_pred3", index_uni(i));
        current_statement__ = 105;
        assign(chicounts_pred1,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y3_mean_pred1, "y3_mean_pred1", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred1", index_uni(i));
        current_statement__ = 106;
        assign(chicounts_pred2,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y3_mean_pred2, "y3_mean_pred2", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred2", index_uni(i));
        current_statement__ = 107;
        assign(chicounts_pred3,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y3_mean_pred3, "y3_mean_pred3", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred3", index_uni(i));
        current_statement__ = 108;
        assign(Nfd_pred1,
          logit_inverse(
            normal_rng(
              logit(rvalue(y4_mean_pred1, "y4_mean_pred1", index_uni(i))),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred1", index_uni(i));
        current_statement__ = 109;
        assign(Nfd_pred2,
          logit_inverse(
            normal_rng(
              logit(rvalue(y4_mean_pred2, "y4_mean_pred2", index_uni(i))),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred2", index_uni(i));
        current_statement__ = 110;
        assign(Nfd_pred3,
          logit_inverse(
            normal_rng(
              logit(rvalue(y4_mean_pred3, "y4_mean_pred3", index_uni(i))),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred3", index_uni(i));
        current_statement__ = 111;
        assign(donorki_pred1,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y5_mean_pred1, "y5_mean_pred1", index_uni(i)), pstream__),
              sigma_donor_ki, base_rng__), pstream__),
          "assigning variable donorki_pred1", index_uni(i));
        current_statement__ = 112;
        assign(donorki_pred2,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y5_mean_pred2, "y5_mean_pred2", index_uni(i)), pstream__),
              sigma_donor_ki, base_rng__), pstream__),
          "assigning variable donorki_pred2", index_uni(i));
        current_statement__ = 113;
        assign(donorki_pred3,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y5_mean_pred3, "y5_mean_pred3", index_uni(i)), pstream__),
              sigma_donor_ki, base_rng__), pstream__),
          "assigning variable donorki_pred3", index_uni(i));
        current_statement__ = 114;
        assign(hostki_pred1,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y6_mean_pred1, "y6_mean_pred1", index_uni(i)), pstream__),
              sigma_host_ki, base_rng__), pstream__),
          "assigning variable hostki_pred1", index_uni(i));
        current_statement__ = 115;
        assign(hostki_pred2,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y6_mean_pred2, "y6_mean_pred2", index_uni(i)), pstream__),
              sigma_host_ki, base_rng__), pstream__),
          "assigning variable hostki_pred2", index_uni(i));
        current_statement__ = 116;
        assign(hostki_pred3,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y6_mean_pred3, "y6_mean_pred3", index_uni(i)), pstream__),
              sigma_host_ki, base_rng__), pstream__),
          "assigning variable hostki_pred3", index_uni(i));}
      current_statement__ = 122;
      for (int i = 1; i <= numOnt; ++i) {
        current_statement__ = 119;
        assign(log_lik_ont_counts,
          normal_lpdf<false>(
            stan::math::log(rvalue(ont_counts, "ont_counts", index_uni(i))),
            stan::math::log(rvalue(y1_mean, "y1_mean", index_uni(i))),
            sigma_ont_counts),
          "assigning variable log_lik_ont_counts", index_uni(i));
        current_statement__ = 120;
        assign(log_lik_ont_ki,
          normal_lpdf<false>(
            asinsqrt_real(rvalue(ont_ki, "ont_ki", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(y2_mean, "y2_mean", index_uni(i)), pstream__),
            sigma_ont_ki), "assigning variable log_lik_ont_ki", index_uni(i));
      }
      current_statement__ = 128;
      for (int i = 1; i <= numChi; ++i) {
        current_statement__ = 123;
        assign(log_lik_chi_counts,
          normal_lpdf<false>(
            stan::math::log(rvalue(chi_counts, "chi_counts", index_uni(i))),
            stan::math::log(rvalue(y3_mean, "y3_mean", index_uni(i))),
            sigma_chi_counts),
          "assigning variable log_lik_chi_counts", index_uni(i));
        current_statement__ = 124;
        assign(log_lik_Nfd,
          normal_lpdf<false>(
            logit(rvalue(N_donor_fraction, "N_donor_fraction", index_uni(i))),
            logit(rvalue(y4_mean, "y4_mean", index_uni(i))), sigma_Nfd),
          "assigning variable log_lik_Nfd", index_uni(i));
        current_statement__ = 125;
        assign(log_lik_donor_ki,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(donor_ki, "donor_ki", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(y5_mean, "y5_mean", index_uni(i)), pstream__),
            sigma_donor_ki),
          "assigning variable log_lik_donor_ki", index_uni(i));
        current_statement__ = 126;
        assign(log_lik_host_ki,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(host_ki, "host_ki", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(y6_mean, "y6_mean", index_uni(i)), pstream__),
            sigma_host_ki),
          "assigning variable log_lik_host_ki", index_uni(i));}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_ont_pred[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred1[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred2[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred3[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ontcounts_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ontki_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y5_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y6_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y5_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y6_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y5_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y6_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donorki_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(hostki_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donorki_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(hostki_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donorki_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(hostki_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        vars__.emplace_back(log_lik_ont_counts[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        vars__.emplace_back(log_lik_ont_ki[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_chi_counts[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_Nfd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_donor_ki[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        vars__.emplace_back(log_lik_host_ki[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        vars__.emplace_back(init_cond[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      psi = context__.vals_r("psi")[(1 - 1)];
      double psi_free__;
      psi_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      psi_free__ = stan::math::lub_free(psi, 0, 1);
      double delta_nai;
      delta_nai = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta_nai = context__.vals_r("delta_nai")[(1 - 1)];
      double delta_nai_free__;
      delta_nai_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      delta_nai_free__ = stan::math::lub_free(delta_nai, 0, 1);
      double delta_rte;
      delta_rte = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      delta_rte = context__.vals_r("delta_rte")[(1 - 1)];
      double delta_rte_free__;
      delta_rte_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      delta_rte_free__ = stan::math::lub_free(delta_rte, 0, 1);
      double rho_nai;
      rho_nai = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      rho_nai = context__.vals_r("rho_nai")[(1 - 1)];
      double rho_nai_free__;
      rho_nai_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      rho_nai_free__ = stan::math::lub_free(rho_nai, 0, 1);
      double rho_rte;
      rho_rte = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_rte = context__.vals_r("rho_rte")[(1 - 1)];
      double rho_rte_free__;
      rho_rte_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_rte_free__ = stan::math::lub_free(rho_rte, 0, 1);
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      mu = context__.vals_r("mu")[(1 - 1)];
      double mu_free__;
      mu_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      mu_free__ = stan::math::lub_free(mu, 0, 1);
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      N0 = context__.vals_r("N0")[(1 - 1)];
      double N0_free__;
      N0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      N0_free__ = stan::math::lub_free(N0, 1E4, 5E6);
      double kappa0;
      kappa0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      kappa0 = context__.vals_r("kappa0")[(1 - 1)];
      double kappa0_free__;
      kappa0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      kappa0_free__ = stan::math::lub_free(kappa0, 0, 1);
      double sigma_ont_counts;
      sigma_ont_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_ont_counts = context__.vals_r("sigma_ont_counts")[(1 - 1)];
      double sigma_ont_counts_free__;
      sigma_ont_counts_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_ont_counts_free__ = stan::math::lb_free(sigma_ont_counts, 0);
      double sigma_ont_ki;
      sigma_ont_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_ont_ki = context__.vals_r("sigma_ont_ki")[(1 - 1)];
      double sigma_ont_ki_free__;
      sigma_ont_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_ont_ki_free__ = stan::math::lb_free(sigma_ont_ki, 0);
      double sigma_chi_counts;
      sigma_chi_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      sigma_chi_counts = context__.vals_r("sigma_chi_counts")[(1 - 1)];
      double sigma_chi_counts_free__;
      sigma_chi_counts_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      sigma_chi_counts_free__ = stan::math::lb_free(sigma_chi_counts, 0);
      double sigma_Nfd;
      sigma_Nfd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      sigma_Nfd = context__.vals_r("sigma_Nfd")[(1 - 1)];
      double sigma_Nfd_free__;
      sigma_Nfd_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      sigma_Nfd_free__ = stan::math::lb_free(sigma_Nfd, 0);
      double sigma_donor_ki;
      sigma_donor_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      sigma_donor_ki = context__.vals_r("sigma_donor_ki")[(1 - 1)];
      double sigma_donor_ki_free__;
      sigma_donor_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      sigma_donor_ki_free__ = stan::math::lb_free(sigma_donor_ki, 0);
      double sigma_host_ki;
      sigma_host_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      sigma_host_ki = context__.vals_r("sigma_host_ki")[(1 - 1)];
      double sigma_host_ki_free__;
      sigma_host_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      sigma_host_ki_free__ = stan::math::lb_free(sigma_host_ki, 0);
      vars__.emplace_back(psi_free__);
      vars__.emplace_back(delta_nai_free__);
      vars__.emplace_back(delta_rte_free__);
      vars__.emplace_back(rho_nai_free__);
      vars__.emplace_back(rho_rte_free__);
      vars__.emplace_back(mu_free__);
      vars__.emplace_back(N0_free__);
      vars__.emplace_back(kappa0_free__);
      vars__.emplace_back(sigma_ont_counts_free__);
      vars__.emplace_back(sigma_ont_ki_free__);
      vars__.emplace_back(sigma_chi_counts_free__);
      vars__.emplace_back(sigma_Nfd_free__);
      vars__.emplace_back(sigma_donor_ki_free__);
      vars__.emplace_back(sigma_host_ki_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("psi");
    names__.emplace_back("delta_nai");
    names__.emplace_back("delta_rte");
    names__.emplace_back("rho_nai");
    names__.emplace_back("rho_rte");
    names__.emplace_back("mu");
    names__.emplace_back("N0");
    names__.emplace_back("kappa0");
    names__.emplace_back("sigma_ont_counts");
    names__.emplace_back("sigma_ont_ki");
    names__.emplace_back("sigma_chi_counts");
    names__.emplace_back("sigma_Nfd");
    names__.emplace_back("sigma_donor_ki");
    names__.emplace_back("sigma_host_ki");
    names__.emplace_back("global_params");
    names__.emplace_back("y1_mean");
    names__.emplace_back("y2_mean");
    names__.emplace_back("y3_mean");
    names__.emplace_back("y4_mean");
    names__.emplace_back("y5_mean");
    names__.emplace_back("y6_mean");
    names__.emplace_back("y_mean_stacked");
    names__.emplace_back("y_ont_pred");
    names__.emplace_back("y_chi_pred1");
    names__.emplace_back("y_chi_pred2");
    names__.emplace_back("y_chi_pred3");
    names__.emplace_back("y1_mean_pred");
    names__.emplace_back("y2_mean_pred");
    names__.emplace_back("ontcounts_pred");
    names__.emplace_back("ontki_pred");
    names__.emplace_back("y3_mean_pred1");
    names__.emplace_back("y4_mean_pred1");
    names__.emplace_back("y5_mean_pred1");
    names__.emplace_back("y6_mean_pred1");
    names__.emplace_back("y3_mean_pred2");
    names__.emplace_back("y4_mean_pred2");
    names__.emplace_back("y5_mean_pred2");
    names__.emplace_back("y6_mean_pred2");
    names__.emplace_back("y3_mean_pred3");
    names__.emplace_back("y4_mean_pred3");
    names__.emplace_back("y5_mean_pred3");
    names__.emplace_back("y6_mean_pred3");
    names__.emplace_back("chicounts_pred1");
    names__.emplace_back("Nfd_pred1");
    names__.emplace_back("chicounts_pred2");
    names__.emplace_back("Nfd_pred2");
    names__.emplace_back("chicounts_pred3");
    names__.emplace_back("Nfd_pred3");
    names__.emplace_back("donorki_pred1");
    names__.emplace_back("hostki_pred1");
    names__.emplace_back("donorki_pred2");
    names__.emplace_back("hostki_pred2");
    names__.emplace_back("donorki_pred3");
    names__.emplace_back("hostki_pred3");
    names__.emplace_back("log_lik_ont_counts");
    names__.emplace_back("log_lik_ont_ki");
    names__.emplace_back("log_lik_chi_counts");
    names__.emplace_back("log_lik_Nfd");
    names__.emplace_back("log_lik_donor_ki");
    names__.emplace_back("log_lik_host_ki");
    names__.emplace_back("init_cond");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(8)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numOnt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numOnt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_mean_stacked_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(8)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(8)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(8)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numOnt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numOnt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numChi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(4)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "delta_nai");
    param_names__.emplace_back(std::string() + "delta_rte");
    param_names__.emplace_back(std::string() + "rho_nai");
    param_names__.emplace_back(std::string() + "rho_rte");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "kappa0");
    param_names__.emplace_back(std::string() + "sigma_ont_counts");
    param_names__.emplace_back(std::string() + "sigma_ont_ki");
    param_names__.emplace_back(std::string() + "sigma_chi_counts");
    param_names__.emplace_back(std::string() + "sigma_Nfd");
    param_names__.emplace_back(std::string() + "sigma_donor_ki");
    param_names__.emplace_back(std::string() + "sigma_host_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_ont_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ontcounts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ontki_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ont_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ont_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_chi_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_donor_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_host_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "delta_nai");
    param_names__.emplace_back(std::string() + "delta_rte");
    param_names__.emplace_back(std::string() + "rho_nai");
    param_names__.emplace_back(std::string() + "rho_rte");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "N0");
    param_names__.emplace_back(std::string() + "kappa0");
    param_names__.emplace_back(std::string() + "sigma_ont_counts");
    param_names__.emplace_back(std::string() + "sigma_ont_ki");
    param_names__.emplace_back(std::string() + "sigma_chi_counts");
    param_names__.emplace_back(std::string() + "sigma_Nfd");
    param_names__.emplace_back(std::string() + "sigma_donor_ki");
    param_names__.emplace_back(std::string() + "sigma_host_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_ont_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ontcounts_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ontki_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y5_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y6_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ont_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numOnt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ont_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_chi_counts" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_donor_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numChi; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_host_ki" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta_nai\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta_rte\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_nai\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_rte\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ont_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ont_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_chi_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 8 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y5_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y6_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_ont_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 8 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 8 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 8 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ontcounts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ontki_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ont_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ont_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_chi_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_donor_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_host_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta_nai\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta_rte\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_nai\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_rte\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ont_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ont_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_chi_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 8 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y5_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y6_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_ont_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 8 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 8 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 8 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ontcounts_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ontki_pred\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y5_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y6_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ont_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ont_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numOnt << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_chi_counts\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_donor_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_host_ki\",\"type\":{\"name\":\"vector\",\"length\":" << numChi << "},\"block\":\"generated_quantities\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = MAP_rtemld_cd8_model_namespace::MAP_rtemld_cd8_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return MAP_rtemld_cd8_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, MAP_rtemld_cd8_model_namespace::math_reduce_functor__)
STAN_REGISTER_MAP_RECT(2, MAP_rtemld_cd8_model_namespace::math_reduce_functor__)